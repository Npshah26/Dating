{"version":3,"file":"static/js/2748.153cdf07.chunk.js","mappings":"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","sources":["components/PageTitleWrapper/index.tsx","content/Loader.tsx","content/ManageCustomFields/manageCustomFields.tsx","../node_modules/@mui/icons-material/Delete.js","../node_modules/@mui/icons-material/Search.js","../node_modules/@mui/material/TableHead/tableHeadClasses.js","../node_modules/@mui/material/TableHead/TableHead.js","../node_modules/@mui/material/Table/tableClasses.js","../node_modules/@mui/material/Table/Table.js"],"sourcesContent":["import { FC, ReactNode } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Box, Container, styled } from '@mui/material';\r\n\r\nconst PageTitle = styled(Box)(\r\n  ({ theme }) => `\r\n        padding: ${theme.spacing(1)};\r\n`\r\n);\r\n\r\ninterface PageTitleWrapperProps {\r\n  children?: ReactNode;\r\n}\r\n\r\nconst PageTitleWrapper: FC<PageTitleWrapperProps> = ({ children }) => {\r\n  return (\r\n    <PageTitle className=\"MuiPageTitle-wrapper\">\r\n      <Container maxWidth=\"lg\">{children}</Container>\r\n    </PageTitle>\r\n  );\r\n};\r\n\r\nPageTitleWrapper.propTypes = {\r\n  children: PropTypes.node.isRequired\r\n};\r\n\r\nexport default PageTitleWrapper;\r\n","import React from 'react';\r\nimport './Loader.css';\r\n\r\ninterface Props {\r\n  title: string;\r\n}\r\n\r\nconst Loader1 = (props: Props) => {\r\n  const { title } = props;\r\n  return (\r\n    // <div className=\"loader\">\r\n    //     <img className=\"img\" src={loader} alt=\"\" />\r\n    //     <span>{title}</span>\r\n    // </div>\r\n    <div className=\"spinner-container\">\r\n      <div className=\"loading-spinner\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader1;\r\n","import { Helmet } from 'react-helmet-async';\r\nimport PageTitleWrapper from '../../components/PageTitleWrapper';\r\nimport {\r\n  Grid,\r\n  Container,\r\n  Box,\r\n  Breadcrumbs,\r\n  Button,\r\n  Card,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  Divider,\r\n  FormHelperText,\r\n  IconButton,\r\n  Stack,\r\n  Switch,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  TextField,\r\n  Tooltip,\r\n  Typography,\r\n  useTheme,\r\n  styled,\r\n  FormControl,\r\n  InputAdornment,\r\n  Paper,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Chip\r\n} from '@mui/material';\r\nimport EditTwoToneIcon from '@mui/icons-material/EditTwoTone';\r\nimport AddTwoToneIcon from '@mui/icons-material/AddTwoTone';\r\nimport HomeIcon from '@mui/icons-material/Home';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport React, { useState, ChangeEvent, useEffect } from 'react';\r\nimport Loader1 from '../Loader';\r\nimport APIservice from 'src/utils/APIservice';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport '../../content/smallScreen.css';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport { CardHeader, Col, FormGroup, Row } from 'react-bootstrap';\r\nimport ForwardToInboxIcon from '@mui/icons-material/ForwardToInbox';\r\nimport './manageCustomFields.css';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { object } from 'prop-types';\r\nimport checkIsDemoUser from 'src/utils/IsDemoUserCheck';\r\nimport { useSnackbar } from '../useSnackbar';\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250\r\n    }\r\n  }\r\n};\r\n\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n  '& .MuiDialogContent-root': {\r\n    padding: theme.spacing(2)\r\n  },\r\n  '& .MuiDialogActions-root': {\r\n    padding: theme.spacing(1)\r\n  },\r\n  '& .MuiPaper-root': {\r\n    height: '700px'\r\n  }\r\n}));\r\n\r\nexport interface DialogTitleProps {\r\n  id: string;\r\n  children?: React.ReactNode;\r\n  onClose: () => void;\r\n}\r\n\r\nfunction BootstrapDialogTitle(props: DialogTitleProps) {\r\n  const { children, onClose, ...other } = props;\r\n\r\n  return (\r\n    <DialogTitle\r\n      sx={{ m: 0, p: 2, fontSize: '18px', fontWeight: 'bold' }}\r\n      {...other}\r\n    >\r\n      {children}\r\n      {onClose ? (\r\n        <IconButton\r\n          aria-label=\"close\"\r\n          onClick={onClose}\r\n          sx={{\r\n            position: 'absolute',\r\n            right: 13,\r\n            top: 13,\r\n            color: (theme) => theme.palette.grey[500]\r\n          }}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </DialogTitle>\r\n  );\r\n}\r\n\r\nconst initialState = {\r\n  id: 0,\r\n  name: '',\r\n  displayName: '',\r\n  mappedFieldName: '',\r\n  description: null,\r\n  valueTypeId: 0,\r\n  isRequired: false,\r\n  allowInSearch: false,\r\n  allowInFilter: false,\r\n  allowIncompleteProfile: false,\r\n  allowInPreferences: false,\r\n  defaultValue: null,\r\n  valueList: null,\r\n  textLength: null,\r\n  completeprofilesectioname: null\r\n};\r\n\r\nconst ManageCustomFields = () => {\r\n  const card = {\r\n    height: 'auto',\r\n    padding: '10px',\r\n    boxShadow:\r\n      '0px 0px 4px rgba(159, 162, 191, .18), 0px 0px 2px rgba(159, 162, 191, 0.32)',\r\n    borderRadius: '5px',\r\n    marginBottom: '30px'\r\n  };\r\n\r\n  const navigate = useNavigate();\r\n  const theme = useTheme();\r\n  const [page, setPage] = useState<number>(0);\r\n  const [limit, setLimit] = useState<number>(10);\r\n  const [row, setRow] = useState<number>(10);\r\n  const [v1, setV1] = React.useState<any>(initialState);\r\n  let [singleValueOfValueList, setSingleValueOfValueList] = useState('');\r\n  let [arrayValueList, setArrayValueList] = useState<any>([]);\r\n\r\n  let [singleValueOfDefaultValue, setSingleValueOfDefaultValue] = useState('');\r\n  let [arrayDefaultValue, setArrayDefaultValue] = useState<any>([]);\r\n\r\n  const [isOpen, setIsOpen] = React.useState(false);\r\n  const [isloading, setIsLoading] = useState(false);\r\n  const [ischeck, setIsCheck] = useState(false);\r\n  let [search, setSearch] = useState('');\r\n  const [isDel, setIsDel] = useState(false);\r\n\r\n  // const [customNotifications, setCustomNotifications] = React.useState<any[]>([]);\r\n  const [customFields, setCustomFields] = React.useState<any[]>([]);\r\n  const [valueType, setValueType] = useState<any>([]);\r\n  // const [customFields, setCustomFields] = React.useState<any>(initialState);\r\n  const [isNameError, setIsNameError] = useState(false);\r\n  const [NameErrorMsg, setNameErrorMsg] = useState('');\r\n  const [isDisplayNameError, setIsDisplayNameError] = useState(false);\r\n  const [DisplayNameErrorMsg, setDisplayNameErrorMsg] = useState('');\r\n  const [isMappedFieldNameError, setIsMappedFieldNameError] = useState(false);\r\n  const [MappedFieldNameErrorMsg, setMappedFieldNameErrorMsg] = useState('');\r\n  const [isDescriptionError, setIsDescriptionError] = useState(false);\r\n  const [DescriptionErrorMsg, setDescriptionErrorMsg] = useState('');\r\n  const [isValueTypeError, setIsValueTypeError] = useState(false);\r\n  const [ValueTypeErrorMsg, setValueTypeErrorMsg] = useState('');\r\n  const [isDefaultValueError, setIsDefaultValueError] = useState(false);\r\n  const [DefaultValueErrorMsg, setDefaultValueErrorMsg] = useState('');\r\n  const [isValueListError, setIsValueListError] = useState(false);\r\n  const [ValueListErrorMsg, setValueListErrorMsg] = useState('');\r\n  const [isTextLengthError, setIsTextLengthError] = useState(false);\r\n  const [TextLengthErrorMsg, setTextLengthErrorMsg] = useState('');\r\n  const [isSectionError, setIsSectionError] = useState(false);\r\n  const [SectionErrorMsg, setSectionErrorMsg] = useState('');\r\n\r\n  const [image, setImage] = React.useState('');\r\n  let [credentail, setCredentail] = useState<any>();\r\n\r\n  const [isReadPermission, setIsReadPermission] = useState(true);\r\n  const [isWritePermission, setIsWritePermission] = useState(true);\r\n  const [isEditPermission, setIsEditPermission] = useState(true);\r\n  const [isDeletePermission, setIsDeletePermission] = useState(true);\r\n  const { showSnackBar, SnackbarComponent } = useSnackbar();\r\n\r\n  const profileSection = [\r\n    // { value: 'Profile For', label: 'Profile For' },\r\n    { value: 'Basic Details', label: 'Basic Details' },\r\n    { value: 'Personal Details', label: 'Personal Details' },\r\n    { value: 'Community Details', label: 'Community Details' },\r\n    { value: 'Address Details', label: 'Address Details' },\r\n    {\r\n      value: 'Education & Career Details',\r\n      label: 'Education & Career Details'\r\n    },\r\n    { value: 'Other Details', label: 'Other Details' },\r\n    { value: 'About Me', label: 'About Me' },\r\n    { value: 'Expectations', label: 'Expectations' }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    let cred = JSON.parse(localStorage.getItem('Credentials'));\r\n    setCredentail(cred);\r\n    if (cred) {\r\n      if (cred.roleId != 1) {\r\n        let ind = cred.pagePermissions.findIndex(\r\n          (c: any) => c.title === 'Block Users'\r\n        );\r\n        if (ind >= 0) {\r\n          setIsReadPermission(cred.pagePermissions[ind].isReadPermission);\r\n          setIsWritePermission(cred.pagePermissions[ind].isAddPermission);\r\n          setIsEditPermission(cred.pagePermissions[ind].isEditPermission);\r\n          setIsDeletePermission(cred.pagePermissions[ind].isDeletePermission);\r\n\r\n          if (cred.pagePermissions[ind].isReadPermission) loadData();\r\n        }\r\n      } else {\r\n        loadData();\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const loadData = async () => {\r\n    await getdata(page, limit);\r\n    await getValueType();\r\n  };\r\n\r\n  const getdata = async (startIndex: number, fetchRecord: number) => {\r\n    try {\r\n      if (search) {\r\n        const token = localStorage.getItem('SessionToken');\r\n        const refreshToken = localStorage.getItem('RefreshToken');\r\n\r\n        let obj = {\r\n          startIndex: startIndex,\r\n          fetchRecord: fetchRecord,\r\n          isActive: null,\r\n          searchString: search ? search : ''\r\n        };\r\n        const res = await APIservice.httpPost(\r\n          '/api/admin/manageCustomFields/getCustomfields',\r\n          obj,\r\n          token,\r\n          refreshToken\r\n        );\r\n        setCustomFields(res.recordList);\r\n        setRow(res.totalRecords);\r\n        for (let i = 0; i < customFields.length; i++) {\r\n          customFields[i].valueList = customFields[i].valueList.join('; ');\r\n        }\r\n      } else {\r\n        setIsLoading(true);\r\n        const token = localStorage.getItem('SessionToken');\r\n        const refreshToken = localStorage.getItem('RefreshToken');\r\n        let obj = {\r\n          startIndex: startIndex,\r\n          fetchRecord: fetchRecord,\r\n          isActive: null\r\n        };\r\n        const res = await APIservice.httpPost(\r\n          '/api/admin/manageCustomFields/getCustomfields',\r\n          obj,\r\n          token,\r\n          refreshToken\r\n        );\r\n        setCustomFields(res.recordList);\r\n        for (let i = 0; i < customFields.length; i++) {\r\n          customFields[i].valueList = customFields[i].valueList.join('; ');\r\n        }\r\n\r\n        setRow(res.totalRecords);\r\n        if (res && res.status == 200) {\r\n          setIsOpen(false);\r\n        } else if (res.status == 401) {\r\n          navigate('/admin');\r\n          localStorage.clear();\r\n        } else if (res.status == 500) {\r\n          setIsOpen(false);\r\n          toast.error(res.message, {\r\n            autoClose: 6000,\r\n            hideProgressBar: true,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n            theme: 'colored',\r\n            position: toast.POSITION.TOP_RIGHT\r\n          });\r\n        } else if (res.status == 300) {\r\n          setIsOpen(false);\r\n          toast.error(res.message, {\r\n            autoClose: 6000,\r\n            hideProgressBar: true,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n            theme: 'colored',\r\n            position: toast.POSITION.TOP_RIGHT\r\n          });\r\n        } else if (res.status == 400) {\r\n          setIsOpen(false);\r\n          toast.error(res.message, {\r\n            autoClose: 6000,\r\n            hideProgressBar: true,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n            theme: 'colored',\r\n            position: toast.POSITION.TOP_RIGHT\r\n          });\r\n        } else if (res.status == 404) {\r\n          setIsOpen(false);\r\n          toast.error(res.message, {\r\n            autoClose: 6000,\r\n            hideProgressBar: true,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n            theme: 'colored',\r\n            position: toast.POSITION.TOP_RIGHT\r\n          });\r\n        }\r\n        setIsLoading(false);\r\n      }\r\n    } catch (error) {\r\n      setIsLoading(false);\r\n      setIsOpen(false);\r\n      toast.error(error, {\r\n        autoClose: 6000,\r\n        hideProgressBar: true,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: 'colored',\r\n        position: toast.POSITION.TOP_RIGHT\r\n      });\r\n    }\r\n  };\r\n\r\n  const getValueType = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const token = localStorage.getItem('SessionToken');\r\n      const refreshToken = localStorage.getItem('RefreshToken');\r\n      const res = await APIservice.httpPost(\r\n        '/api/admin/manageCustomFields/getCustomfieldValueType',\r\n        {},\r\n        token,\r\n        refreshToken\r\n      );\r\n      setValueType(res.recordList);\r\n      if (res && res.status === 200) {\r\n      } else if (res && res.status === 401) {\r\n        localStorage.clear();\r\n        navigate('/admin');\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      setIsLoading(false);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const reg = new RegExp('^[a-zA-Z0-9 ]+$');\r\n\r\n  const handleAddValueList = () => {\r\n    if (reg.test(singleValueOfValueList)) {\r\n      if (singleValueOfValueList.trim() !== '') {\r\n        arrayValueList = arrayValueList ? [...arrayValueList] : [];\r\n        arrayValueList.push(singleValueOfValueList);\r\n        setArrayValueList(arrayValueList);\r\n        setSingleValueOfValueList('');\r\n        console.log(arrayValueList);\r\n      }\r\n    } else {\r\n      setIsValueListError(true);\r\n      setValueListErrorMsg('Value is invalid.');\r\n    }\r\n  };\r\n\r\n  const handleDeleteValueList = (indexToRemove) => {\r\n    arrayValueList = arrayValueList.filter(\r\n      (_, index) => index !== indexToRemove\r\n    );\r\n    setArrayValueList(arrayValueList);\r\n    // v1.valueList = arrayValueList\r\n  };\r\n\r\n  const handleAddDefaultValue = () => {\r\n    if (reg.test(singleValueOfDefaultValue)) {\r\n      if (singleValueOfDefaultValue.trim() !== '') {\r\n        arrayDefaultValue = arrayDefaultValue ? [...arrayDefaultValue] : [];\r\n        arrayDefaultValue.push(singleValueOfDefaultValue);\r\n        setArrayDefaultValue(arrayDefaultValue);\r\n        setSingleValueOfDefaultValue('');\r\n        console.log(arrayDefaultValue);\r\n      }\r\n    } else {\r\n      setIsDefaultValueError(true);\r\n      setDefaultValueErrorMsg('Default value is invalid.');\r\n    }\r\n  };\r\n\r\n  const handleDeleteDefaultValue = (indexToRemove) => {\r\n    arrayDefaultValue = arrayDefaultValue.filter(\r\n      (_, index) => index !== indexToRemove\r\n    );\r\n    setArrayDefaultValue(arrayDefaultValue);\r\n    // setArrayDefaultValue(updatedDefaultValueChips);\r\n    // arrayDefaultValue = updatedDefultValueChips\r\n    // v1.defaultValue = arrayDefaultValue\r\n  };\r\n\r\n  const searchData = (e) => {\r\n    setSearch(e.target.value);\r\n    search = e.target.value;\r\n    getdata(page, limit);\r\n  };\r\n\r\n  const handlePageChange = (event: any, newPage: number): void => {\r\n    setPage(newPage);\r\n    getdata(newPage * limit, limit);\r\n  };\r\n\r\n  const handleLimitChange = (event: ChangeEvent<HTMLInputElement>): void => {\r\n    setLimit(parseInt(event.target.value));\r\n    setPage(0);\r\n    getdata(0, parseInt(event.target.value));\r\n  };\r\n\r\n  const handleClickOpenAdd = async () => {\r\n    setV1(initialState);\r\n    setIsOpen(true);\r\n    setIsNameError(false);\r\n    setNameErrorMsg('');\r\n    setIsDisplayNameError(false);\r\n    setDisplayNameErrorMsg('');\r\n    setIsMappedFieldNameError(false);\r\n    setMappedFieldNameErrorMsg('');\r\n    setIsDescriptionError(false);\r\n    setDescriptionErrorMsg('');\r\n    setIsValueTypeError(false);\r\n    setValueTypeErrorMsg('');\r\n    setIsDefaultValueError(false);\r\n    setDefaultValueErrorMsg('');\r\n    setIsValueListError(false);\r\n    setValueListErrorMsg('');\r\n    setIsTextLengthError(false);\r\n    setTextLengthErrorMsg('');\r\n    setArrayValueList([]);\r\n    setSingleValueOfValueList('');\r\n    setArrayDefaultValue([]);\r\n    setSingleValueOfDefaultValue('');\r\n  };\r\n\r\n  const handleSwitch = async (id: number, status: number) => {\r\n    let obj = {\r\n      id: id,\r\n      status: status\r\n    };\r\n    setV1(obj);\r\n    setIsCheck(true);\r\n  };\r\n\r\n  const handleSwitchCheck = async () => {\r\n    const token = localStorage.getItem('SessionToken');\r\n    const refreshToken = localStorage.getItem('RefreshToken');\r\n    let obj = {\r\n      id: v1.id\r\n    };\r\n    const res = await APIservice.httpPost(\r\n      '/api/admin/manageCustomFields/toggleActiveCustomField',\r\n      obj,\r\n      token,\r\n      refreshToken\r\n    );\r\n    setIsCheck(false);\r\n    getdata(page * limit, limit);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsCheck(false);\r\n    setIsDel(false);\r\n  };\r\n\r\n  const handleOpenDeleteDialog = (arr: any, arr1: any) => {\r\n    let obj = {\r\n      id: arr,\r\n      packageDurationId: arr1\r\n    };\r\n    setV1(obj);\r\n    setIsDel(true);\r\n  };\r\n\r\n  const handleClickOpenEdit = (obj: any) => {\r\n    debugger;\r\n    // if (obj.imageUrl) setImage(process.env.REACT_APP_BASEURL + '/'+ + obj.imageUrl);\r\n    // else setImage('');\r\n    if (obj.valueList && typeof obj.valueList === 'string') {\r\n      const valueArray: string[] = obj.valueList.includes(';')\r\n        ? obj.valueList.split(';')\r\n        : [obj.valueList];\r\n      obj.valueList = valueArray;\r\n    }\r\n    setArrayValueList(obj.valueList);\r\n\r\n    if (\r\n      obj.defaultValue &&\r\n      typeof obj.defaultValue === 'string' &&\r\n      obj.valueTypeId === 10\r\n    ) {\r\n      const defaultValueArray: string[] = obj.defaultValue.includes(';')\r\n        ? obj.defaultValue.split(';')\r\n        : [obj.defaultValue];\r\n      obj.defaultValue = defaultValueArray;\r\n    }\r\n    setArrayDefaultValue(obj.defaultValue);\r\n\r\n    setV1(obj);\r\n    console.log(v1);\r\n    setIsOpen(true);\r\n    setIsNameError(false);\r\n    setNameErrorMsg('');\r\n    setIsDisplayNameError(false);\r\n    setDisplayNameErrorMsg('');\r\n    setIsMappedFieldNameError(false);\r\n    setMappedFieldNameErrorMsg('');\r\n    setIsDescriptionError(false);\r\n    setDescriptionErrorMsg('');\r\n    setIsValueTypeError(false);\r\n    setValueTypeErrorMsg('');\r\n    setIsDefaultValueError(false);\r\n    setDefaultValueErrorMsg('');\r\n    setIsValueListError(false);\r\n    setValueListErrorMsg('');\r\n  };\r\n\r\n  const handleCloseCustomNotificationDialog = () => {\r\n    setIsOpen(false);\r\n  };\r\n\r\n  const handleInputChange = (arr: any) => {\r\n    const { name, value } = arr.target;\r\n    setV1({ ...v1, [name]: value });\r\n    setIsOpen(true);\r\n  };\r\n\r\n  const handleFieldNameChange = (arr: any) => {\r\n    const { name, value } = arr.target;\r\n    let mappedFieldName = value.replace(/\\s+/g, '_');\r\n    mappedFieldName =\r\n      mappedFieldName.charAt(0).toLowerCase() + mappedFieldName.slice(1);\r\n    setV1({\r\n      ...v1,\r\n      [name]: value,\r\n      mappedFieldName: mappedFieldName\r\n    });\r\n    setIsOpen(true);\r\n  };\r\n\r\n  const handleMappedFieldNameChange = (arr: any) => {\r\n    const { name, value } = arr.target;\r\n    let mappedFieldName = value.replace(/\\s+/g, '_');\r\n    mappedFieldName =\r\n      mappedFieldName.charAt(0).toLowerCase() + mappedFieldName.slice(1);\r\n    setV1({ ...v1, [name]: mappedFieldName });\r\n    setIsOpen(true);\r\n  };\r\n\r\n  const handleValueListInputChange = (arr: any) => {\r\n    const { name, value } = arr.target;\r\n    setSingleValueOfValueList(value);\r\n    setIsOpen(true);\r\n  };\r\n  const handleDefaultValueInputChange = (arr: any) => {\r\n    const { name, value } = arr.target;\r\n    setSingleValueOfDefaultValue(value);\r\n    setIsOpen(true);\r\n  };\r\n\r\n  const validateName = (arr) => {\r\n    const { name, value } = arr.target;\r\n    if (value) {\r\n      setIsNameError(false);\r\n      setNameErrorMsg('');\r\n    } else {\r\n      setIsNameError(true);\r\n      setNameErrorMsg('Custom Field Name is required');\r\n    }\r\n  };\r\n  const validateDisplayName = (arr) => {\r\n    const { name, value } = arr.target;\r\n    if (value) {\r\n      setIsDisplayNameError(false);\r\n      setDisplayNameErrorMsg('');\r\n    } else {\r\n      setIsDisplayNameError(true);\r\n      setDisplayNameErrorMsg('Custom field is required');\r\n    }\r\n  };\r\n\r\n  const mediumRegex = new RegExp('^[a-zA-Z0-9_]*$');\r\n  const validateMappedFieldName = (arr) => {\r\n    const { name, value } = arr.target;\r\n\r\n    if (value) {\r\n      if (mediumRegex.test(arr.target.value)) {\r\n        setIsMappedFieldNameError(false);\r\n        setMappedFieldNameErrorMsg('');\r\n      } else {\r\n        setIsMappedFieldNameError(true);\r\n        setMappedFieldNameErrorMsg('Special characters are not allowed');\r\n      }\r\n    } else {\r\n      setIsMappedFieldNameError(true);\r\n      setMappedFieldNameErrorMsg('Mapped field name is required');\r\n    }\r\n  };\r\n\r\n  const validateDescription = (arr) => {\r\n    let value = arr;\r\n    if (value) {\r\n      setIsDescriptionError(false);\r\n      setDescriptionErrorMsg('');\r\n    } else {\r\n      setIsDescriptionError(true);\r\n      setDescriptionErrorMsg('Description is required');\r\n    }\r\n  };\r\n\r\n  const validateValueType = (arr) => {\r\n    let value = arr;\r\n    if (value) {\r\n      setIsValueTypeError(false);\r\n      setValueTypeErrorMsg('');\r\n    } else {\r\n      setIsValueTypeError(true);\r\n      setValueTypeErrorMsg('Value type is required');\r\n    }\r\n  };\r\n\r\n  const validateTextLength = (arr) => {\r\n    let value = arr;\r\n    if (value < '65535' && value > '0') {\r\n      setIsTextLengthError(false);\r\n      setTextLengthErrorMsg('');\r\n    } else {\r\n      setIsTextLengthError(true);\r\n      setTextLengthErrorMsg('Length must be between 0 - 65535');\r\n    }\r\n  };\r\n\r\n  const validateSection = (arr) => {\r\n    let value = arr;\r\n    if (value) {\r\n      setIsSectionError(false);\r\n      setSectionErrorMsg('');\r\n    } else {\r\n      setIsSectionError(true);\r\n      setSectionErrorMsg('Section Value is Required');\r\n    }\r\n  };\r\n\r\n  const validateDefaultValue = (arr) => {\r\n    let value = arr;\r\n    if (value) {\r\n      setIsDefaultValueError(false);\r\n      setDefaultValueErrorMsg('');\r\n    } else {\r\n      setIsDefaultValueError(true);\r\n      setDefaultValueErrorMsg('Default Value is required');\r\n    }\r\n  };\r\n\r\n  const validateDefaultValueList = (arr) => {\r\n    // let value = arr;\r\n    const { name, value } = arr.target;\r\n    if (value) {\r\n      setIsDefaultValueError(false);\r\n      setDefaultValueErrorMsg('');\r\n    } else {\r\n      setIsDefaultValueError(true);\r\n      setDefaultValueErrorMsg('Value List is required');\r\n    }\r\n  };\r\n\r\n  const validateValueList = (arr) => {\r\n    let value = arr;\r\n    if (value) {\r\n      setIsValueListError(false);\r\n      setValueListErrorMsg('');\r\n    } else {\r\n      setIsValueListError(true);\r\n      setValueListErrorMsg('Value List is required');\r\n    }\r\n  };\r\n\r\n  const handleSwitchIsRequired = (e: any) => {\r\n    const { name, checked } = e.target;\r\n\r\n    setV1({\r\n      ...v1,\r\n      isRequired: checked //value === \"on\" ? true : false\r\n    });\r\n  };\r\n\r\n  const handleSwitchAllowInSearch = (e: any) => {\r\n    const { name, checked } = e.target;\r\n\r\n    setV1({\r\n      ...v1,\r\n      allowInSearch: checked //value === \"on\" ? true : false\r\n    });\r\n  };\r\n\r\n  const handleSwitchAllowInFilter = (e: any) => {\r\n    const { name, checked } = e.target;\r\n\r\n    setV1({\r\n      ...v1,\r\n      allowInFilter: checked //value === \"on\" ? true : false\r\n    });\r\n  };\r\n\r\n  const handleSwitchAllowIncompleteProfile = (e: any) => {\r\n    const { name, checked } = e.target;\r\n\r\n    setV1({\r\n      ...v1,\r\n      allowIncompleteProfile: checked //value === \"on\" ? true : false\r\n    });\r\n  };\r\n\r\n  const handleSwitchAllowInPreferences = (e: any) => {\r\n    const { name, checked } = e.target;\r\n\r\n    setV1({\r\n      ...v1,\r\n      allowInPreferences: checked //value === \"on\" ? true : false\r\n    });\r\n  };\r\n\r\n  const validateForm = (e: any) => {\r\n    e?.preventDefault();\r\n    var flag = true;\r\n    if (!v1.name) {\r\n      setIsNameError(true);\r\n      setNameErrorMsg('Custom field name is required');\r\n      flag = false;\r\n    } else {\r\n      setIsNameError(false);\r\n      setNameErrorMsg('');\r\n    }\r\n    if (!v1.displayName) {\r\n      setIsDisplayNameError(true);\r\n      setDisplayNameErrorMsg('Custom field display Name is required');\r\n      flag = false;\r\n    } else {\r\n      setIsDisplayNameError(false);\r\n      setDisplayNameErrorMsg('');\r\n    }\r\n    if (!v1.mappedFieldName) {\r\n      setIsMappedFieldNameError(true);\r\n      setMappedFieldNameErrorMsg('Mapped field name is required');\r\n      flag = false;\r\n    } else {\r\n      setIsMappedFieldNameError(false);\r\n      setMappedFieldNameErrorMsg('');\r\n    }\r\n    // if (!v1.description) {\r\n    //     setIsDescriptionError(true);\r\n    //     setDescriptionErrorMsg('Custom Description Title is required');\r\n    //     flag = false;\r\n    // } else {\r\n    //     setIsDescriptionError(false);\r\n    //     setDescriptionErrorMsg('');\r\n    //     flag = true;\r\n    // }\r\n    if (!v1.valueTypeId) {\r\n      setIsValueTypeError(true);\r\n      setValueTypeErrorMsg('Custom value type is required');\r\n      flag = false;\r\n    } else {\r\n      setIsValueTypeError(false);\r\n      setValueTypeErrorMsg('');\r\n      if (v1.valueTypeId == 1) {\r\n        if (!v1.textLength) {\r\n          setIsTextLengthError(true);\r\n          setTextLengthErrorMsg('Text length is required');\r\n          flag = false;\r\n        } else {\r\n          setIsTextLengthError(false);\r\n          setTextLengthErrorMsg('');\r\n        }\r\n      } else if (v1.valueTypeId == 3 || v1.valueTypeId == 10) {\r\n        if (v1.valueList && v1.valueList.length == 0) {\r\n          setIsValueListError(true);\r\n          setValueListErrorMsg('Value list is required');\r\n          flag = false;\r\n        } else {\r\n          setIsValueListError(false);\r\n          setValueListErrorMsg('');\r\n        }\r\n      }\r\n      // else {\r\n      //     flag = true;\r\n      // }\r\n      // flag = true;\r\n    }\r\n    // if (!v1.defaultValue) {\r\n    //     setIsDefaultValueError(true);\r\n    //     setDefaultValueErrorMsg('Custom value type is required');\r\n    //     flag = false;\r\n    // } else {\r\n    //     setIsDefaultValueError(false);\r\n    //     setDefaultValueErrorMsg('');\r\n    //     flag = true;\r\n    // }\r\n\r\n    if (v1.allowIncompleteProfile == true) {\r\n      if (!v1.completeprofilesectioname) {\r\n        setIsSectionError(true);\r\n        setSectionErrorMsg(' Section is required');\r\n        flag = false;\r\n      } else {\r\n        setIsSectionError(false);\r\n        setSectionErrorMsg('');\r\n      }\r\n    }\r\n    // if (!v1.valueList) {\r\n    //     setIsValueListError(true);\r\n    //     setValueListErrorMsg('Custom value type is required');\r\n    //     flag = false;\r\n    // } else {\r\n    //     setIsValueListError(false);\r\n    //     setValueListErrorMsg('');\r\n    //     flag = true;\r\n    // }\r\n    return flag;\r\n  };\r\n\r\n  const handleDescriptionChange = (dateVal: string) => {\r\n    setV1({ ...v1, description: dateVal });\r\n  };\r\n\r\n  const onFileChange = (e: any) => {\r\n    const file = e.target.files[0];\r\n    const name = e.target.name;\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = () => {\r\n      setImage(reader.result.toString());\r\n      setV1({\r\n        ...v1,\r\n        [name]: reader.result.toString()\r\n      });\r\n    };\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  const onImageChange = (e: any) => {\r\n    const { name, value } = e.target;\r\n    setV1({\r\n      ...v1,\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  const handleIsDeleteDialog = async () => {\r\n    const token = localStorage.getItem('SessionToken');\r\n    const refreshToken = localStorage.getItem('RefreshToken');\r\n    let obj = {\r\n      id: v1.id,\r\n      mappedFieldName: v1.mappedFieldName\r\n    };\r\n    const res = await APIservice.httpPost(\r\n      '/api/admin/manageCustomFields/removeCustomfields',\r\n      obj,\r\n      token,\r\n      refreshToken\r\n    );\r\n    if (res && res.status === 200) {\r\n      toast.error(res.recordList, {\r\n        autoClose: 6000,\r\n        hideProgressBar: true,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: 'colored'\r\n      });\r\n    }\r\n    setIsDel(false);\r\n    getdata(page * limit, limit);\r\n  };\r\n\r\n  const saveCustomField = async (e: any, isSend: boolean) => {\r\n    if (\r\n      arrayDefaultValue &&\r\n      Array.isArray(arrayDefaultValue) &&\r\n      v1.valueTypeId == 10\r\n    ) {\r\n      arrayDefaultValue = arrayDefaultValue.join(';');\r\n      v1.defaultValue = arrayDefaultValue;\r\n    }\r\n    v1.defaultValue = v1.defaultValue ? v1.defaultValue : null;\r\n    v1.valueList = arrayValueList ? arrayValueList : null;\r\n    var flag = validateForm(e);\r\n    if (flag) {\r\n      try {\r\n        // if (arrayDefaultValue && Array.isArray(arrayDefaultValue) && v1.valueTypeId == 10) {\r\n        //     arrayDefaultValue = arrayDefaultValue.join(';');\r\n        //     v1.defaultValue = arrayDefaultValue;\r\n        // }\r\n        // v1.defaultValue = v1.defaultValue ? v1.defaultValue : null;\r\n        // v1.valueList = arrayValueList ? arrayValueList : null\r\n        if (v1.id) {\r\n          const token = localStorage.getItem('SessionToken');\r\n          const refreshToken = localStorage.getItem('RefreshToken');\r\n          let val = v1;\r\n          v1.isRequired = v1.isRequired == 1 ? true : false;\r\n          v1.allowInSearch = v1.allowInSearch == 1 ? true : false;\r\n          v1.allowInFilter = v1.allowInFilter == 1 ? true : false;\r\n          v1.allowIncompleteProfile =\r\n            v1.allowIncompleteProfile == 1 ? true : false;\r\n          v1.allowInPreferences = v1.allowInPreferences == 1 ? true : false;\r\n          v1.isActive = v1.isActive == 1 ? true : false;\r\n          v1.isDelete = v1.isDelete == 1 ? true : false;\r\n          const res = await APIservice.httpPost(\r\n            '/api/admin/manageCustomFields/insertUpdateCustomField',\r\n            val,\r\n            token,\r\n            refreshToken\r\n          );\r\n          if (res && res.status == 200) {\r\n            setIsOpen(false);\r\n            getdata(page * limit, limit);\r\n          } else if (res.status == 401) {\r\n            navigate('/admin');\r\n            localStorage.clear();\r\n          } else if (res.status == 500) {\r\n            setIsOpen(false);\r\n            toast.error(res.message, {\r\n              autoClose: 6000,\r\n              hideProgressBar: true,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n              theme: 'colored',\r\n              position: toast.POSITION.TOP_RIGHT\r\n            });\r\n          } else if (res.status == 300) {\r\n            setIsOpen(false);\r\n            toast.error(res.message, {\r\n              autoClose: 6000,\r\n              hideProgressBar: true,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n              theme: 'colored',\r\n              position: toast.POSITION.TOP_RIGHT\r\n            });\r\n          } else if (res.status == 203) {\r\n            setIsMappedFieldNameError(true);\r\n            setMappedFieldNameErrorMsg('Field already exists!');\r\n          } else if (res.status == 404) {\r\n            setIsOpen(false);\r\n            toast.error(res.message, {\r\n              autoClose: 6000,\r\n              hideProgressBar: true,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n              theme: 'colored',\r\n              position: toast.POSITION.TOP_RIGHT\r\n            });\r\n          } else if (res.status == 400) {\r\n            setIsOpen(false);\r\n            toast.error(res.message, {\r\n              autoClose: 6000,\r\n              hideProgressBar: true,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n              theme: 'colored',\r\n              position: toast.POSITION.TOP_RIGHT\r\n            });\r\n          }\r\n        } else {\r\n          const token = localStorage.getItem('SessionToken');\r\n          const refreshToken = localStorage.getItem('RefreshToken');\r\n          // v1.valueList = arrayValueList\r\n          let val = v1;\r\n          // val = {\r\n          //     startIndex: startIndex,\r\n          //     fetchRecord: fetchRecord,\r\n          //     firstName: searchInput ? searchInput : ''\r\n          //   };\r\n\r\n          const res = await APIservice.httpPost(\r\n            '/api/admin/manageCustomFields/insertUpdateCustomField',\r\n            val,\r\n            token,\r\n            refreshToken\r\n          );\r\n          if (res && res.status == 200) {\r\n            setPage(0);\r\n            setIsOpen(false);\r\n            getdata(0, limit);\r\n          } else if (res.status == 401) {\r\n            navigate('/admin');\r\n            localStorage.clear();\r\n          } else if (res.status == 203) {\r\n            setIsMappedFieldNameError(true);\r\n            setMappedFieldNameErrorMsg('Field already exists!');\r\n          } else if (res.status == 500) {\r\n            setIsOpen(false);\r\n            toast.error(res.message, {\r\n              autoClose: 6000,\r\n              hideProgressBar: true,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n              theme: 'colored',\r\n              position: toast.POSITION.TOP_RIGHT\r\n            });\r\n          } else if (res.status == 300) {\r\n            setIsOpen(false);\r\n            toast.error(res.message, {\r\n              autoClose: 6000,\r\n              hideProgressBar: true,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n              theme: 'colored',\r\n              position: toast.POSITION.TOP_RIGHT\r\n            });\r\n          } else if (res.status == 404) {\r\n            setIsOpen(false);\r\n            toast.error(res.message, {\r\n              autoClose: 6000,\r\n              hideProgressBar: true,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n              theme: 'colored',\r\n              position: toast.POSITION.TOP_RIGHT\r\n            });\r\n          } else if (res.status == 400) {\r\n            setIsOpen(false);\r\n            toast.error(res.message, {\r\n              autoClose: 6000,\r\n              hideProgressBar: true,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n              theme: 'colored',\r\n              position: toast.POSITION.TOP_RIGHT\r\n            });\r\n          }\r\n        }\r\n        setIsLoading(false);\r\n      } catch (error: any) {\r\n        setIsLoading(false);\r\n        setIsOpen(false);\r\n        toast.error(error, {\r\n          autoClose: 6000,\r\n          hideProgressBar: true,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n          theme: 'colored',\r\n          position: toast.POSITION.TOP_RIGHT\r\n        });\r\n      }\r\n    }\r\n\r\n    setV1({\r\n      ...v1,\r\n      valueList: arrayValueList\r\n    });\r\n    console.log(v1);\r\n  };\r\n\r\n  const handleClickVisible = (element: any) => {\r\n    let id = element?.id;\r\n    navigate(`/admin/manage-custom-fields/view/${id}`);\r\n  };\r\n\r\n  // const truncateDescription = (description) => {\r\n  //     debugger\r\n  //     if (!description) return '-';\r\n  //     const words = description.split(' ');\r\n  //     if (words.length <= 4) return description;\r\n  //     return words.slice(0, 4).join(' ') + '...';\r\n  //   };\r\n\r\n  return (\r\n    <div>\r\n      <SnackbarComponent />\r\n      <ToastContainer\r\n        style={{ top: '8.5%', right: '0%' }}\r\n        // position=\"top-right\"\r\n        autoClose={6000}\r\n        hideProgressBar={true}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n      />\r\n      <Helmet>\r\n        <title>Manage Custom Field</title>\r\n      </Helmet>\r\n      <PageTitleWrapper>\r\n        <Box p={1}>\r\n          <Grid container justifyContent=\"space-between\" alignItems=\"center\">\r\n            <Grid item>\r\n              <Stack alignItems=\"left\" justifyContent=\"space-between\">\r\n                <Breadcrumbs aria-label=\"breadcrumb\">\r\n                  <Link\r\n                    to=\"/admin/dashboard\"\r\n                    style={{ display: 'flex', color: 'black' }}\r\n                  >\r\n                    <HomeIcon />\r\n                  </Link>\r\n                  <Typography\r\n                    variant=\"subtitle2\"\r\n                    color=\"inherit\"\r\n                    fontWeight=\"bold\"\r\n                  >\r\n                    Manage Custom Fields\r\n                  </Typography>\r\n                </Breadcrumbs>\r\n              </Stack>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid container spacing={1.5}>\r\n                {isWritePermission ? (\r\n                  <>\r\n                    <Grid item>\r\n                      <Button\r\n                        className=\"buttonLarge\"\r\n                        sx={{\r\n                          mt: {\r\n                            xs: 0,\r\n                            md: 0,\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            padding: '8.3px',\r\n                            top: '3px'\r\n                          }\r\n                        }}\r\n                        variant=\"contained\"\r\n                        onClick={handleClickOpenAdd}\r\n                        size=\"small\"\r\n                      >\r\n                        <AddTwoToneIcon fontSize=\"small\" />\r\n                        Create Custom Field\r\n                      </Button>\r\n                      <Button\r\n                        className=\"button\"\r\n                        sx={{\r\n                          mt: {\r\n                            xs: 0,\r\n                            md: 0,\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            padding: '8.3px',\r\n                            top: '3px'\r\n                          }\r\n                        }}\r\n                        variant=\"contained\"\r\n                        onClick={handleClickOpenAdd}\r\n                        size=\"small\"\r\n                      >\r\n                        <AddTwoToneIcon fontSize=\"small\" />\r\n                      </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <FormControl\r\n                        sx={{ mt: { xs: 0.3, md: 0.3, lg: 0.3, sm: 0.3 } }}\r\n                      >\r\n                        <TextField\r\n                          // size=\"small\"\r\n                          id=\"outlined-basic\"\r\n                          label=\"Search\"\r\n                          variant=\"outlined\"\r\n                          name=\"searchString\"\r\n                          value={search}\r\n                          onChange={(e) => searchData(e)}\r\n                          size=\"small\"\r\n                          InputProps={{\r\n                            startAdornment: (\r\n                              <InputAdornment position=\"start\">\r\n                                <SearchIcon />\r\n                              </InputAdornment>\r\n                            )\r\n                          }}\r\n                        />\r\n                      </FormControl>\r\n                    </Grid>\r\n                  </>\r\n                ) : (\r\n                  <></>\r\n                )}\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </PageTitleWrapper>\r\n      <Container maxWidth=\"lg\">\r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"stretch\"\r\n          spacing={3}\r\n        >\r\n          <Grid item xs={12}>\r\n            <>\r\n              <Card className=\"religioncard\">\r\n                <div>\r\n                  {isloading ? (\r\n                    <Loader1 title=\"Loading...\" />\r\n                  ) : (\r\n                    <>\r\n                      <Divider />\r\n                      {customFields && customFields.length > 0 ? (\r\n                        <>\r\n                          <TableContainer className=\"religiontableContainer\">\r\n                            <Table stickyHeader>\r\n                              <TableHead>\r\n                                <TableRow>\r\n                                  <TableCell colSpan={3}>\r\n                                    <Typography\r\n                                      noWrap\r\n                                      style={{\r\n                                        fontSize: '13px',\r\n                                        fontWeight: 'bold',\r\n                                        marginBottom: 'none'\r\n                                      }}\r\n                                    >\r\n                                      Sr. No\r\n                                    </Typography>\r\n                                  </TableCell>\r\n                                  <TableCell colSpan={3}>\r\n                                    <Typography\r\n                                      noWrap\r\n                                      style={{\r\n                                        fontSize: '13px',\r\n                                        fontWeight: 'bold',\r\n                                        marginBottom: 'none'\r\n                                      }}\r\n                                    >\r\n                                      Name\r\n                                    </Typography>\r\n                                  </TableCell>\r\n                                  <TableCell colSpan={3}>\r\n                                    <Typography\r\n                                      noWrap\r\n                                      style={{\r\n                                        fontSize: '13px',\r\n                                        fontWeight: 'bold',\r\n                                        marginBottom: 'none'\r\n                                      }}\r\n                                    >\r\n                                      DisplayName\r\n                                    </Typography>\r\n                                  </TableCell>\r\n                                  <TableCell colSpan={3}>\r\n                                    <Typography\r\n                                      noWrap\r\n                                      style={{\r\n                                        fontSize: '13px',\r\n                                        fontWeight: 'bold',\r\n                                        marginBottom: 'none'\r\n                                      }}\r\n                                    >\r\n                                      Mapped Field Name\r\n                                    </Typography>\r\n                                  </TableCell>\r\n                                  <TableCell colSpan={3}>\r\n                                    <Typography\r\n                                      noWrap\r\n                                      style={{\r\n                                        fontSize: '13px',\r\n                                        fontWeight: 'bold',\r\n                                        marginBottom: 'none'\r\n                                      }}\r\n                                      className=\"description\"\r\n                                    >\r\n                                      Description\r\n                                    </Typography>\r\n                                  </TableCell>\r\n                                  {/* <TableCell colSpan={3}>\r\n                                                                        <Typography\r\n                                                                            noWrap\r\n                                                                            style={{\r\n                                                                                fontSize: '13px',\r\n                                                                                fontWeight: 'bold',\r\n                                                                                marginBottom: 'none'\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            Value Type\r\n                                                                        </Typography>\r\n                                                                    </TableCell>\r\n                                                                    <TableCell colSpan={3}>\r\n                                                                        <Typography\r\n                                                                            noWrap\r\n                                                                            style={{\r\n                                                                                fontSize: '13px',\r\n                                                                                fontWeight: 'bold',\r\n                                                                                marginBottom: 'none'\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            Default Value\r\n                                                                        </Typography>\r\n                                                                    </TableCell>\r\n                                                                    <TableCell colSpan={3}>\r\n                                                                        <Typography\r\n                                                                            noWrap\r\n                                                                            style={{\r\n                                                                                fontSize: '13px',\r\n                                                                                fontWeight: 'bold',\r\n                                                                                marginBottom: 'none'\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            Value List\r\n                                                                        </Typography>\r\n                                                                    </TableCell>\r\n                                                                    <TableCell colSpan={3}>\r\n                                                                        <Typography\r\n                                                                            noWrap\r\n                                                                            style={{\r\n                                                                                fontSize: '13px',\r\n                                                                                fontWeight: 'bold',\r\n                                                                                marginBottom: 'none'\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            IsRequired\r\n                                                                        </Typography>\r\n                                                                    </TableCell>\r\n                                                                    <TableCell colSpan={3}>\r\n                                                                        <Typography\r\n                                                                            noWrap\r\n                                                                            style={{\r\n                                                                                fontSize: '13px',\r\n                                                                                fontWeight: 'bold',\r\n                                                                                marginBottom: 'none'\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            Allow In Search\r\n                                                                        </Typography>\r\n                                                                    </TableCell>\r\n                                                                    <TableCell colSpan={3}>\r\n                                                                        <Typography\r\n                                                                            noWrap\r\n                                                                            style={{\r\n                                                                                fontSize: '13px',\r\n                                                                                fontWeight: 'bold',\r\n                                                                                marginBottom: 'none'\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            Allow In Filter\r\n                                                                        </Typography>\r\n                                                                    </TableCell>\r\n                                                                    <TableCell colSpan={3}>\r\n                                                                        <Typography\r\n                                                                            noWrap\r\n                                                                            style={{\r\n                                                                                fontSize: '13px',\r\n                                                                                fontWeight: 'bold',\r\n                                                                                marginBottom: 'none'\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            Allow In CompleteProfile\r\n                                                                        </Typography>\r\n                                                                    </TableCell>\r\n                                                                    <TableCell colSpan={3}>\r\n                                                                        <Typography\r\n                                                                            noWrap\r\n                                                                            style={{\r\n                                                                                fontSize: '13px',\r\n                                                                                fontWeight: 'bold',\r\n                                                                                marginBottom: 'none'\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            Allow In Preference\r\n                                                                        </Typography>\r\n                                                                    </TableCell> */}\r\n\r\n                                  <TableCell align=\"right\" colSpan={3}>\r\n                                    <Typography\r\n                                      noWrap\r\n                                      style={{\r\n                                        fontSize: '13px',\r\n                                        fontWeight: 'bold',\r\n                                        marginBottom: 'none'\r\n                                      }}\r\n                                    >\r\n                                      Actions\r\n                                    </Typography>\r\n                                  </TableCell>\r\n                                </TableRow>\r\n                              </TableHead>\r\n                              <TableBody>\r\n                                {customFields.map((arr: any, index: number) => {\r\n                                  return (\r\n                                    <TableRow hover key={arr.id}>\r\n                                      <TableCell colSpan={3}>\r\n                                        <Typography\r\n                                          variant=\"body1\"\r\n                                          fontWeight=\"bold\"\r\n                                          color=\"text.primary\"\r\n                                          gutterBottom\r\n                                          noWrap\r\n                                        >\r\n                                          {page * limit + index + 1}\r\n                                        </Typography>\r\n                                      </TableCell>\r\n                                      <TableCell colSpan={3}>\r\n                                        <Typography\r\n                                          variant=\"body1\"\r\n                                          fontWeight=\"bold\"\r\n                                          color=\"text.primary\"\r\n                                          gutterBottom\r\n                                          noWrap\r\n                                          sx={{ textTransform: 'capitalize' }}\r\n                                        >\r\n                                          {arr.name}\r\n                                        </Typography>\r\n                                      </TableCell>\r\n                                      <TableCell colSpan={3}>\r\n                                        <Typography\r\n                                          variant=\"body1\"\r\n                                          fontWeight=\"bold\"\r\n                                          color=\"text.primary\"\r\n                                          gutterBottom\r\n                                          noWrap\r\n                                          sx={{ textTransform: 'capitalize' }}\r\n                                        >\r\n                                          {arr.displayName}\r\n                                        </Typography>\r\n                                      </TableCell>\r\n                                      <TableCell colSpan={3}>\r\n                                        <Typography\r\n                                          variant=\"body1\"\r\n                                          fontWeight=\"bold\"\r\n                                          color=\"text.primary\"\r\n                                          gutterBottom\r\n                                          noWrap\r\n                                          sx={{ textTransform: 'capitalize' }}\r\n                                        >\r\n                                          {arr.mappedFieldName}\r\n                                        </Typography>\r\n                                      </TableCell>\r\n                                      <TableCell colSpan={3}>\r\n                                        <Typography\r\n                                          variant=\"body1\"\r\n                                          fontWeight=\"bold\"\r\n                                          color=\"text.primary\"\r\n                                          gutterBottom\r\n                                          noWrap\r\n                                          sx={{\r\n                                            textTransform: 'capitalize',\r\n                                            width: '250px'\r\n                                          }}\r\n                                        >\r\n                                          {arr.description\r\n                                            ? arr.description\r\n                                            : '-'}\r\n                                          {/* {truncateDescription(arr.description)} */}\r\n                                        </Typography>\r\n                                      </TableCell>\r\n                                      {/* <TableCell colSpan={3} >\r\n                                                                                <Typography\r\n                                                                                    variant=\"body1\"\r\n                                                                                    fontWeight=\"bold\"\r\n                                                                                    color=\"text.primary\"\r\n                                                                                    gutterBottom\r\n                                                                                    noWrap\r\n                                                                                    sx={{ textTransform: 'capitalize' }}\r\n                                                                                >\r\n                                                                                    {arr.valueTypeName}\r\n                                                                                </Typography>\r\n                                                                            </TableCell>\r\n                                                                            <TableCell colSpan={3} >\r\n                                                                                <Typography\r\n                                                                                    variant=\"body1\"\r\n                                                                                    fontWeight=\"bold\"\r\n                                                                                    color=\"text.primary\"\r\n                                                                                    gutterBottom\r\n                                                                                    noWrap\r\n                                                                                    sx={{ textTransform: 'capitalize' }}\r\n                                                                                >\r\n                                                                                    {arr.defaultValue ? arr.defaultValue : '-'}\r\n                                                                                </Typography>\r\n                                                                            </TableCell>\r\n                                                                            <TableCell colSpan={3} >\r\n                                                                                <Typography\r\n                                                                                    variant=\"body1\"\r\n                                                                                    fontWeight=\"bold\"\r\n                                                                                    color=\"text.primary\"\r\n                                                                                    gutterBottom\r\n                                                                                    noWrap\r\n                                                                                    sx={{ textTransform: 'capitalize' }}\r\n                                                                                >\r\n\r\n                                                                                    {arr.valueList ? arr.valueList.join(',') : '-'}\r\n                                                                                </Typography>\r\n                                                                            </TableCell>\r\n                                                                            <TableCell colSpan={3} >\r\n                                                                                <Typography\r\n                                                                                    variant=\"body1\"\r\n                                                                                    fontWeight=\"bold\"\r\n                                                                                    color=\"text.primary\"\r\n                                                                                    gutterBottom\r\n                                                                                    noWrap\r\n                                                                                    sx={{ textTransform: 'capitalize' }}\r\n                                                                                >\r\n                                                                                    {arr.isRequired ? 'yes' : 'no'}\r\n                                                                                </Typography>\r\n                                                                            </TableCell>\r\n                                                                            <TableCell colSpan={3} >\r\n                                                                                <Typography\r\n                                                                                    variant=\"body1\"\r\n                                                                                    fontWeight=\"bold\"\r\n                                                                                    color=\"text.primary\"\r\n                                                                                    gutterBottom\r\n                                                                                    noWrap\r\n                                                                                    sx={{ textTransform: 'capitalize' }}\r\n                                                                                >\r\n                                                                                    {arr.allowInSearch ? 'yes' : 'no'}\r\n                                                                                </Typography>\r\n                                                                            </TableCell>\r\n                                                                            <TableCell colSpan={3} >\r\n                                                                                <Typography\r\n                                                                                    variant=\"body1\"\r\n                                                                                    fontWeight=\"bold\"\r\n                                                                                    color=\"text.primary\"\r\n                                                                                    gutterBottom\r\n                                                                                    noWrap\r\n                                                                                    sx={{ textTransform: 'capitalize' }}\r\n                                                                                >\r\n                                                                                    {arr.allowInFilter ? 'yes' : 'no'}\r\n                                                                                </Typography>\r\n                                                                            </TableCell>\r\n                                                                            <TableCell colSpan={3} >\r\n                                                                                <Typography\r\n                                                                                    variant=\"body1\"\r\n                                                                                    fontWeight=\"bold\"\r\n                                                                                    color=\"text.primary\"\r\n                                                                                    gutterBottom\r\n                                                                                    noWrap\r\n                                                                                    sx={{ textTransform: 'capitalize' }}\r\n                                                                                >\r\n                                                                                    {(arr.allowIncompleteProfile == 1) ? 'yes' : 'no'}\r\n                                                                                </Typography>\r\n                                                                            </TableCell>\r\n                                                                            <TableCell colSpan={3} >\r\n                                                                                <Typography\r\n                                                                                    variant=\"body1\"\r\n                                                                                    fontWeight=\"bold\"\r\n                                                                                    color=\"text.primary\"\r\n                                                                                    gutterBottom\r\n                                                                                    noWrap\r\n                                                                                    sx={{ textTransform: 'capitalize' }}\r\n                                                                                >\r\n                                                                                    {arr.allowInPreferences ? 'yes' : 'no'}\r\n                                                                                </Typography>\r\n                                                                            </TableCell> */}\r\n\r\n                                      <TableCell\r\n                                        colSpan={3}\r\n                                        align=\"right\"\r\n                                        style={{ whiteSpace: 'nowrap' }}\r\n                                      >\r\n                                        <Tooltip title=\"View\" arrow>\r\n                                          <IconButton\r\n                                            sx={{\r\n                                              '&:hover': {\r\n                                                background:\r\n                                                  theme.colors.error.lighter\r\n                                              },\r\n                                              color: theme.palette.primary.main\r\n                                            }}\r\n                                            color=\"inherit\"\r\n                                            size=\"small\"\r\n                                            onClick={(e) => {\r\n                                              handleClickVisible(arr);\r\n                                            }}\r\n                                          >\r\n                                            <VisibilityIcon />\r\n                                          </IconButton>\r\n                                        </Tooltip>\r\n                                        {isEditPermission ? (\r\n                                          <>\r\n                                            <Tooltip\r\n                                              title={\r\n                                                arr.isActive === 0\r\n                                                  ? 'Inactive'\r\n                                                  : 'Active'\r\n                                              }\r\n                                              arrow\r\n                                            >\r\n                                              <Switch\r\n                                                // disabled={credentail?.isDemoAdmin}\r\n                                                checked={\r\n                                                  arr.isActive === 0\r\n                                                    ? false\r\n                                                    : true\r\n                                                }\r\n                                                onClick={(e) =>\r\n                                                  checkIsDemoUser(\r\n                                                    () =>\r\n                                                      handleSwitch(\r\n                                                        arr.id,\r\n                                                        arr.isActive\r\n                                                      ),\r\n                                                    showSnackBar\r\n                                                  )()\r\n                                                }\r\n                                                inputProps={{\r\n                                                  'aria-label': 'controlled'\r\n                                                }}\r\n                                              />\r\n                                            </Tooltip>\r\n                                            <Tooltip title=\"Edit\" arrow>\r\n                                              <IconButton\r\n                                                // disabled={credentail?.isDemoAdmin}\r\n                                                sx={{\r\n                                                  '&:hover': {\r\n                                                    background:\r\n                                                      theme.colors.primary\r\n                                                        .lighter\r\n                                                  },\r\n                                                  color:\r\n                                                    theme.palette.primary.main\r\n                                                }}\r\n                                                color=\"inherit\"\r\n                                                size=\"small\"\r\n                                                onClick={(e) =>\r\n                                                  handleClickOpenEdit(arr)\r\n                                                }\r\n                                                data-toggle=\"modal\"\r\n                                                data-target=\"#exampleModal\"\r\n                                              >\r\n                                                <EditTwoToneIcon fontSize=\"small\" />\r\n                                              </IconButton>\r\n                                            </Tooltip>\r\n                                          </>\r\n                                        ) : (\r\n                                          <></>\r\n                                        )}\r\n                                        {isDeletePermission ? (\r\n                                          <Tooltip title=\"Delete\" arrow>\r\n                                            <IconButton\r\n                                              // disabled={credentail?.isDemoAdmin}\r\n                                              sx={{\r\n                                                '&:hover': {\r\n                                                  background:\r\n                                                    theme.colors.error.lighter\r\n                                                },\r\n                                                color:\r\n                                                  theme.palette.primary.main\r\n                                              }}\r\n                                              color=\"inherit\"\r\n                                              size=\"small\"\r\n                                              onClick={(e) =>\r\n                                                handleOpenDeleteDialog(\r\n                                                  arr.id,\r\n                                                  arr.mappedFieldName\r\n                                                )\r\n                                              }\r\n                                            >\r\n                                              <DeleteIcon fontSize=\"small\" />\r\n                                            </IconButton>\r\n                                          </Tooltip>\r\n                                        ) : (\r\n                                          <></>\r\n                                        )}\r\n                                      </TableCell>\r\n                                    </TableRow>\r\n                                  );\r\n                                })}\r\n                              </TableBody>\r\n                            </Table>\r\n                          </TableContainer>\r\n                          <Box p={2}>\r\n                            <TablePagination\r\n                              component=\"div\"\r\n                              count={row}\r\n                              onPageChange={handlePageChange}\r\n                              onRowsPerPageChange={handleLimitChange}\r\n                              page={page}\r\n                              rowsPerPage={limit}\r\n                              rowsPerPageOptions={[10, 20, 30, 40]}\r\n                            />\r\n                          </Box>\r\n                        </>\r\n                      ) : (\r\n                        <Paper\r\n                          sx={{\r\n                            display: 'flex',\r\n                            justifyContent: 'center',\r\n                            alignItems: 'center',\r\n                            textAlign: 'center',\r\n                            verticalAlign: 'middle',\r\n                            boxShadow: 'none'\r\n                          }}\r\n                          className=\"religioncard\"\r\n                        >\r\n                          <Typography variant=\"h5\" paragraph>\r\n                            Data not Found\r\n                          </Typography>\r\n                        </Paper>\r\n                      )}\r\n                      <div>\r\n                        <Dialog\r\n                          open={ischeck}\r\n                          onClose={handleClose}\r\n                          fullWidth\r\n                          maxWidth=\"xs\"\r\n                        >\r\n                          <DialogTitle\r\n                            sx={{\r\n                              m: 0,\r\n                              p: 2,\r\n                              fontSize: '20px',\r\n                              fontWeight: 'bolder'\r\n                            }}\r\n                          >\r\n                            {v1.status === 0 ? 'Inactive' : 'Active'}\r\n                          </DialogTitle>\r\n                          <DialogContent>\r\n                            <DialogContentText\r\n                              style={{\r\n                                fontSize: '1rem',\r\n                                letterSpacing: '0.00938em'\r\n                              }}\r\n                            >\r\n                              {v1.status === 0\r\n                                ? 'Are you sure you want to Active?'\r\n                                : 'Are you sure you want to Inactive?'}\r\n                              <Typography\r\n                                sx={{\r\n                                  fontSize: '12px',\r\n                                  fontWeight: 'bold',\r\n                                  color: '#ff0000',\r\n                                  paddingTop: '12px'\r\n                                }}\r\n                              >\r\n                                {/* Note: Changes will reflect to app after restart it. */}\r\n                                Note: The changes will be visible in the app\r\n                                once restart it. Please restart the App to see\r\n                                the updates.\r\n                              </Typography>\r\n                            </DialogContentText>\r\n                          </DialogContent>\r\n                          <DialogActions>\r\n                            <Button\r\n                              onClick={handleClose}\r\n                              variant=\"outlined\"\r\n                              style={{ marginRight: '10px' }}\r\n                            >\r\n                              Cancel\r\n                            </Button>\r\n                            <Button\r\n                              disabled={credentail?.isDemoAdmin}\r\n                              onClick={handleSwitchCheck}\r\n                              variant=\"outlined\"\r\n                              style={{ marginRight: '10px' }}\r\n                            >\r\n                              Yes\r\n                            </Button>\r\n                          </DialogActions>\r\n                        </Dialog>\r\n                      </div>\r\n\r\n                      <div>\r\n                        <Dialog\r\n                          open={isOpen}\r\n                          onClose={handleClose}\r\n                          fullWidth\r\n                          maxWidth=\"md\"\r\n                        >\r\n                          <DialogTitle\r\n                            sx={{\r\n                              m: 0,\r\n                              p: 2,\r\n                              fontSize: '18px',\r\n                              fontWeight: 'bold'\r\n                            }}\r\n                          >\r\n                            {v1.id ? 'Edit Custom Field' : 'Add Custom Field'}\r\n                            <IconButton\r\n                              aria-label=\"close\"\r\n                              onClick={handleCloseCustomNotificationDialog}\r\n                              sx={{\r\n                                position: 'absolute',\r\n                                right: 13,\r\n                                top: 13,\r\n                                color: (theme) => theme.palette.grey[500]\r\n                              }}\r\n                            >\r\n                              <CloseIcon />\r\n                            </IconButton>\r\n                          </DialogTitle>\r\n\r\n                          <DialogContent dividers>\r\n                            <SnackbarComponent />\r\n                            <Row>\r\n                              <Col xs={12} md={6}>\r\n                                <TextField\r\n                                  autoFocus\r\n                                  margin=\"dense\"\r\n                                  id=\"name\"\r\n                                  label=\"Custom Field Name\"\r\n                                  type=\"text\"\r\n                                  fullWidth\r\n                                  variant=\"outlined\"\r\n                                  name=\"name\"\r\n                                  value={v1.name}\r\n                                  onChange={(arr) => {\r\n                                    handleFieldNameChange(arr);\r\n                                    validateName(arr);\r\n                                  }}\r\n                                  required={true}\r\n                                  disabled={v1.id ? true : false}\r\n                                />\r\n                                <FormHelperText\r\n                                  style={{ color: 'red', height: '22px' }}\r\n                                >\r\n                                  {isNameError && NameErrorMsg}\r\n                                </FormHelperText>\r\n                              </Col>\r\n                              <Col xs={12} md={6}>\r\n                                <TextField\r\n                                  autoFocus\r\n                                  margin=\"dense\"\r\n                                  id=\"displayName\"\r\n                                  label=\"Custom Field Disply Name\"\r\n                                  type=\"text\"\r\n                                  fullWidth\r\n                                  variant=\"outlined\"\r\n                                  name=\"displayName\"\r\n                                  value={v1.displayName}\r\n                                  onChange={(arr) => {\r\n                                    handleInputChange(arr);\r\n                                    validateDisplayName(arr);\r\n                                  }}\r\n                                  required={true}\r\n                                />\r\n                                <FormHelperText\r\n                                  style={{ color: 'red', height: '22px' }}\r\n                                >\r\n                                  {isDisplayNameError && DisplayNameErrorMsg}\r\n                                </FormHelperText>\r\n                              </Col>\r\n                            </Row>\r\n                            <TextField\r\n                              id=\"outlined-multiline-static\"\r\n                              label=\"Description\"\r\n                              multiline\r\n                              fullWidth\r\n                              rows={4}\r\n                              defaultValue=\"\"\r\n                              value={v1.description}\r\n                              name=\"description\"\r\n                              onChange={(arr) => {\r\n                                handleInputChange(arr);\r\n                                validateDescription(arr);\r\n                              }}\r\n                              required={true}\r\n                            />\r\n                            <FormHelperText\r\n                              style={{ color: 'red', height: '22px' }}\r\n                            >\r\n                              {isDescriptionError && DescriptionErrorMsg}\r\n                            </FormHelperText>\r\n                            <Row>\r\n                              <Col xs={12} md={6}>\r\n                                <TextField\r\n                                  autoFocus\r\n                                  margin=\"dense\"\r\n                                  id=\"mappedFieldName\"\r\n                                  label=\"Mapped Field Name\"\r\n                                  type=\"text\"\r\n                                  fullWidth\r\n                                  variant=\"outlined\"\r\n                                  name=\"mappedFieldName\"\r\n                                  value={v1.mappedFieldName}\r\n                                  onChange={(arr) => {\r\n                                    handleMappedFieldNameChange(arr);\r\n                                    validateMappedFieldName(arr);\r\n                                  }}\r\n                                  required={true}\r\n                                  disabled={v1.id ? true : false}\r\n                                />\r\n                                <FormHelperText\r\n                                  style={{ color: 'red', height: '22px' }}\r\n                                >\r\n                                  {isMappedFieldNameError &&\r\n                                    MappedFieldNameErrorMsg}\r\n                                </FormHelperText>\r\n                              </Col>\r\n                              <Col xs={12} md={6}>\r\n                                <FormControl\r\n                                  sx={{\r\n                                    width: {\r\n                                      lg: 265,\r\n                                      md: 265,\r\n                                      sm: 265,\r\n                                      xs: 200\r\n                                    }\r\n                                  }}\r\n                                >\r\n                                  <InputLabel id=\"demo-multiple-name-label\">\r\n                                    Value Type\r\n                                  </InputLabel>\r\n                                  <Select\r\n                                    labelId=\"demo-multiple-name-label\"\r\n                                    id=\"demo-multiple-name\"\r\n                                    multiple={false}\r\n                                    name=\"valueTypeId\"\r\n                                    value={v1.valueTypeId || []}\r\n                                    onChange={(arr) => {\r\n                                      handleInputChange(arr);\r\n                                      validateValueType(arr);\r\n                                    }}\r\n                                    label=\"Value Type\"\r\n                                    MenuProps={MenuProps}\r\n                                    required={true}\r\n                                    disabled={v1.id ? true : false}\r\n                                  >\r\n                                    {valueType.map((arr: any) => (\r\n                                      <MenuItem key={arr.id} value={arr.id}>\r\n                                        {arr.valueTypeName}\r\n                                      </MenuItem>\r\n                                    ))}\r\n                                  </Select>\r\n                                </FormControl>\r\n                                <FormHelperText\r\n                                  style={{ color: 'red', height: '22px' }}\r\n                                >\r\n                                  {isValueTypeError && ValueTypeErrorMsg}\r\n                                </FormHelperText>\r\n                              </Col>\r\n                            </Row>\r\n                            {/* </Grid> */}\r\n                            {/* <Grid item xs={12}> */}\r\n\r\n                            {/* <TextField\r\n                                                            id=\"outlined-multiline-static\"\r\n                                                            label=\"Description\"\r\n                                                            multiline\r\n                                                            fullWidth\r\n                                                            rows={4}\r\n                                                            defaultValue=\"\"\r\n                                                            value={v1.description}\r\n                                                            name=\"description\"\r\n                                                            onChange={(arr) => {\r\n                                                                handleInputChange(arr);\r\n                                                                validateDescription(arr);\r\n                                                            }}\r\n                                                            required={true}\r\n                                                        />\r\n                                                        <FormHelperText\r\n                                                            style={{ color: 'red', height: '22px' }}\r\n                                                        >\r\n                                                            {isDescriptionError && DescriptionErrorMsg}\r\n                                                        </FormHelperText> */}\r\n                            <Row>\r\n                              {/* <Col xs={12} md={6}>\r\n                                                                <FormControl\r\n                                                                    sx={{ width: { lg: 265, md: 265, sm: 265, xs: 200 } }}\r\n                                                                >\r\n                                                                    <InputLabel id=\"demo-multiple-name-label\">\r\n                                                                        Value Type\r\n                                                                    </InputLabel>\r\n                                                                    <Select\r\n                                                                        labelId=\"demo-multiple-name-label\"\r\n                                                                        id=\"demo-multiple-name\"\r\n                                                                        multiple={false}\r\n                                                                        name=\"valueTypeId\"\r\n                                                                        value={v1.valueTypeId || []}\r\n                                                                        onChange={(arr) => {\r\n                                                                            handleInputChange(arr);\r\n                                                                            validateValueType(arr);\r\n                                                                        }}\r\n                                                                        label=\"Value Type\"\r\n                                                                        MenuProps={MenuProps}\r\n                                                                        required={true}\r\n                                                                        disabled={v1.id ? true : false}\r\n                                                                    >\r\n                                                                        {valueType.map((arr: any) => (\r\n                                                                            <MenuItem key={arr.id} value={arr.id}>\r\n                                                                                {arr.valueTypeName}\r\n                                                                            </MenuItem>\r\n                                                                        ))}\r\n                                                                    </Select>\r\n                                                                </FormControl>\r\n                                                                <FormHelperText style={{ color: 'red', height: '22px' }}>\r\n                                                                    {isValueTypeError && ValueTypeErrorMsg}\r\n                                                                </FormHelperText>\r\n\r\n                                                                <TextField\r\n                                                                    autoFocus\r\n                                                                    margin=\"dense\"\r\n                                                                    id=\"name\"\r\n                                                                    label=\"Default Value\"\r\n                                                                    type=\"text\"\r\n                                                                    fullWidth\r\n                                                                    variant=\"outlined\"\r\n                                                                    name=\"defaultValue\"\r\n                                                                    value={v1.defaultValue}\r\n                                                                    onChange={(arr) => {\r\n                                                                        handleInputChange(arr);\r\n                                                                        validateDefaultValue(arr);\r\n                                                                    }}\r\n                                                                    required={true}\r\n                                                                />\r\n                                                                <FormHelperText\r\n                                                                    style={{ color: 'red', height: '22px' }}\r\n                                                                >\r\n                                                                    {isDefaultValueError && DefaultValueErrorMsg}\r\n                                                                </FormHelperText>\r\n                                                            </Col> */}\r\n                              {/* <Col xs={12} md={6}>\r\n                                                                <TextField\r\n                                                                    autoFocus\r\n                                                                    margin=\"dense\"\r\n                                                                    id=\"displayName\"\r\n                                                                    label=\"Value List\"\r\n                                                                    type=\"text\"\r\n                                                                    fullWidth\r\n                                                                    variant=\"outlined\"\r\n                                                                    name=\"name\"\r\n                                                                    value={v1.valueList}\r\n                                                                    onChange={(arr) => {\r\n                                                                        handleInputChange(arr);\r\n                                                                        validateValueList(arr);\r\n                                                                    }}\r\n                                                                    required={true}\r\n                                                                />\r\n                                                                <FormHelperText\r\n                                                                    style={{ color: 'red', height: '22px' }}\r\n                                                                >\r\n                                                                    {isValueListError && ValueListErrorMsg}\r\n                                                                </FormHelperText>\r\n                                                            </Col> */}\r\n                            </Row>\r\n                            <Row>\r\n                              <Col xs={12} md={6}>\r\n                                {v1.valueTypeId !== 10 ? (\r\n                                  <>\r\n                                    <TextField\r\n                                      autoFocus\r\n                                      margin=\"dense\"\r\n                                      id=\"defaultValue\"\r\n                                      label=\"Default Value\"\r\n                                      type=\"text\"\r\n                                      fullWidth\r\n                                      variant=\"outlined\"\r\n                                      name=\"defaultValue\"\r\n                                      value={v1.defaultValue}\r\n                                      onChange={(arr) => {\r\n                                        handleInputChange(arr);\r\n                                        validateDefaultValue(arr);\r\n                                      }}\r\n                                      required={true}\r\n                                    />\r\n                                    <FormHelperText\r\n                                      style={{ color: 'red', height: '22px' }}\r\n                                    >\r\n                                      {isDefaultValueError &&\r\n                                        DefaultValueErrorMsg}\r\n                                    </FormHelperText>\r\n                                  </>\r\n                                ) : (\r\n                                  <>\r\n                                    <Row>\r\n                                      <FormGroup style={{ display: 'flex' }}>\r\n                                        <TextField\r\n                                          autoFocus\r\n                                          margin=\"dense\"\r\n                                          id=\"defaultValuet\"\r\n                                          label=\"Default Value\"\r\n                                          type=\"text\"\r\n                                          fullWidth\r\n                                          variant=\"outlined\"\r\n                                          name=\"singleValueOfDefaultValue\"\r\n                                          value={singleValueOfDefaultValue}\r\n                                          onChange={(arr) => {\r\n                                            arr.target.value =\r\n                                              arr.target.value === ''\r\n                                                ? null\r\n                                                : arr.target.value;\r\n                                            handleDefaultValueInputChange(arr);\r\n                                            // handleInputChange(arr);\r\n                                            validateDefaultValueList(arr);\r\n                                          }}\r\n                                        />\r\n                                        <Button\r\n                                          sx={{ mt: 0.5 }}\r\n                                          variant=\"outlined\"\r\n                                          onClick={handleAddDefaultValue}\r\n                                          style={{\r\n                                            border: '0px',\r\n                                            borderLeft: '1px solid #ced4da',\r\n                                            borderRadius: '0px',\r\n                                            margin: '13px 0px 8px -68px'\r\n                                          }}\r\n                                        >\r\n                                          Add\r\n                                        </Button>\r\n                                      </FormGroup>\r\n                                      <FormHelperText\r\n                                        style={{ color: 'red', height: '22px' }}\r\n                                      >\r\n                                        {isDefaultValueError &&\r\n                                          DefaultValueErrorMsg}\r\n                                      </FormHelperText>\r\n                                    </Row>\r\n                                    {/* <Col lg={1}\r\n                                                                        md={1}\r\n                                                                        sm={1}\r\n                                                                        xs={1}>\r\n                                                                        <div style={{ display: 'flex', justifyContent: 'flex-start', marginTop: '8px' }}>\r\n                                                                            <Button\r\n                                                                                sx={{ mt: 0.5 }}\r\n                                                                                variant=\"outlined\"\r\n                                                                                onClick={handleAddValueList}\r\n                                                                            >\r\n                                                                                Add\r\n                                                                            </Button>\r\n                                                                        </div>\r\n                                                                    </Col> */}\r\n                                    {arrayDefaultValue &&\r\n                                      arrayDefaultValue.length > 0 && (\r\n                                        <Card style={card}>\r\n                                          <Row>\r\n                                            {arrayDefaultValue.map(\r\n                                              (value, index) => (\r\n                                                <Col\r\n                                                  lg={3}\r\n                                                  md={4}\r\n                                                  sm={6}\r\n                                                  xs={12}\r\n                                                  key={index}\r\n                                                  label={value}\r\n                                                  style={{\r\n                                                    // paddingLeft: '4%',\r\n                                                    // paddingTop: '1.4%',\r\n                                                    paddingBottom: '1.4%'\r\n                                                  }}\r\n                                                >\r\n                                                  <Chip\r\n                                                    key={index}\r\n                                                    label={value}\r\n                                                    onDelete={(e) => {\r\n                                                      handleDeleteDefaultValue(\r\n                                                        index\r\n                                                      );\r\n                                                    }}\r\n                                                  >\r\n                                                    {value}\r\n                                                  </Chip>\r\n                                                </Col>\r\n                                              )\r\n                                            )}\r\n                                          </Row>\r\n                                        </Card>\r\n                                      )}\r\n\r\n                                    {/* <Divider /> */}\r\n                                    {/* </Card> */}\r\n                                  </>\r\n                                )}\r\n                              </Col>\r\n\r\n                              {(v1.valueTypeId == 3 ||\r\n                                v1.valueTypeId == 10) && (\r\n                                <>\r\n                                  <Col xs={12} md={6}>\r\n                                    {/* <Card sx={{ my: 1 }} style={{ height: 'auto' }}>\r\n                                                                <CardHeader title=\"Value List\" /> */}\r\n                                    <Row>\r\n                                      {/* <InputLabel id=\"value List\" style={{ color: '#223354', fontWeight: '700', fontSize: '15px', margin: '13px 0px' }}>\r\n                                                                        Value List\r\n                                                                    </InputLabel> */}\r\n\r\n                                      <FormGroup style={{ display: 'flex' }}>\r\n                                        <TextField\r\n                                          autoFocus\r\n                                          margin=\"dense\"\r\n                                          id=\"value List\"\r\n                                          label=\"Value List\"\r\n                                          type=\"text\"\r\n                                          fullWidth\r\n                                          variant=\"outlined\"\r\n                                          name=\"singleValueOfValueList\"\r\n                                          value={singleValueOfValueList}\r\n                                          onChange={(arr) => {\r\n                                            handleValueListInputChange(arr);\r\n                                            validateValueList(arr);\r\n                                          }}\r\n                                        />\r\n                                        <Button\r\n                                          sx={{ mt: 0.5 }}\r\n                                          variant=\"outlined\"\r\n                                          onClick={handleAddValueList}\r\n                                          style={{\r\n                                            border: '0px',\r\n                                            borderLeft: '1px solid #ced4da',\r\n                                            borderRadius: '0px',\r\n                                            margin: '13px 0px 8px -68px'\r\n                                          }}\r\n                                        >\r\n                                          Add\r\n                                        </Button>\r\n                                      </FormGroup>\r\n                                      <FormHelperText\r\n                                        style={{ color: 'red', height: '22px' }}\r\n                                      >\r\n                                        {isValueListError && ValueListErrorMsg}\r\n                                      </FormHelperText>\r\n\r\n                                      {/* <Col lg={2}\r\n                                                                        md={2}\r\n                                                                        sm={2}\r\n                                                                        xs={2}>\r\n                                                                        <div style={{ display: 'flex', justifyContent: 'flex-start', marginTop: '8px' }}>\r\n                                                                            <Button\r\n                                                                                sx={{ mt: 0.5 }}\r\n                                                                                variant=\"outlined\"\r\n                                                                                onClick={handleAddValueList}\r\n                                                                            >\r\n                                                                                Add\r\n                                                                            </Button>\r\n                                                                        </div>\r\n                                                                    </Col> */}\r\n                                    </Row>\r\n                                    {arrayValueList &&\r\n                                      arrayValueList.length > 0 && (\r\n                                        <Card style={card}>\r\n                                          <Row>\r\n                                            {arrayValueList.map(\r\n                                              (value, index) => (\r\n                                                <Col\r\n                                                  lg={3}\r\n                                                  md={4}\r\n                                                  sm={6}\r\n                                                  xs={12}\r\n                                                  key={index}\r\n                                                  label={value}\r\n                                                  style={{\r\n                                                    // paddingLeft: '4%',\r\n                                                    // paddingTop: '1.4%',\r\n                                                    paddingBottom: '1.4%'\r\n                                                  }}\r\n                                                >\r\n                                                  <Chip\r\n                                                    key={index}\r\n                                                    label={value}\r\n                                                    onDelete={(e) => {\r\n                                                      handleDeleteValueList(\r\n                                                        index\r\n                                                      );\r\n                                                    }}\r\n                                                  >\r\n                                                    {value}\r\n                                                  </Chip>\r\n                                                </Col>\r\n                                              )\r\n                                            )}\r\n                                          </Row>\r\n                                        </Card>\r\n                                      )}\r\n                                    {/* <Divider /> */}\r\n                                    {/* </Card> */}{' '}\r\n                                  </Col>\r\n                                </>\r\n                              )}\r\n\r\n                              {v1.valueTypeId == 1 && (\r\n                                <Col xs={12} md={6}>\r\n                                  <TextField\r\n                                    autoFocus\r\n                                    margin=\"dense\"\r\n                                    id=\"textLength\"\r\n                                    label=\"Text length\"\r\n                                    type=\"number\"\r\n                                    fullWidth\r\n                                    variant=\"outlined\"\r\n                                    name=\"textLength\"\r\n                                    value={v1.textLength}\r\n                                    onChange={(arr) => {\r\n                                      const inputValue = parseInt(\r\n                                        arr.target.value\r\n                                      );\r\n                                      handleInputChange(arr);\r\n                                      validateTextLength(inputValue);\r\n                                    }}\r\n                                    inputProps={{ maxLength: 3 }}\r\n                                    disabled={v1.id ? true : false}\r\n                                  />\r\n                                  <FormHelperText\r\n                                    style={{ color: 'red', height: '22px' }}\r\n                                  >\r\n                                    {isTextLengthError && TextLengthErrorMsg}\r\n                                  </FormHelperText>\r\n                                </Col>\r\n                              )}\r\n                            </Row>\r\n                            <Row>\r\n                              <Col xs={12} md={6}>\r\n                                <Typography gutterBottom variant=\"h6\">\r\n                                  <Grid container>\r\n                                    <Grid item xs={6} sm={6} md={6}>\r\n                                      <Box\r\n                                        display=\"flex\"\r\n                                        alignItems=\"flex-start\"\r\n                                      >\r\n                                        Is Required{' '}\r\n                                      </Box>\r\n                                    </Grid>\r\n                                    <Grid item xs={6} sm={6} md={6}>\r\n                                      <Box>\r\n                                        <Switch\r\n                                          checked={v1.isRequired ? true : false}\r\n                                          onClick={(e) =>\r\n                                            handleSwitchIsRequired(e)\r\n                                          }\r\n                                          inputProps={{\r\n                                            'aria-label': 'controlled'\r\n                                          }}\r\n                                        />{' '}\r\n                                      </Box>\r\n                                    </Grid>\r\n                                  </Grid>\r\n                                </Typography>\r\n                                {/* Is Required <Switch\r\n                                                                    checked={\r\n                                                                        (v1.isRequired) ? true : false\r\n                                                                    }\r\n                                                                    onClick={(e) =>\r\n                                                                        handleSwitchIsRequired(e)\r\n                                                                    }\r\n                                                                    inputProps={{\r\n                                                                        'aria-label': 'controlled'\r\n                                                                    }}\r\n                                                                /> */}\r\n                              </Col>\r\n                              <Col xs={12} md={6}>\r\n                                <Typography gutterBottom variant=\"h6\">\r\n                                  <Grid container>\r\n                                    <Grid item xs={6} sm={6} md={6}>\r\n                                      <Box\r\n                                        display=\"flex\"\r\n                                        alignItems=\"flex-start\"\r\n                                      >\r\n                                        Allow In Search{' '}\r\n                                      </Box>\r\n                                    </Grid>\r\n                                    <Grid item xs={6} sm={6} md={6}>\r\n                                      <Box>\r\n                                        <Switch\r\n                                          checked={\r\n                                            v1.allowInSearch ? true : false\r\n                                          }\r\n                                          onClick={(e) =>\r\n                                            handleSwitchAllowInSearch(e)\r\n                                          }\r\n                                          inputProps={{\r\n                                            'aria-label': 'controlled'\r\n                                          }}\r\n                                        />{' '}\r\n                                      </Box>\r\n                                    </Grid>\r\n                                  </Grid>\r\n                                </Typography>\r\n                                {/* Allow In Search <Switch\r\n                                                                    checked={\r\n                                                                        (v1.allowInSearch) ? true : false\r\n                                                                    }\r\n                                                                    onClick={(e) =>\r\n                                                                        handleSwitchAllowInSearch(e)\r\n                                                                    }\r\n                                                                    inputProps={{\r\n                                                                        'aria-label': 'controlled'\r\n                                                                    }}\r\n                                                                /> */}\r\n                              </Col>\r\n                              <Col xs={12} md={6}>\r\n                                <Typography gutterBottom variant=\"h6\">\r\n                                  <Grid container>\r\n                                    <Grid item xs={6} sm={6} md={6}>\r\n                                      <Box\r\n                                        display=\"flex\"\r\n                                        alignItems=\"flex-start\"\r\n                                      >\r\n                                        Allow In Filter{' '}\r\n                                      </Box>\r\n                                    </Grid>\r\n                                    <Grid item xs={6} sm={6} md={6}>\r\n                                      <Box>\r\n                                        <Switch\r\n                                          checked={\r\n                                            v1.allowInFilter ? true : false\r\n                                          }\r\n                                          onClick={(e) =>\r\n                                            handleSwitchAllowInFilter(e)\r\n                                          }\r\n                                          inputProps={{\r\n                                            'aria-label': 'controlled'\r\n                                          }}\r\n                                        />{' '}\r\n                                      </Box>\r\n                                    </Grid>\r\n                                  </Grid>\r\n                                </Typography>\r\n                                {/* Allow In Filter <Switch\r\n                                                                    checked={\r\n                                                                        (v1.allowInFilter) ? true : false\r\n                                                                    }\r\n                                                                    onClick={(e) =>\r\n                                                                        handleSwitchAllowInFilter(e)\r\n                                                                    }\r\n                                                                    inputProps={{\r\n                                                                        'aria-label': 'controlled'\r\n                                                                    }}\r\n                                                                /> */}\r\n                              </Col>\r\n\r\n                              <Col xs={12} md={6}>\r\n                                <Typography gutterBottom variant=\"h6\">\r\n                                  <Grid container>\r\n                                    <Grid item xs={6} sm={6} md={6}>\r\n                                      <Box\r\n                                        display=\"flex\"\r\n                                        alignItems=\"flex-start\"\r\n                                      >\r\n                                        Allow In Preferences{' '}\r\n                                      </Box>\r\n                                    </Grid>\r\n                                    <Grid item xs={6} sm={6} md={6}>\r\n                                      <Box>\r\n                                        <Switch\r\n                                          checked={\r\n                                            v1.allowInPreferences ? true : false\r\n                                          }\r\n                                          onClick={(e) =>\r\n                                            handleSwitchAllowInPreferences(e)\r\n                                          }\r\n                                          inputProps={{\r\n                                            'aria-label': 'controlled'\r\n                                          }}\r\n                                        />{' '}\r\n                                      </Box>\r\n                                    </Grid>\r\n                                  </Grid>\r\n                                </Typography>\r\n                                {/* Allow In Preferences <Switch\r\n                                                                    checked={\r\n                                                                        (v1.allowInPreferences) ? true : false\r\n                                                                    }\r\n                                                                    onClick={(e) =>\r\n                                                                        handleSwitchAllowInPreferences(e)\r\n                                                                    }\r\n                                                                    inputProps={{\r\n                                                                        'aria-label': 'controlled'\r\n                                                                    }}\r\n                                                                /> */}\r\n                              </Col>\r\n                              <Col xs={12} md={6}>\r\n                                <Typography gutterBottom variant=\"h6\">\r\n                                  <Grid container>\r\n                                    <Grid item xs={6} sm={6} md={6}>\r\n                                      <Box\r\n                                        display=\"flex\"\r\n                                        alignItems=\"flex-start\"\r\n                                      >\r\n                                        Allow In CompleteProfile{' '}\r\n                                      </Box>\r\n                                    </Grid>\r\n                                    <Grid item xs={6} sm={6} md={6}>\r\n                                      <Box>\r\n                                        <Switch\r\n                                          checked={\r\n                                            v1.allowIncompleteProfile\r\n                                              ? true\r\n                                              : false\r\n                                          }\r\n                                          onClick={(e) =>\r\n                                            handleSwitchAllowIncompleteProfile(\r\n                                              e\r\n                                            )\r\n                                          }\r\n                                          inputProps={{\r\n                                            'aria-label': 'controlled'\r\n                                          }}\r\n                                        />{' '}\r\n                                      </Box>\r\n                                    </Grid>\r\n                                  </Grid>\r\n                                </Typography>\r\n                                {/* Allow In CompleteProfile <Switch\r\n                                                                        checked={\r\n                                                                            (v1.allowIncompleteProfile) ? true : false\r\n                                                                        }\r\n                                                                        onClick={(e) =>\r\n                                                                            handleSwitchAllowIncompleteProfile(e)\r\n                                                                        }\r\n                                                                        inputProps={{\r\n                                                                            'aria-label': 'controlled'\r\n                                                                        }}\r\n                                                                    /> */}\r\n                              </Col>\r\n                            </Row>\r\n                            {/* <Row style={{ marginTop: \"20px\" }}>\r\n\r\n\r\n\r\n                                                        </Row> */}\r\n                            {v1.allowIncompleteProfile == true && (\r\n                              <Row style={{ marginTop: '5px' }}>\r\n                                <Col xs={12} md={6}>\r\n                                  <FormControl\r\n                                    sx={{\r\n                                      width: {\r\n                                        lg: 265,\r\n                                        md: 265,\r\n                                        sm: 265,\r\n                                        xs: 200\r\n                                      }\r\n                                    }}\r\n                                  >\r\n                                    <InputLabel id=\"demo-multiple-name-label\">\r\n                                      Section\r\n                                    </InputLabel>\r\n                                    <Select\r\n                                      labelId=\"demo-multiple-name-label\"\r\n                                      id=\"demo-multiple-name\"\r\n                                      multiple={false}\r\n                                      name=\"completeprofilesectioname\"\r\n                                      value={v1.completeprofilesectioname || []}\r\n                                      onChange={(arr) => {\r\n                                        handleInputChange(arr);\r\n                                        validateSection(arr);\r\n                                      }}\r\n                                      label=\"Value Type\"\r\n                                      MenuProps={MenuProps}\r\n                                      required={true}\r\n                                    >\r\n                                      {profileSection.map((arr: any) => (\r\n                                        <MenuItem\r\n                                          key={arr.value}\r\n                                          value={arr.value}\r\n                                        >\r\n                                          {arr.value}\r\n                                        </MenuItem>\r\n                                      ))}\r\n                                    </Select>\r\n                                  </FormControl>\r\n                                  <FormHelperText\r\n                                    style={{ color: 'red', height: '22px' }}\r\n                                  >\r\n                                    {isSectionError && SectionErrorMsg}\r\n                                  </FormHelperText>\r\n                                </Col>\r\n                              </Row>\r\n                            )}\r\n                          </DialogContent>\r\n                          <Box\r\n                            sx={{\r\n                              display: 'flex',\r\n                              justifyContent: 'space-between',\r\n                              p: '8px'\r\n                            }}\r\n                          >\r\n                            {/* <FormHelperText\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                                height: '22px',\r\n                                                                margin: 'none',\r\n                                                                padding: '8px'\r\n                                                            }}\r\n                                                        >\r\n                                                        </FormHelperText>  */}\r\n                            <Typography\r\n                              sx={{\r\n                                fontSize: '14px',\r\n                                fontWeight: 'bold',\r\n                                color: '#ff0000',\r\n                                padding: '10px'\r\n                              }}\r\n                            >\r\n                              {/* Note: Changes will reflect to app after restart it. */}\r\n                              Note: The changes will be visible in the app once\r\n                              restart it. Please restart the App to see the\r\n                              updates.\r\n                            </Typography>\r\n                            <div>\r\n                              <Button\r\n                                onClick={handleCloseCustomNotificationDialog}\r\n                                variant=\"outlined\"\r\n                                style={{ marginRight: '10px' }}\r\n                              >\r\n                                Cancel\r\n                              </Button>\r\n                              <Button\r\n                                // disabled={credentail?.isDemoAdmin}\r\n                                onClick={(e) => {\r\n                                  checkIsDemoUser(\r\n                                    () => saveCustomField(e, false),\r\n                                    showSnackBar\r\n                                  )();\r\n                                }}\r\n                                variant=\"outlined\"\r\n                                style={{ marginRight: '10px' }}\r\n                              >\r\n                                Save\r\n                              </Button>\r\n                            </div>\r\n                          </Box>\r\n                        </Dialog>\r\n                      </div>\r\n                      <div>\r\n                        <Dialog\r\n                          open={isDel}\r\n                          onClose={handleClose}\r\n                          fullWidth\r\n                          maxWidth=\"xs\"\r\n                        >\r\n                          <SnackbarComponent />\r\n                          <DialogTitle\r\n                            sx={{\r\n                              m: 0,\r\n                              p: 2,\r\n                              fontSize: '20px',\r\n                              fontWeight: 'bolder'\r\n                            }}\r\n                          >\r\n                            Delete\r\n                          </DialogTitle>\r\n                          <DialogContent>\r\n                            <DialogContentText\r\n                              style={{\r\n                                fontSize: '1rem',\r\n                                letterSpacing: '0.00938em'\r\n                              }}\r\n                            >\r\n                              Are you sure you want to Delete?\r\n                              <Typography\r\n                                sx={{\r\n                                  fontSize: '12px',\r\n                                  fontWeight: 'bold',\r\n                                  color: '#ff0000',\r\n                                  paddingTop: '12px'\r\n                                }}\r\n                              >\r\n                                {/* Note: Changes will reflect to app after restart it. */}\r\n                                Note: The changes will be visible in the app\r\n                                once restart it. Please restart the App to see\r\n                                the updates.\r\n                              </Typography>\r\n                            </DialogContentText>\r\n                          </DialogContent>\r\n                          <DialogActions>\r\n                            <Button\r\n                              onClick={handleClose}\r\n                              variant=\"outlined\"\r\n                              style={{ marginRight: '10px' }}\r\n                            >\r\n                              Cancel\r\n                            </Button>\r\n                            <Button\r\n                              // disabled={credentail?.isDemoAdmin}\r\n                              onClick={() =>\r\n                                checkIsDemoUser(\r\n                                  handleIsDeleteDialog,\r\n                                  showSnackBar\r\n                                )()\r\n                              }\r\n                              variant=\"outlined\"\r\n                              style={{ marginRight: '10px' }}\r\n                            >\r\n                              Yes\r\n                            </Button>\r\n                          </DialogActions>\r\n                        </Dialog>\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </Card>\r\n            </>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ManageCustomFields;\r\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');\nexports.default = _default;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"\n}), 'Search');\nexports.default = _default;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getTableHeadUtilityClass(slot) {\n  return generateUtilityClass('MuiTableHead', slot);\n}\nconst tableHeadClasses = generateUtilityClasses('MuiTableHead', ['root']);\nexport default tableHeadClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport styled from '../styles/styled';\nimport { getTableHeadUtilityClass } from './tableHeadClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTableHeadUtilityClass, classes);\n};\nconst TableHeadRoot = styled('thead', {\n  name: 'MuiTableHead',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  display: 'table-header-group'\n});\nconst tablelvl2 = {\n  variant: 'head'\n};\nconst defaultComponent = 'thead';\nconst TableHead = /*#__PURE__*/React.forwardRef(function TableHead(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiTableHead'\n  });\n  const {\n      className,\n      component = defaultComponent\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(Tablelvl2Context.Provider, {\n    value: tablelvl2,\n    children: /*#__PURE__*/_jsx(TableHeadRoot, _extends({\n      as: component,\n      className: clsx(classes.root, className),\n      ref: ref,\n      role: component === defaultComponent ? null : 'rowgroup',\n      ownerState: ownerState\n    }, other))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TableHead.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component, normally `TableRow`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default TableHead;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getTableUtilityClass(slot) {\n  return generateUtilityClass('MuiTable', slot);\n}\nconst tableClasses = generateUtilityClasses('MuiTable', ['root', 'stickyHeader']);\nexport default tableClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"component\", \"padding\", \"size\", \"stickyHeader\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport TableContext from './TableContext';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport styled from '../styles/styled';\nimport { getTableUtilityClass } from './tableClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    stickyHeader\n  } = ownerState;\n  const slots = {\n    root: ['root', stickyHeader && 'stickyHeader']\n  };\n  return composeClasses(slots, getTableUtilityClass, classes);\n};\nconst TableRoot = styled('table', {\n  name: 'MuiTable',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.stickyHeader && styles.stickyHeader];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  display: 'table',\n  width: '100%',\n  borderCollapse: 'collapse',\n  borderSpacing: 0,\n  '& caption': _extends({}, theme.typography.body2, {\n    padding: theme.spacing(2),\n    color: (theme.vars || theme).palette.text.secondary,\n    textAlign: 'left',\n    captionSide: 'bottom'\n  })\n}, ownerState.stickyHeader && {\n  borderCollapse: 'separate'\n}));\nconst defaultComponent = 'table';\nconst Table = /*#__PURE__*/React.forwardRef(function Table(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiTable'\n  });\n  const {\n      className,\n      component = defaultComponent,\n      padding = 'normal',\n      size = 'medium',\n      stickyHeader = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component,\n    padding,\n    size,\n    stickyHeader\n  });\n  const classes = useUtilityClasses(ownerState);\n  const table = React.useMemo(() => ({\n    padding,\n    size,\n    stickyHeader\n  }), [padding, size, stickyHeader]);\n  return /*#__PURE__*/_jsx(TableContext.Provider, {\n    value: table,\n    children: /*#__PURE__*/_jsx(TableRoot, _extends({\n      as: component,\n      role: component === defaultComponent ? null : 'table',\n      ref: ref,\n      className: clsx(classes.root, className),\n      ownerState: ownerState\n    }, other))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Table.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the table, normally `TableHead` and `TableBody`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Allows TableCells to inherit padding of the Table.\n   * @default 'normal'\n   */\n  padding: PropTypes.oneOf(['checkbox', 'none', 'normal']),\n  /**\n   * Allows TableCells to inherit size of the Table.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * Set the header sticky.\n   *\n   * ⚠️ It doesn't work with IE11.\n   * @default false\n   */\n  stickyHeader: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Table;"],"names":["PageTitle","styled","Box","_ref","theme","spacing","_ref2","children","_jsx","className","Container","maxWidth","props","title","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","Dialog","padding","height","initialState","id","name","displayName","mappedFieldName","description","valueTypeId","isRequired","allowInSearch","allowInFilter","allowIncompleteProfile","allowInPreferences","defaultValue","valueList","textLength","completeprofilesectioname","ManageCustomFields","card","boxShadow","borderRadius","marginBottom","navigate","useNavigate","useTheme","page","setPage","useState","limit","setLimit","row","setRow","v1","setV1","React","singleValueOfValueList","setSingleValueOfValueList","arrayValueList","setArrayValueList","singleValueOfDefaultValue","setSingleValueOfDefaultValue","arrayDefaultValue","setArrayDefaultValue","isOpen","setIsOpen","isloading","setIsLoading","ischeck","setIsCheck","search","setSearch","isDel","setIsDel","customFields","setCustomFields","valueType","setValueType","isNameError","setIsNameError","NameErrorMsg","setNameErrorMsg","isDisplayNameError","setIsDisplayNameError","DisplayNameErrorMsg","setDisplayNameErrorMsg","isMappedFieldNameError","setIsMappedFieldNameError","MappedFieldNameErrorMsg","setMappedFieldNameErrorMsg","isDescriptionError","setIsDescriptionError","DescriptionErrorMsg","setDescriptionErrorMsg","isValueTypeError","setIsValueTypeError","ValueTypeErrorMsg","setValueTypeErrorMsg","isDefaultValueError","setIsDefaultValueError","DefaultValueErrorMsg","setDefaultValueErrorMsg","isValueListError","setIsValueListError","ValueListErrorMsg","setValueListErrorMsg","isTextLengthError","setIsTextLengthError","TextLengthErrorMsg","setTextLengthErrorMsg","isSectionError","setIsSectionError","SectionErrorMsg","setSectionErrorMsg","image","setImage","credentail","setCredentail","isReadPermission","setIsReadPermission","isWritePermission","setIsWritePermission","isEditPermission","setIsEditPermission","isDeletePermission","setIsDeletePermission","showSnackBar","SnackbarComponent","useSnackbar","useEffect","cred","JSON","parse","localStorage","getItem","roleId","ind","pagePermissions","findIndex","c","isAddPermission","loadData","async","getdata","getValueType","startIndex","fetchRecord","token","refreshToken","obj","isActive","searchString","res","APIservice","httpPost","recordList","totalRecords","i","length","join","status","clear","toast","error","message","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","position","POSITION","TOP_RIGHT","console","log","reg","RegExp","handleClickOpenAdd","handleClose","handleCloseCustomNotificationDialog","handleInputChange","arr","value","target","mediumRegex","handleIsDeleteDialog","saveCustomField","e","isSend","Array","isArray","flag","preventDefault","validateForm","val","isDelete","_jsxs","ToastContainer","top","right","newestOnTop","rtl","pauseOnFocusLoss","Helmet","PageTitleWrapper","p","Grid","container","justifyContent","alignItems","item","Stack","Breadcrumbs","Link","to","display","color","HomeIcon","Typography","variant","fontWeight","_Fragment","Button","sx","mt","xs","md","onClick","size","AddTwoToneIcon","fontSize","FormControl","lg","sm","TextField","label","onChange","searchData","InputProps","startAdornment","InputAdornment","SearchIcon","direction","Card","Loader1","Divider","TableContainer","Table","stickyHeader","TableHead","TableRow","TableCell","colSpan","noWrap","align","TableBody","map","index","hover","gutterBottom","textTransform","whiteSpace","Tooltip","arrow","IconButton","background","colors","lighter","palette","primary","main","element","handleClickVisible","VisibilityIcon","Switch","checked","checkIsDemoUser","handleSwitch","inputProps","valueArray","includes","split","defaultValueArray","handleClickOpenEdit","EditTwoToneIcon","handleOpenDeleteDialog","arr1","packageDurationId","DeleteIcon","TablePagination","component","count","onPageChange","handlePageChange","event","newPage","onRowsPerPageChange","parseInt","rowsPerPage","rowsPerPageOptions","Paper","textAlign","verticalAlign","paragraph","open","onClose","fullWidth","DialogTitle","m","DialogContent","DialogContentText","letterSpacing","paddingTop","DialogActions","marginRight","disabled","isDemoAdmin","grey","CloseIcon","dividers","Row","Col","autoFocus","margin","type","replace","charAt","toLowerCase","slice","handleFieldNameChange","validateName","required","FormHelperText","validateDisplayName","multiline","rows","validateDescription","handleMappedFieldNameChange","test","validateMappedFieldName","InputLabel","Select","labelId","multiple","validateValueType","MenuItem","valueTypeName","validateDefaultValue","FormGroup","handleDefaultValueInputChange","validateDefaultValueList","handleAddDefaultValue","trim","push","border","borderLeft","paddingBottom","Chip","onDelete","indexToRemove","filter","_","handleValueListInputChange","validateValueList","handleAddValueList","inputValue","validateTextLength","maxLength","handleSwitchIsRequired","handleSwitchAllowInSearch","handleSwitchAllowInFilter","handleSwitchAllowInPreferences","handleSwitchAllowIncompleteProfile","marginTop","validateSection","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d","getTableHeadUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","TableHeadRoot","overridesResolver","styles","root","tablelvl2","defaultComponent","inProps","ref","useDefaultProps","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","Tablelvl2Context","Provider","as","clsx","role","getTableUtilityClass","TableRoot","borderCollapse","borderSpacing","typography","body2","vars","text","secondary","captionSide","slots","table","TableContext"],"sourceRoot":""}