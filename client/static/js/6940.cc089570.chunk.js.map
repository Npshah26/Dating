{"version":3,"file":"static/js/6940.cc089570.chunk.js","mappings":"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","sources":["components/PageTitleWrapper/index.tsx","content/Loader.tsx","content/addAppUser/steps/Step1.tsx","content/addAppUser/steps/Step2.tsx","content/addAppUser/steps/Step3.tsx","content/addAppUser/steps/Step4.tsx","content/addAppUser/steps/Step5.tsx","content/addAppUser/MapComponent.tsx","content/addAppUser/steps/Step6.tsx","content/addAppUser/steps/Step7.tsx","content/addAppUser/steps/Step8.tsx","content/addAppUser/steps/Step9.tsx","content/addAppUser/steps/Step10.tsx","content/addAppUser/steps/Step11.tsx","models/addappuser.ts","content/addAppUser/addAppUser.tsx"],"sourcesContent":["import { FC, ReactNode } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Box, Container, styled } from '@mui/material';\r\n\r\nconst PageTitle = styled(Box)(\r\n  ({ theme }) => `\r\n        padding: ${theme.spacing(1)};\r\n`\r\n);\r\n\r\ninterface PageTitleWrapperProps {\r\n  children?: ReactNode;\r\n}\r\n\r\nconst PageTitleWrapper: FC<PageTitleWrapperProps> = ({ children }) => {\r\n  return (\r\n    <PageTitle className=\"MuiPageTitle-wrapper\">\r\n      <Container maxWidth=\"lg\">{children}</Container>\r\n    </PageTitle>\r\n  );\r\n};\r\n\r\nPageTitleWrapper.propTypes = {\r\n  children: PropTypes.node.isRequired\r\n};\r\n\r\nexport default PageTitleWrapper;\r\n","import React from 'react';\r\nimport './Loader.css';\r\n\r\ninterface Props {\r\n  title: string;\r\n}\r\n\r\nconst Loader1 = (props: Props) => {\r\n  const { title } = props;\r\n  return (\r\n    // <div className=\"loader\">\r\n    //     <img className=\"img\" src={loader} alt=\"\" />\r\n    //     <span>{title}</span>\r\n    // </div>\r\n    <div className=\"spinner-container\">\r\n      <div className=\"loading-spinner\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader1;\r\n","\r\n\r\nimport React from 'react';\r\nimport {\r\n  Button,\r\n  Typography,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  FormLabel,\r\n  ToggleButton,\r\n  ToggleButtonGroup,\r\n  Box,\r\n  SelectChangeEvent,\r\n  Grid\r\n} from '@mui/material';\r\nimport '../addAppUser.css';\r\nimport { Card } from 'react-bootstrap';\r\nimport { AddAppUser } from 'src/models/addappuser';\r\nimport { useSnackbar } from 'src/content/useSnackbar';\r\n\r\ninterface Step1Props {\r\n  title: { id: number; name: string }[];\r\n  progressBarLength: string;\r\n  onNext: () => void; // Function to handle next step navigation\r\n  configData: {\r\n    profileForList: Array<{ id: number; name: string; gender: string | null }>;\r\n    genderList: string[];\r\n  };\r\n  currentStepId: number;\r\n  userInfo: any;\r\n  setUserInfo: (userInfo: any) => void;\r\n}\r\n\r\nconst Step1: React.FC<Step1Props> = ({\r\n  title,\r\n  progressBarLength,\r\n  onNext,\r\n  configData,\r\n  currentStepId,\r\n  userInfo,\r\n  setUserInfo\r\n}) => {\r\n  const [profileFor, setProfileFor] = React.useState<string>(\r\n    userInfo.profileForId || ''\r\n  );\r\n  console.log('profile', profileFor, userInfo.profileForId)\r\n  const [gender, setGender] = React.useState<string>(\r\n    userInfo.gender || '' || 'select'\r\n  );\r\n  const [genderOptions, setGenderOptions] = React.useState<string[]>(\r\n    configData.genderList\r\n  );\r\n  const [profileForError, setProfileForError] = React.useState<string>('');\r\n  const [genderError, setGenderError] = React.useState<string>('');\r\n  const [selectedProfile, setSelectedProfile] = React.useState<any | null>(\r\n    null\r\n  );\r\n  const { showSnackBar, SnackbarComponent } = useSnackbar();\r\n  const [error, setError] = React.useState<string>('');\r\n\r\n  const currentTitle =\r\n    title.find((item) => item.id === currentStepId)?.name || '';\r\n\r\n    React.useEffect(() => {\r\n      if (userInfo.profileForId) {\r\n        const selectedProfile = configData.profileForList.find(\r\n          (profile) => profile.id === userInfo.profileForId\r\n        );\r\n    \r\n        if (selectedProfile) {\r\n          setProfileFor(selectedProfile.name);\r\n          setGender(selectedProfile.gender || ''); // Ensure gender is set correctly\r\n          setGender(userInfo.gender);\r\n    \r\n          console.log('Selected Gender:', selectedProfile.gender); // Debugging\r\n    \r\n          if (selectedProfile.gender === 'Male') {\r\n            setGenderOptions(configData.genderList.filter((g) => g !== 'Female'));\r\n          } else if (selectedProfile.gender === 'Female') {\r\n            setGenderOptions(configData.genderList.filter((g) => g !== 'Male'));\r\n          } else {\r\n            setGenderOptions(configData.genderList);\r\n          }\r\n        }\r\n      }\r\n    }, [userInfo.profileForId, configData]);\r\n    \r\n    \r\n\r\n  const handleProfileForChange = (\r\n    event: React.MouseEvent<HTMLElement>,\r\n    newProfileFor: string | null\r\n  ) => {\r\n    console.log('function callll-->', newProfileFor);\r\n    const selectedValue = newProfileFor;\r\n    let selectedGender = '';\r\n    if (newProfileFor !== null) {\r\n      setProfileFor(newProfileFor);\r\n\r\n      // Clear error message when a valid selection is made\r\n      if (newProfileFor) {\r\n        setProfileForError('');\r\n      }\r\n\r\n      const selectedProfile = configData.profileForList.find(\r\n        (profile) => profile.name == newProfileFor\r\n      );\r\n\r\n      if (selectedProfile) {\r\n        if (selectedProfile.gender) {\r\n          // Auto-select the gender\r\n          setGender(selectedProfile.gender);\r\n          selectedGender = selectedProfile.gender\r\n\r\n          // Update gender options based on the selected gender\r\n          if (selectedProfile.gender == 'Male') {\r\n            setGenderOptions(\r\n              configData.genderList.filter((g) => g !== 'Female')\r\n            );\r\n            setGenderError('');\r\n          } else if (selectedProfile.gender == 'Female') {\r\n            setGenderOptions(configData.genderList.filter((g) => g !== 'Male'));\r\n            setGenderError('');\r\n          }\r\n        } else {\r\n          console.log('exucution');\r\n          // If gender is null, show all options\r\n          setGender('');\r\n          setGenderOptions(configData.genderList);\r\n        }\r\n      } else {\r\n        // console.log('exucution---2');\r\n        setGender('');\r\n        setGenderOptions(configData.genderList); // Show all gender options if profile not found\r\n      }\r\n    }\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      profileForId: selectedValue, // Assuming 'heightId' is the field in your userInfo\r\n      gender: selectedGender\r\n    }));\r\n  };\r\n\r\n  const handleGenderChange = (event: SelectChangeEvent<string>) => {\r\n    // console.log('function callll-->');\r\n    setGender(event.target.value);\r\n    const selectedValue = event.target.value;\r\n    // Clear error message when a valid selection is made\r\n    if (event.target.value) {\r\n      setGenderError('');\r\n    }\r\n\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      gender: selectedValue // Assuming 'heightId' is the field in your userInfo\r\n    }));\r\n  };\r\n\r\n\r\n  const handleNextClick = () => {\r\n    let hasError = false;\r\n\r\n    if (!profileFor) {\r\n      setProfileForError('This Profile is for is required');\r\n      hasError = true;\r\n    } else {\r\n      setProfileForError('');\r\n    }\r\n\r\n    if (!gender || gender === 'select') {\r\n      setGenderError('Gender is required');\r\n      hasError = true;\r\n    } else {\r\n      setGenderError('');\r\n    }\r\n\r\n    if (!hasError) {\r\n      // Fetch the selected profile locally instead of using setState\r\n      const foundProfile = configData.profileForList.find(\r\n        (profile) => profile.name == profileFor\r\n      );\r\n      \r\n\r\n      if (!foundProfile) {\r\n        console.error('Selected profile not found:', profileFor);\r\n        return; // Handle potential errors gracefully\r\n      }\r\n\r\n      // Now update the state for selectedProfile (if you need it elsewhere)\r\n      setSelectedProfile(foundProfile);\r\n\r\n      // Store the selected profile ID as a number in local storage\r\n      localStorage.setItem('profileForId', foundProfile.id.toString());\r\n      localStorage.setItem('gender', gender);\r\n\r\n      onNext(); // Move to next step if no errors\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      \r\n      <Card className=\"container\">\r\n        {/* Title */}\r\n        <Typography variant=\"h3\" className=\"title\">\r\n          {currentTitle}\r\n        </Typography>\r\n\r\n        {/* Progress Bar */}\r\n        <Box className=\"progress-bar-container\">\r\n          <Box className=\"progress-bar\" style={{ width: progressBarLength }} />\r\n        </Box>\r\n\r\n        {/* Profile For Selection */}\r\n\r\n        <FormControl component=\"fieldset\" className=\"profile-control\">\r\n          <FormLabel component=\"legend\">This Profile is for *</FormLabel>\r\n          <ToggleButtonGroup\r\n            color=\"primary\"\r\n            value={profileFor}\r\n            exclusive\r\n            onChange={handleProfileForChange}\r\n            aria-label=\"Profile For\"\r\n          >\r\n            {configData.profileForList.map((option) => (\r\n              <ToggleButton\r\n                key={option.id}\r\n                value={option.name}\r\n                aria-label={option.name}\r\n              >\r\n                {option.name}\r\n              </ToggleButton>\r\n            ))}\r\n          </ToggleButtonGroup>\r\n          {profileForError && (\r\n            <Typography color=\"error\" align=\"left\">\r\n              {profileForError}\r\n            </Typography>\r\n          )}\r\n        </FormControl>\r\n\r\n        {/* Gender Selection */}\r\n        <FormControl fullWidth>\r\n          <FormLabel>Gender *</FormLabel>\r\n          <Select value={gender || ''} onChange={handleGenderChange} size=\"small\">\r\n            <MenuItem value=\"select\" disabled>\r\n              Please select your gender\r\n            </MenuItem>\r\n            {genderOptions.map((genderOption) => (\r\n              <MenuItem key={genderOption} value={genderOption}>\r\n                {genderOption}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n          {genderError && (\r\n            <Typography color=\"error\" align=\"left\">\r\n              {genderError}\r\n            </Typography>\r\n          )}\r\n        </FormControl>\r\n\r\n        {/* Error Message */}\r\n        {error && <Typography color=\"error\">{error}</Typography>}\r\n\r\n        {/* Navigation Buttons */}\r\n        <Box className=\"navigation-buttons\">\r\n          <Button variant=\"contained\" disabled>\r\n            Back\r\n          </Button>\r\n          <Button variant=\"contained\" onClick={handleNextClick}>\r\n            Next\r\n          </Button>\r\n        </Box>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Step1;\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Button,\r\n  FormControl,\r\n  TextField,\r\n  Grid,\r\n  Avatar,\r\n  IconButton,\r\n  Card,\r\n  FormLabel,\r\n  FormHelperText,\r\n  MenuItem,\r\n  Select\r\n} from '@mui/material';\r\nimport { SelectChangeEvent } from '@mui/material/Select';\r\nimport AddAPhotoIcon from '@mui/icons-material/AddAPhotoOutlined';\r\nimport '../addAppUser.css';\r\nimport { format } from 'date-fns';\r\nimport APIservice from 'src/utils/APIservice';\r\nimport { useSnackbar } from 'src/content/useSnackbar';\r\n\r\ninterface StepProps {\r\n  title: { id: number; name: string }[];\r\n  progressBarLength: string;\r\n  onBack: () => void;\r\n  onNext: () => void;\r\n  currentStepId: number;\r\n  userInfo: any; // Add userInfo prop to access the global state\r\n  setUserInfo: (userInfo: any) => void;\r\n}\r\n\r\nconst Step2: React.FC<StepProps> = ({\r\n  title,\r\n  progressBarLength,\r\n  onBack,\r\n  onNext,\r\n  currentStepId,\r\n  userInfo,\r\n  setUserInfo\r\n}) => {\r\n  // debugger;\r\n\r\n  const [formData, setFormData] = React.useState({\r\n    firstName: userInfo.firstName || '',\r\n    middleName: userInfo.middleName || '',\r\n    lastName: userInfo.lastName || '',\r\n    email: userInfo.email || '',\r\n    mobileNumber: userInfo.mobileNumber || '',\r\n    dateOfBirth: userInfo.dateOfBirth || ''\r\n  });\r\n  const [isSignedUp, setIsSignedUp] = useState(false);\r\n\r\n  const [errors, setErrors] = React.useState({\r\n    firstName: false,\r\n    // middleName: false,\r\n    lastName: false,\r\n    email: false,\r\n    mobileNumber: false,\r\n    dateOfBirth: false\r\n  });\r\n  const { showSnackBar, SnackbarComponent } = useSnackbar();\r\n  const [emailErrorMessage, setEmailErrorMessage] = useState('');\r\n  const [mobileNumberErrorMessage, setMobileNumberErrorMessage] = useState('');\r\n\r\n  // const [hasSignedUp, setHasSignedUp] = useState(false);\r\n  const [apiResponse, setApiResponse] = React.useState<string | null>(null);\r\n  const [apiError, setApiError] = React.useState<string | null>(null);\r\n  const [base64String, setBase64String] = useState('');\r\n  const [selectedImage, setSelectedImage] = React.useState<File | null>(\r\n    userInfo.imageUrl || null\r\n  );\r\n  // const [selectedImage, setSelectedImage] = useState(null);\r\n\r\n  const currentTitle =\r\n    title.find((item) => item.id === currentStepId)?.name || '';\r\n\r\n  React.useEffect(() => {\r\n    return () => {\r\n      if (selectedImage instanceof File) {\r\n        URL.revokeObjectURL(URL.createObjectURL(selectedImage));\r\n      }\r\n    };\r\n  }, [selectedImage]);\r\n\r\n  const handleImageChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files && e.target.files.length > 0) {\r\n      const selectedFile = e.target.files[0];\r\n      setSelectedImage(selectedFile); // Set image for preview\r\n\r\n      // Convert file to Base64\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        const base64 = reader.result as string; // Base64 string\r\n        setBase64String(base64); // Save Base64 string in state\r\n      };\r\n      reader.readAsDataURL(selectedFile); // Convert to Base64\r\n      setUserInfo((prevUserInfo) => ({\r\n        ...prevUserInfo,\r\n        imageUrl: selectedFile\r\n      }));\r\n    }\r\n  };\r\n\r\n  const getMinDate = () => {\r\n    const today = new Date();\r\n    today.setFullYear(today.getFullYear() - 18);\r\n    const day = String(today.getDate()).padStart(2, '0');\r\n    const month = String(today.getMonth() + 1).padStart(2, '0');\r\n    const year = today.getFullYear();\r\n    return `${year}-${month}-${day}`;\r\n  };\r\n  const formatDate = (dateString: string) => {\r\n    const date = new Date(dateString);\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    return `${year}-${month}-${day}`;\r\n  };\r\n\r\n  const [countryCode, setCountryCode] = React.useState('+91');\r\n\r\n  const handleCountryCodeChange = (e: SelectChangeEvent<string>) => {\r\n    setCountryCode(e.target.value);\r\n  };\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target;\r\n\r\n    if (name === 'mobileNumber') {\r\n      // Only allow 10 digits for mobileNumber\r\n      if (value.length <= 10) {\r\n        setFormData({ ...formData, [name]: value });\r\n      }\r\n    } else {\r\n      setFormData({ ...formData, [name]: value });\r\n    }\r\n\r\n    // Reset error for the current field\r\n    setErrors((prevErrors) => ({\r\n      ...prevErrors,\r\n      [name]: false // Reset error for the current field\r\n    }));\r\n\r\n    // Validate email format\r\n    if (name === 'email') {\r\n      const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n      if (value !== '') {\r\n        setErrors((prevErrors) => ({\r\n          ...prevErrors,\r\n          email: !emailPattern.test(value) // Validate email format\r\n        }));\r\n      }\r\n    }\r\n\r\n    // Validate phone number length\r\n    if (name === 'mobileNumber') {\r\n      setErrors((prevErrors) => ({\r\n        ...prevErrors,\r\n        mobileNumber: value.length !== 10 // Validate phone number length\r\n      }));\r\n    }\r\n\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      [name]: value\r\n    }));\r\n  };\r\n\r\n  let cred = JSON.parse(localStorage.getItem('Credentials')) as any;\r\n\r\n  let isEdit;\r\n  isEdit = localStorage.getItem('isEdit');\r\n  useEffect(() => {\r\n    debugger;\r\n    const storedIsSignedUp = localStorage.getItem('isSignedUp');\r\n    if (storedIsSignedUp) {\r\n      setIsSignedUp(true);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (cred?.isDemoUser) {\r\n      showSnackBar(\r\n        \"**Access Denied**\\nWe're sorry, but you do not have permission to access this feature.\"\r\n      );\r\n    }\r\n  }, []);\r\n\r\n  const handleNext = async () => {\r\n    const contactNo = `${countryCode}${formData.mobileNumber}`;\r\n\r\n    // Validate the form data\r\n    const newErrors = {\r\n      firstName: formData.firstName === '',\r\n      lastName: formData.lastName === '',\r\n      email: formData.email === '',\r\n      mobileNumber: formData.mobileNumber === '',\r\n      dateOfBirth: formData.dateOfBirth === ''\r\n    };\r\n\r\n    if (formData.email === '') {\r\n      setEmailErrorMessage('Email is required');\r\n    } else {\r\n      setEmailErrorMessage(''); // Reset the message if no error\r\n    }\r\n\r\n    if (formData.mobileNumber === '') {\r\n      setMobileNumberErrorMessage('Mobile number is required');\r\n    } else {\r\n      setMobileNumberErrorMessage(''); // Reset the message if no error\r\n    }\r\n\r\n    setErrors(newErrors);\r\n\r\n    const isValid = Object.values(newErrors).every((error) => !error);\r\n\r\n    const uId = localStorage.getItem('userId');\r\n    debugger;\r\n    if (isValid) {\r\n      // if (isEdit === 'false') {\r\n      try {\r\n        // Call the verifyEmailContact API before signing up\r\n        if (!uId || uId === 'undefined') {\r\n          const emailContact = {\r\n            email: formData.email,\r\n            contactNo: formData.mobileNumber\r\n          };\r\n\r\n          const verifyResponse = await APIservice.httpPost(\r\n            '/api/app/users/verifyEmailContact',\r\n            emailContact\r\n          );\r\n\r\n          // const verifyResult = await verifyResponse.json();\r\n\r\n          // If email or contact exists, set errors and prevent further steps\r\n          if (verifyResponse.message.includes('Email Already Exist')) {\r\n            setErrors((prevErrors) => ({ ...prevErrors, email: true }));\r\n            setEmailErrorMessage('Email already exists');\r\n            return; // Stop execution if email exists\r\n          }\r\n          if (verifyResponse.message.includes('ContactNo Already Exist')) {\r\n            setErrors((prevErrors) => ({\r\n              ...prevErrors,\r\n              mobileNumber: true\r\n            }));\r\n            setMobileNumberErrorMessage('Mobile number already exists');\r\n            return; // Stop execution if contact number exists\r\n          }\r\n        }\r\n\r\n        let userId, newToken, rtoken;\r\n        debugger;\r\n\r\n        // Step 1: Only call sign-up API if it hasn't been called before\r\n        if (!isSignedUp && isEdit === 'false') {\r\n          const signUpResponse = await fetch('/api/app/users/signUp', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              Authorization: 'MatrimonyAndroid|' // Add your authorization method\r\n            },\r\n            body: JSON.stringify({\r\n              email: formData.email,\r\n              contactNo: formData.mobileNumber,\r\n              password: 'Demo@1234' // Replace this with your actual password\r\n            })\r\n          });\r\n\r\n          if (!signUpResponse.ok) throw new Error('Failed to sign up');\r\n          const signUpResult = await signUpResponse.json();\r\n          console.log('Checking token', signUpResult.recordList[0]);\r\n          userId = signUpResult.recordList[0]?.id;\r\n          newToken = signUpResult.recordList[0]?.token;\r\n          rtoken = signUpResult.recordList[0]?.refreshtoken;\r\n\r\n          if (!userId)\r\n            throw new Error('User ID is missing from the sign-up response');\r\n\r\n          // Store userId, newToken, and rtoken in localStorage for reuse\r\n          localStorage.setItem('userId', userId);\r\n          localStorage.setItem('newToken', newToken);\r\n          localStorage.setItem('rtoken', rtoken);\r\n          debugger;\r\n\r\n          // Mark sign-up as completed and store this in localStorage\r\n          setIsSignedUp(true);\r\n          localStorage.setItem('isSignedUp', 'true'); // Store this state in localStorage\r\n        } else {\r\n          // Use values from localStorage if already signed up\r\n          userId = localStorage.getItem('userId');\r\n          newToken = localStorage.getItem('newToken');\r\n          rtoken = localStorage.getItem('rtoken');\r\n        }\r\n\r\n        // Step 2: Call completeUserProfileV2 for screenNumber 1\r\n        const token = localStorage.getItem('newToken');\r\n        const step1Data = {\r\n          id: userId,\r\n          screenNumber: 1,\r\n          gender: localStorage.getItem('gender'),\r\n          profileForId: localStorage.getItem('profileForId'),\r\n          token: token,\r\n          ...(token ? {} : { userId: userId })\r\n        };\r\n\r\n        // const step1Response = await fetch(\r\n        //   '/api/app/users/completeUserProfileV2',\r\n        //   {\r\n        //     method: 'POST',\r\n        //     headers: {\r\n        //       'Content-Type': 'application/json',\r\n        //       Authorization: `MatrimonyAndroid|Bearer ${newToken}`,\r\n        //       token: localStorage.getItem('newToken'),\r\n        //       refreshtoken: `${rtoken}`\r\n        //     },\r\n        //     body: JSON.stringify(step1Data)\r\n        //   }\r\n        // );\r\n        const step1Response = await APIservice.httpPost(\r\n          '/api/admin/users/completeUserProfileV2',\r\n          step1Data,\r\n          newToken,\r\n          rtoken\r\n        );\r\n\r\n        if (step1Response.status !== 200)\r\n          throw new Error('Failed to update profile with Step 1 data');\r\n\r\n        // Step 3: Process and format dateOfBirth for Step 2\r\n        // const formattedDOB = formData.dateOfBirth\r\n        //   ? format(new Date(formData.dateOfBirth), 'yyyy-MM-dd')\r\n        //   : null;\r\n\r\n        // if (!formattedDOB) throw new Error('Invalid dateOfBirth');\r\n\r\n        const step2Data = {\r\n          id: userId,\r\n          screenNumber: 2,\r\n          firstName: formData.firstName,\r\n          middleName: formData.middleName || null,\r\n          lastName: formData.lastName,\r\n          contactNo: contactNo,\r\n          birthDate: formData.dateOfBirth,\r\n          email: formData.email,\r\n          // token: localStorage.getItem('newToken'),\r\n          // userId\r\n          token: token,\r\n          ...(token ? {} : { userId: userId })\r\n        };\r\n\r\n        const step2Response = await fetch(\r\n          '/api/admin/users/completeUserProfileV2',\r\n          {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              Authorization: `MatrimonyAndroid|Bearer ${newToken}`,\r\n              refreshtoken: `${rtoken}`\r\n            },\r\n            body: JSON.stringify(step2Data)\r\n          }\r\n        );\r\n\r\n        if (!step2Response.ok)\r\n          throw new Error('Failed to update profile with Step 2 data');\r\n\r\n        // After Step 2 API call\r\n        // setApiResponse('User created and profile updated successfully');\r\n\r\n        if (selectedImage) {\r\n          const updatedData = {\r\n            id: userId,\r\n            image: base64String || userInfo.imageUrl,\r\n            userId\r\n          };\r\n\r\n          const imageUploadResponse = await APIservice.httpPost(\r\n            '/api/admin/appUsers/updateUserProfilePicV2',\r\n            updatedData,\r\n            newToken,\r\n            rtoken\r\n          );\r\n\r\n          if (!(imageUploadResponse.status == 200)) {\r\n            throw new Error('Failed to upload image');\r\n          }\r\n\r\n          console.log('Image uploaded successfully');\r\n        }\r\n\r\n        onNext(); // Move to next step\r\n      } catch (error) {\r\n        setApiError(error.message);\r\n      }\r\n      // } else {\r\n      //   onNext();\r\n      // }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      {cred.isDemoUser > 0 && <SnackbarComponent />}\r\n      <Card className=\"container\">\r\n        <Typography variant=\"h3\" className=\"title\">\r\n          {currentTitle}\r\n        </Typography>\r\n\r\n        <Box className=\"progress-bar-container\">\r\n          <Box className=\"progress-bar\" style={{ width: progressBarLength }} />\r\n        </Box>\r\n\r\n        <Box\r\n          sx={{\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            mb: 2,\r\n            mt: 4\r\n          }}\r\n        >\r\n          <Box sx={{ position: 'relative', display: 'inline-block' }}>\r\n            <Avatar\r\n              // src={\r\n              //   selectedImage ? URL?.createObjectURL(selectedImage) : undefined\r\n              // }\r\n              src={\r\n                selectedImage instanceof File\r\n                  ? URL.createObjectURL(selectedImage) // Use createObjectURL for File objects\r\n                  : userInfo.imageUrl || undefined // Use existing URL for edit mode\r\n              }\r\n              alt=\"Selected Image\"\r\n              sx={{ width: 100, height: 100 }}\r\n            />\r\n            <input\r\n              accept=\"image/*\"\r\n              style={{ display: 'none' }}\r\n              id=\"upload-image\"\r\n              type=\"file\"\r\n              onChange={handleImageChange}\r\n            />\r\n            <label htmlFor=\"upload-image\">\r\n              <IconButton\r\n                component=\"span\"\r\n                sx={{\r\n                  position: 'absolute',\r\n                  bottom: 8,\r\n                  right: 2,\r\n                  backgroundColor: '#5569ff',\r\n                  borderRadius: '50%',\r\n                  padding: 0.5,\r\n                  boxShadow: 1,\r\n                  color: 'white'\r\n                }}\r\n              >\r\n                <AddAPhotoIcon />\r\n              </IconButton>\r\n            </label>\r\n          </Box>\r\n        </Box>\r\n\r\n        <Box sx={{ width: '100%', mb: 2, p: 4 }}>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>First Name *</FormLabel>\r\n                <TextField\r\n                  // label=\"First Name *\"\r\n                  name=\"firstName\"\r\n                  value={formData.firstName}\r\n                  onChange={handleInputChange}\r\n                  // error={errors.firstName}\r\n                  // helperText={errors.firstName && 'First Name is required'}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n                {errors.firstName && (\r\n                  <FormHelperText error>\r\n                    {'First Name is required'}\r\n                  </FormHelperText>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Middle Name</FormLabel>\r\n                <TextField\r\n                  // label=\"Middle Name *\"\r\n                  name=\"middleName\"\r\n                  value={formData.middleName}\r\n                  onChange={handleInputChange}\r\n                  // error={errors.middleName}\r\n                  // helperText={errors.middleName && 'Middle Name is required'}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Last Name *</FormLabel>\r\n                <TextField\r\n                  // label=\"Last Name *\"\r\n                  name=\"lastName\"\r\n                  value={formData.lastName}\r\n                  onChange={handleInputChange}\r\n                  // error={errors.lastName}\r\n                  // helperText={errors.lastName && 'Last Name is required'}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                />\r\n                {errors.lastName && (\r\n                  <FormHelperText error>\r\n                    {'Last Name is required'}\r\n                  </FormHelperText>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>email Address *</FormLabel>\r\n                <TextField\r\n                  // label=\"email Address *\"\r\n                  name=\"email\"\r\n                  value={formData.email}\r\n                  onChange={handleInputChange}\r\n                  // error={errors.email}\r\n                  // helperText={errors.email && 'Enter a valid email address'}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  type=\"email\"\r\n                />\r\n\r\n                {errors.email && emailErrorMessage && (\r\n                  <FormHelperText error>{emailErrorMessage}</FormHelperText>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Mobile Number *</FormLabel>\r\n                <Grid container alignItems=\"center\" spacing={0}>\r\n                  <Grid item xs={2}>\r\n                    <Select\r\n                      value={countryCode}\r\n                      onChange={handleCountryCodeChange}\r\n                      size=\"small\"\r\n                      variant=\"outlined\"\r\n                      sx={{ width: '100%' }}\r\n                    >\r\n                      <MenuItem value=\"+91\">+91</MenuItem>\r\n                      <MenuItem value=\"+1\">+1</MenuItem>\r\n                      <MenuItem value=\"+44\">+44</MenuItem>\r\n                      {/* Add more country codes as needed */}\r\n                    </Select>\r\n                  </Grid>\r\n                  <Grid item xs={10}>\r\n                    <TextField\r\n                      name=\"mobileNumber\"\r\n                      value={formData.mobileNumber.slice(-10)}\r\n                      onChange={handleInputChange}\r\n                      variant=\"outlined\"\r\n                      size=\"small\"\r\n                      type=\"tel\"\r\n                      sx={{ width: '100%' }}\r\n                      inputProps={{\r\n                        maxLength: 10 // Prevents more than 10 digits being entered\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {errors.mobileNumber && mobileNumberErrorMessage && (\r\n                  <FormHelperText error>\r\n                    {mobileNumberErrorMessage}\r\n                  </FormHelperText>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Date of Birth *</FormLabel>\r\n                <TextField\r\n                  name=\"dateOfBirth\"\r\n                  value={\r\n                    formData.dateOfBirth ? formatDate(formData.dateOfBirth) : ''\r\n                  }\r\n                  onChange={handleInputChange}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  type=\"date\"\r\n                  InputLabelProps={{\r\n                    shrink: true\r\n                  }}\r\n                  inputProps={{ max: getMinDate() }} // Set maximum date to limit future dates\r\n                />\r\n                {errors.dateOfBirth && (\r\n                  <FormHelperText error>\r\n                    {errors.dateOfBirth && 'Date of Birth is required'}\r\n                  </FormHelperText>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n            {apiResponse && (\r\n              <Typography color=\"success\">{apiResponse}</Typography>\r\n            )}\r\n            {apiError && <Typography color=\"error\">{apiError}</Typography>}\r\n          </Grid>\r\n        </Box>\r\n\r\n        <Box className=\"navigation-buttons\">\r\n          <Button variant=\"contained\" onClick={onBack}>\r\n            Back\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={cred.isDemoUser == '1' ? onNext : handleNext}\r\n          >\r\n            Next\r\n          </Button>\r\n        </Box>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Step2;\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Button,\r\n  Card,\r\n  FormControl,\r\n  FormLabel,\r\n  Select,\r\n  MenuItem,\r\n  TextField,\r\n  Grid,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  Radio,\r\n  Chip\r\n} from '@mui/material';\r\nimport { SelectChangeEvent } from '@mui/material/Select';\r\nimport '../addAppUser.css';\r\nimport { AddAppUser } from 'src/models/addappuser';\r\nimport { useSnackbar } from 'src/content/useSnackbar';\r\n\r\n// Update the StepProps to include configData\r\ninterface StepProps {\r\n  title: { id: number; name: string }[];\r\n  progressBarLength: string;\r\n  onBack: () => void; // Function to handle back navigation\r\n  onNext: () => void;\r\n  configData: any; // Add configData as a prop\r\n  currentStepId: number;\r\n  userInfo: any; // Add userInfo prop to access the global state\r\n  setUserInfo: (userInfo: any) => void;\r\n}\r\n\r\nconst Step3: React.FC<StepProps> = ({\r\n  title,\r\n  progressBarLength,\r\n  onBack,\r\n  onNext,\r\n  configData,\r\n  currentStepId,\r\n  userInfo,\r\n  setUserInfo\r\n}) => {\r\n  // const [userInfo, setUserInfo] = useState<AddAppUser[]>([]);\r\n  debugger;\r\n\r\n  // const [martialStatus, setMartialStatus] = useState<string>('');\r\n  const [martialStatus, setMartialStatus] = useState<string | number>(\r\n    userInfo.maritalStatusId || ''\r\n  );\r\n  const [hasChildren, setHasChildren] = useState<string | number>(\r\n    userInfo.haveChildren || ''\r\n  ); // For radio button selection\r\n  const [numberOfChildren, setNumberOfChildren] = useState<string | number>(\r\n    userInfo.noOfChildren || ''\r\n  ); // For number of children\r\n\r\n  // const [height, setHeight] = useState<any[]>([]);\r\n  // const [weight, setWeight] = useState<any[]>([]);\r\n  const [height, setHeight] = useState<{ id: number; name: string }[]>([]);\r\n  const [weight, setWeight] = useState<{ id: number; name: string }[]>([]);\r\n  const [apiResponse, setApiResponse] = React.useState<string | null>(null);\r\n  const [apiError, setApiError] = React.useState<string | null>(null);\r\n\r\n  const [selectedHeight, setSelectedHeight] = useState<string | number>(\r\n    userInfo.height || ''\r\n  );\r\n  const [selectedWeight, setSelectedWeight] = useState<string | number>(\r\n    userInfo.weight || ''\r\n  );\r\n  const [specsLenses, setSpecsLenses] = useState<string | number>(\r\n    userInfo.haveSpecs || ''\r\n  );\r\n  const [anyDisability, setAnyDisability] = useState<string | number>(\r\n    userInfo.anyDisability || ''\r\n  );\r\n  const [bloodGroup, setBloodGroup] = useState<string>(\r\n    userInfo.bloodGroup || ''\r\n  );\r\n  const [complexion, setComplexion] = useState<string>(\r\n    userInfo.complexion || ''\r\n  );\r\n  const [bodyType, setBodyType] = useState<string>(userInfo.bodyType || '');\r\n  const [language, setLanguage] = useState<string>('');\r\n  const [selectedLanguages, setSelectedLanguages] = useState<string[]>(\r\n    userInfo.language || []\r\n  );\r\n  console.log('Selected langages', selectedLanguages, userInfo.language);\r\n  const [eyeType, setEyeType] = useState<string>(userInfo.eyeColor || '');\r\n  const [aboutYourself, setAboutYourself] = useState<string>(\r\n    userInfo.aboutMe || ''\r\n  );\r\n  const { showSnackBar, SnackbarComponent } = useSnackbar();\r\n  const [errors, setErrors] = useState<{ [key: string]: string }>({});\r\n\r\n  const currentTitle =\r\n    title.find((item) => item.id === currentStepId)?.name || '';\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await fetch('/api/app/users/getMasterData', {\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Fetched data:', data);\r\n\r\n      if (data && data.recordList) {\r\n        setHeight(data.recordList.height || []);\r\n        setWeight(data.recordList.weight || []);\r\n      } else {\r\n        console.error('Unexpected data format:', data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (cred?.isDemoUser) {\r\n      showSnackBar(\r\n        \"**Access Denied**\\nWe're sorry, but you do not have permission to access this feature.\"\r\n      );\r\n    }\r\n  }, []);\r\n\r\n  console.log('have children', hasChildren);\r\n  console.log(' children', userInfo.haveChildren);\r\n  let cred = JSON.parse(localStorage.getItem('Credentials')) as any;\r\n\r\n  // const handleSelectChange =\r\n  //   (setter: React.Dispatch<React.SetStateAction<string>>) =>\r\n  //   (event: SelectChangeEvent<string>) => {\r\n  //     setter(event.target.value); // Update the selected value\r\n\r\n  //     // Clear the error message for the selected field\r\n  //     setErrors((prevErrors) => ({\r\n  //       ...prevErrors,\r\n  //       [event.target.name]: '' // Clear the specific error associated with the field\r\n  //     }));\r\n  //   };\r\n\r\n  const handleSelectChange =\r\n    (\r\n      setter: React.Dispatch<React.SetStateAction<string>>,\r\n      fieldName: keyof AddAppUser\r\n    ) =>\r\n    (event: SelectChangeEvent<string>) => {\r\n      const selectedValue = event.target.value;\r\n\r\n      // Update the local state for the specific field (e.g., maritalStatus)\r\n      setter(selectedValue);\r\n\r\n      // Clear the error message for the selected field\r\n      setErrors((prevErrors) => ({\r\n        ...prevErrors,\r\n        [event.target.name]: '' // Clear the specific error associated with the field\r\n      }));\r\n\r\n      // Update the userInfo object with the new value for the selected field\r\n      // setUserInfo((prevUserInfo) => {\r\n      //   const updatedUserInfo = { ...prevUserInfo, [fieldName]: selectedValue };\r\n      //   return updatedUserInfo;\r\n      // });\r\n      setUserInfo((prevUserInfo) => ({\r\n        ...prevUserInfo,\r\n        [fieldName]: selectedValue // Update the specific field in userInfo\r\n      }));\r\n    };\r\n\r\n  const handleHeightChange = (event: SelectChangeEvent<string>) => {\r\n    const selectedValue = event.target.value;\r\n    setSelectedHeight(event.target.value);\r\n    setErrors((prevErrors) => ({ ...prevErrors, selectedHeight: '' }));\r\n\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      height: selectedValue // Assuming 'heightId' is the field in your userInfo\r\n    }));\r\n  };\r\n\r\n  const handleWeightChange = (event: SelectChangeEvent<string>) => {\r\n    const selectedValue = event.target.value;\r\n    setSelectedWeight(event.target.value);\r\n    setErrors((prevErrors) => ({ ...prevErrors, selectedWeight: '' }));\r\n\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      weight: selectedValue // Assuming 'heightId' is the field in your userInfo\r\n    }));\r\n  };\r\n\r\n  // const handleTextFieldChange =\r\n  //   (setter: React.Dispatch<React.SetStateAction<string>>) =>\r\n  //   (event: React.ChangeEvent<HTMLInputElement>) => {\r\n  //     setter(event.target.value);\r\n  //     setErrors((prev) => ({ ...prev, [event.target.name]: '' }));\r\n  //   };\r\n\r\n  const handleTextFieldChange =\r\n    (setter: React.Dispatch<React.SetStateAction<string>>) =>\r\n    (event: React.ChangeEvent<HTMLInputElement>) => {\r\n      // Limit the input to 200 words\r\n      const inputValue = event.target.value;\r\n      const words = inputValue.trim().split(/\\s+/);\r\n      const limitedValue =\r\n        words.length > 200 ? words.slice(0, 200).join(' ') : inputValue;\r\n\r\n      setter(limitedValue);\r\n      setErrors((prev) => ({ ...prev, [event.target.name]: '' }));\r\n\r\n      setUserInfo((prevUserInfo) => ({\r\n        ...prevUserInfo,\r\n        aboutMe: inputValue // Assuming 'heightId' is the field in your userInfo\r\n      }));\r\n    };\r\n\r\n  useEffect(() => {\r\n    debugger;\r\n    if (martialStatus !== 2 && martialStatus !== 4) {\r\n      // Reset the child-related fields when marital status is not Widow or Divorce\r\n      setHasChildren('');\r\n      setNumberOfChildren('');\r\n    }\r\n  }, [martialStatus]);\r\n\r\n  // const handleHasChildrenChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n  //   setHasChildren(event.target.value);\r\n  //   setNumberOfChildren(''); // Reset number of children if the choice changes\r\n  // };\r\n\r\n  const handleHasChildrenChange = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    const value = event.target.value;\r\n    setHasChildren(value);\r\n    if (value !== '1') {\r\n      setNumberOfChildren(''); // Reset number of children if not \"yes\"\r\n    }\r\n    setErrors((prev) => ({ ...prev, [event.target.name]: '' }));\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      haveChildren: value // Assuming 'heightId' is the field in your userInfo\r\n    }));\r\n  };\r\n\r\n  const handleNumberOfChildrenChange = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    const value = event.target.value;\r\n    setNumberOfChildren(event.target.value);\r\n    setErrors((prev) => ({ ...prev, [event.target.name]: '' }));\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      noOfChildren: value // Assuming 'heightId' is the field in your userInfo\r\n    }));\r\n  };\r\n\r\n  // const handleSpecsLensesChange = (\r\n  //   event: React.ChangeEvent<HTMLInputElement>\r\n  // ) => {\r\n  //   setSpecsLenses(event.target.value);\r\n  //   setErrors((prev) => ({ ...prev, [event.target.name]: '' }));\r\n  // };\r\n\r\n  // const handleAnyDisabilityChange = (\r\n  //   event: React.ChangeEvent<HTMLInputElement>\r\n  // ) => {\r\n  //   setAnyDisability(event.target.value);\r\n  //   setErrors((prev) => ({ ...prev, [event.target.name]: '' }));\r\n  // };\r\n\r\n  // const handleSpecsLensesChange = (\r\n  //   event: React.ChangeEvent<HTMLInputElement>\r\n  // ) => {\r\n  //   const value = event.target.value === 'Yes' ? '1' : '2';\r\n  //   setSpecsLenses(value);\r\n  //   setErrors((prev) => ({ ...prev, [event.target.name]: '' }));\r\n  // };\r\n\r\n  // const handleAnyDisabilityChange = (\r\n  //   event: React.ChangeEvent<HTMLInputElement>\r\n  // ) => {\r\n  //   const value = event.target.value === 'Yes' ? '1' : '2';\r\n  //   setAnyDisability(value);\r\n  //   setErrors((prev) => ({ ...prev, [event.target.name]: '' }));\r\n  // };\r\n  const handleSpecsLensesChange = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    const value = event.target.value;\r\n    setSpecsLenses(value);\r\n    setErrors((prev) => ({ ...prev, [event.target.name]: '' }));\r\n\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      haveSpecs: value\r\n    }));\r\n  };\r\n\r\n  const handleAnyDisabilityChange = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    const value = event.target.value;\r\n    setAnyDisability(value);\r\n    setErrors((prev) => ({ ...prev, [event.target.name]: '' }));\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      anyDisability: value\r\n    }));\r\n  };\r\n\r\n  const handleLanguageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setLanguage(event.target.value);\r\n  };\r\n\r\n  // const handleAddLanguage = (lang: string) => {\r\n  //   if (!selectedLanguages.includes(lang)) {\r\n  //     setSelectedLanguages([...selectedLanguages, lang]);\r\n  //   }\r\n  //   setLanguage('');\r\n  // };\r\n\r\n  const handleAddLanguage = (lang: string) => {\r\n    if (!selectedLanguages.includes(lang)) {\r\n      const selectedValue = [...selectedLanguages, lang];\r\n      setSelectedLanguages(selectedValue);\r\n\r\n      setUserInfo((prevUserInfo) => ({\r\n        ...prevUserInfo,\r\n        language: selectedValue\r\n      }));\r\n\r\n      // Clear the error for the language field if it exists\r\n      setErrors((prevErrors) => ({\r\n        ...prevErrors,\r\n        selectedLanguages: '' // Remove the error message\r\n      }));\r\n    }\r\n    setLanguage('');\r\n  };\r\n\r\n  const handleRemoveLanguage = (langToRemove: string) => {\r\n    const selectedValue = selectedLanguages.filter(\r\n      (lang) => lang !== langToRemove\r\n    );\r\n    setSelectedLanguages(selectedValue);\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      language: selectedValue\r\n    }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (userInfo.language) {\r\n      setSelectedLanguages(userInfo.language);\r\n    }\r\n  }, [userInfo.language]);\r\n\r\n  const handleLanguageInputKeyDown = (\r\n    event: React.KeyboardEvent<HTMLInputElement>\r\n  ) => {\r\n    if (event.key === 'Enter' && language) {\r\n      handleAddLanguage(language);\r\n      event?.preventDefault(); // Prevent form submission on Enter\r\n    }\r\n  };\r\n\r\n  // Filter suggestions based on user input\r\n  const filteredLanguages = configData.languages.filter((lang: string) =>\r\n    lang.toLowerCase().includes(language.toLowerCase())\r\n  );\r\n\r\n  // Validate the form fields\r\n  const validateForm = () => {\r\n    let valid = true;\r\n    const newErrors: { [key: string]: string } = {};\r\n\r\n    if (!martialStatus) {\r\n      newErrors.martialStatus = 'Marital status is required';\r\n      valid = false;\r\n    }\r\n    if ((martialStatus == '2' || martialStatus == '4') && !hasChildren) {\r\n      newErrors.hasChildren = 'Do you have children is required';\r\n      valid = false;\r\n    }\r\n    if (hasChildren === '1' && !numberOfChildren) {\r\n      newErrors.numberOfChildren = 'No. of children is required';\r\n      valid = false;\r\n    }\r\n    if (!selectedHeight) {\r\n      newErrors.selectedHeight = 'Height is required';\r\n      valid = false;\r\n    }\r\n    if (!selectedWeight) {\r\n      newErrors.selectedWeight = 'Weight is required';\r\n      valid = false;\r\n    }\r\n    if (!specsLenses) {\r\n      newErrors.specsLenses = 'Specs/Lenses is required';\r\n      valid = false;\r\n    }\r\n    if (!anyDisability) {\r\n      newErrors.anyDisability = 'Disability status is required';\r\n      valid = false;\r\n    }\r\n    if (!bloodGroup) {\r\n      newErrors.bloodGroup = 'Blood group is required';\r\n      valid = false;\r\n    }\r\n    if (!complexion) {\r\n      newErrors.complexion = 'Complexion is required';\r\n      valid = false;\r\n    }\r\n    if (!bodyType) {\r\n      newErrors.bodyType = 'Body type is required';\r\n      valid = false;\r\n    }\r\n\r\n    // if (!selectedLanguages) {\r\n    //   newErrors.selectedLanguages = 'Language is required';\r\n    //   valid = false;\r\n    // }\r\n\r\n    // It is array so check validation using length\r\n\r\n    if (selectedLanguages.length === 0) {\r\n      newErrors.selectedLanguages = 'Language is required';\r\n      valid = false;\r\n    }\r\n\r\n    if (!eyeType) {\r\n      newErrors.eyeType = 'Eye type is required';\r\n      valid = false;\r\n    }\r\n    // if (!aboutYourself) {\r\n    //   newErrors.aboutYourself = 'AboutYourself is required';\r\n    //   valid = false;\r\n    // }\r\n\r\n    if (!aboutYourself.trim()) {\r\n      newErrors.aboutYourself = 'About Yourself is required';\r\n      valid = false;\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return valid;\r\n  };\r\n  let isEdit;\r\n  isEdit = localStorage.getItem('isEdit');\r\n  const handleNext = async () => {\r\n    if (validateForm()) {\r\n      // if(isEdit === \"false\"){\r\n      // Retrieve user data from localStorage\r\n      const userId = localStorage.getItem('userId');\r\n      const newToken = localStorage.getItem('newToken');\r\n      const rtoken = localStorage.getItem('rtoken');\r\n\r\n      // if (!userId || !newToken || !rtoken) {\r\n      //   setApiError('User information is missing.');\r\n      //   return;\r\n      // }\r\n      const token = localStorage.getItem('newToken');\r\n      // Prepare data for Step 3 API call\r\n      const step3Data = {\r\n        id: userId,\r\n        screenNumber: 3,\r\n        maritalStatusId: userInfo.maritalStatusId,\r\n        haveChildren: userInfo.haveChildren || null,\r\n        noOfChildren: userInfo.noOfChildren || null,\r\n        heightId: userInfo.height,\r\n        weightId: userInfo.weight,\r\n        haveSpecs: userInfo.haveSpecs,\r\n        anyDisability: userInfo.anyDisability,\r\n        bloodGroup: userInfo.bloodGroup,\r\n        complexion: userInfo.complexion,\r\n        bodyType: userInfo.bodyType,\r\n        eyeColor: userInfo.eyeColor,\r\n        languages: userInfo.language, // Convert array to comma-separated string\r\n        aboutMe: userInfo.aboutMe,\r\n        // token: localStorage.getItem('newToken')\r\n        token: token,\r\n        ...(token ? {} : { userId: userId })\r\n      };\r\n\r\n      try {\r\n        // Call completeUserProfileV2 for Step 3\r\n        const step3Response = await fetch(\r\n          '/api/admin/users/completeUserProfileV2',\r\n          {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              Authorization: `MatrimonyAndroid|Bearer ${newToken}`,\r\n              refreshtoken: `${rtoken}`\r\n            },\r\n            body: JSON.stringify(step3Data)\r\n          }\r\n        );\r\n\r\n        if (!step3Response.ok)\r\n          throw new Error('Failed to update profile with Step 3 data');\r\n\r\n        // Handle successful response\r\n        setApiResponse('Profile updated successfully for Step 3');\r\n        onNext(); // Move to next step\r\n      } catch (error) {\r\n        // Handle API error\r\n        setApiError(error.message);\r\n      }\r\n      // }else{\r\n      //   onNext();\r\n      // }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      {cred.isDemoUser > 0 && <SnackbarComponent />}\r\n      <Card className=\"container\">\r\n        {/* Title */}\r\n        <Typography variant=\"h3\" className=\"title\">\r\n          {currentTitle}\r\n        </Typography>\r\n\r\n        {/* Progress Bar */}\r\n        <Box className=\"progress-bar-container\">\r\n          <Box className=\"progress-bar\" style={{ width: progressBarLength }} />\r\n        </Box>\r\n\r\n        <Box sx={{ width: '100%', mb: 2, p: 4 }}>\r\n          <Grid container spacing={3}>\r\n            {/* Martial Status */}\r\n            {/* <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Marital Status *</FormLabel>\r\n                <Select\r\n                  name=\"martialStatus\"\r\n                  value={martialStatus}\r\n                  onChange={handleSelectChange(setMartialStatus)}\r\n                  size=\"small\"\r\n                  displayEmpty\r\n                >\r\n                  <MenuItem value=\"\" disabled>\r\n                    Please select your marital status\r\n                  </MenuItem>\r\n                  {configData.maritalStatus.map((status: any) => (\r\n                    <MenuItem key={status.id} value={status.id}>\r\n                      {status.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {errors.martialStatus && (\r\n                  <Typography color=\"error\">{errors.martialStatus}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid> */}\r\n\r\n            {/* <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Marital Status *</FormLabel>\r\n                <Select\r\n                  name=\"martialStatus\"\r\n                  value={martialStatus}\r\n                  onChange={handleSelectChange(setMartialStatus)}\r\n                  size=\"small\"\r\n                  displayEmpty\r\n                >\r\n                  <MenuItem value=\"\" disabled>\r\n                    Please select your marital status\r\n                  </MenuItem>\r\n                  {configData.maritalStatus\r\n                    .filter(\r\n                      (status: any) =>\r\n                        status.name !== 'Married' && status.name !== 'Engaged'\r\n                    )\r\n                    .map((status: any) => (\r\n                      <MenuItem key={status.id} value={status.id}>\r\n                        {status.name}\r\n                      </MenuItem>\r\n                    ))}\r\n                </Select>\r\n                {errors.martialStatus && (\r\n                  <Typography color=\"error\">{errors.martialStatus}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid> */}\r\n\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Marital Status *</FormLabel>\r\n                <Select\r\n                  name=\"martialStatus\"\r\n                  value={martialStatus}\r\n                  // onChange={handleSelectChange(setMartialStatus)}\r\n                  onChange={handleSelectChange(\r\n                    setMartialStatus,\r\n                    'maritalStatusId'\r\n                  )}\r\n                  size=\"small\"\r\n                  displayEmpty\r\n                >\r\n                  <MenuItem value=\"\" disabled>\r\n                    Please select your marital status\r\n                  </MenuItem>\r\n                  {configData.maritalStatus\r\n                    .filter((status: any) => {\r\n                      if (isEdit == 'false') {\r\n                        return (\r\n                          status.name !== 'Married' && status.name !== 'Engaged'\r\n                        );\r\n                      }\r\n                      return true; // Include all statuses if isEdit is \"true\"\r\n                    })\r\n                    .map((status: any) => (\r\n                      <MenuItem key={status.id} value={status.id}>\r\n                        {status.name}\r\n                      </MenuItem>\r\n                    ))}\r\n                </Select>\r\n                {errors.martialStatus && (\r\n                  <Typography color=\"error\">{errors.martialStatus}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            {(martialStatus == '2' || martialStatus == '4') && ( // Conditionally render for Widow or Divorce\r\n              <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                  <FormLabel>Do you have children? *</FormLabel>\r\n                  <RadioGroup\r\n                    name=\"hasChildren\"\r\n                    value={hasChildren}\r\n                    onChange={handleHasChildrenChange}\r\n                    row\r\n                  >\r\n                    <FormControlLabel\r\n                      value={1}\r\n                      control={<Radio />}\r\n                      label=\"Yes\"\r\n                    />\r\n                    <FormControlLabel\r\n                      value={2}\r\n                      control={<Radio />}\r\n                      label=\"Yes, if they live separate\"\r\n                    />\r\n                    <FormControlLabel\r\n                      value={3}\r\n                      control={<Radio />}\r\n                      label=\"No\"\r\n                    />\r\n                  </RadioGroup>\r\n                  {errors.hasChildren && (\r\n                    <Typography color=\"error\">{errors.hasChildren}</Typography>\r\n                  )}\r\n                </FormControl>\r\n              </Grid>\r\n            )}\r\n\r\n            {hasChildren == '1' && (\r\n              <Grid item xs={6}>\r\n                <FormLabel>Number of Children *</FormLabel>\r\n                <TextField\r\n                  value={numberOfChildren}\r\n                  onChange={handleNumberOfChildrenChange}\r\n                  size=\"small\"\r\n                  fullWidth\r\n                  name=\"numberOfChildren\" // Ensure this matches the error key\r\n                  // multiline\r\n                  // rows={4} // Adjust rows to fit your design\r\n                  placeholder=\"Enter no. of children\"\r\n                />\r\n                {errors.numberOfChildren && (\r\n                  <Typography color=\"error\">\r\n                    {errors.numberOfChildren}\r\n                  </Typography>\r\n                )}\r\n              </Grid>\r\n            )}\r\n\r\n            {/* Height */}\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Height (in cm) *</FormLabel>\r\n                <Select\r\n                  labelId=\"height-label\"\r\n                  name=\"height\"\r\n                  value={selectedHeight}\r\n                  onChange={handleHeightChange}\r\n                  size=\"small\"\r\n                  displayEmpty\r\n                >\r\n                  <MenuItem value=\"\" disabled>\r\n                    Please select your height\r\n                  </MenuItem>\r\n                  {/* {height.length > 0 ? (\r\n                    height.map((item) => (\r\n                      <MenuItem key={item.id} value={item.name}>\r\n                        {item.name}\r\n                      </MenuItem>\r\n                    ))\r\n                  ) : (\r\n                    <MenuItem disabled>No Height Data</MenuItem>\r\n                  )} */}\r\n                  {height.map((item) => (\r\n                    <MenuItem key={item.id} value={item.id}>\r\n                      {item.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {errors.selectedHeight && (\r\n                  <Typography color=\"error\">{errors.selectedHeight}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Weight (in Kg) *</FormLabel>\r\n                <Select\r\n                  labelId=\"weight-label\"\r\n                  name=\"weight\"\r\n                  value={selectedWeight}\r\n                  onChange={handleWeightChange}\r\n                  size=\"small\"\r\n                  displayEmpty\r\n                >\r\n                  <MenuItem value=\"\" disabled>\r\n                    Please select your weight\r\n                  </MenuItem>\r\n                  {weight.length > 0 ? (\r\n                    weight.map((item) => (\r\n                      <MenuItem key={item.id} value={item.name}>\r\n                        {item.name}\r\n                      </MenuItem>\r\n                    ))\r\n                  ) : (\r\n                    <MenuItem disabled>No Weight Data</MenuItem>\r\n                  )}\r\n                </Select>\r\n                {errors.selectedWeight && (\r\n                  <Typography color=\"error\">{errors.selectedWeight}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            {/* Specs/Lenses */}\r\n            {/* <Grid item xs={3}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Specs/Lenses *</FormLabel>\r\n                <RadioGroup\r\n                  name=\"specsLenses\"\r\n                  value={specsLenses}\r\n                  onChange={handleSpecsLensesChange}\r\n                  row\r\n                >\r\n                  <FormControlLabel\r\n                    value=\"Yes\"\r\n                    control={<Radio />}\r\n                    label=\"Yes\"\r\n                  />\r\n                  <FormControlLabel value=\"No\" control={<Radio />} label=\"No\" />\r\n                </RadioGroup>\r\n                {errors.specsLenses && (\r\n                  <Typography color=\"error\">{errors.specsLenses}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid> */}\r\n\r\n            <Grid item xs={3}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Specs/Lenses *</FormLabel>\r\n                <RadioGroup\r\n                  name=\"specsLenses\"\r\n                  value={specsLenses} // Convert 1/2 to Yes/No\r\n                  onChange={handleSpecsLensesChange}\r\n                  row\r\n                >\r\n                  <FormControlLabel value={1} control={<Radio />} label=\"Yes\" />\r\n                  <FormControlLabel value={2} control={<Radio />} label=\"No\" />\r\n                </RadioGroup>\r\n                {errors.specsLenses && (\r\n                  <Typography color=\"error\">{errors.specsLenses}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            {/* Any Disability */}\r\n            {/* <Grid item xs={3}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Any Disability *</FormLabel>\r\n                <RadioGroup\r\n                  name=\"anyDisability\"\r\n                  value={anyDisability}\r\n                  onChange={handleAnyDisabilityChange}\r\n                  row\r\n                >\r\n                  <FormControlLabel\r\n                    value=\"Yes\"\r\n                    control={<Radio />}\r\n                    label=\"Yes\"\r\n                  />\r\n                  <FormControlLabel value=\"No\" control={<Radio />} label=\"No\" />\r\n                </RadioGroup>\r\n                {errors.anyDisability && (\r\n                  <Typography color=\"error\">{errors.anyDisability}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid> */}\r\n\r\n            <Grid item xs={3}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Any Disability *</FormLabel>\r\n                <RadioGroup\r\n                  name=\"anyDisability\"\r\n                  value={anyDisability} // Convert 1/2 to Yes/No\r\n                  onChange={handleAnyDisabilityChange}\r\n                  row\r\n                >\r\n                  <FormControlLabel value={1} control={<Radio />} label=\"Yes\" />\r\n                  <FormControlLabel value={2} control={<Radio />} label=\"No\" />\r\n                </RadioGroup>\r\n                {errors.anyDisability && (\r\n                  <Typography color=\"error\">{errors.anyDisability}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            {/* Blood Group */}\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Blood Group *</FormLabel>\r\n                <Select\r\n                  name=\"bloodGroup\"\r\n                  value={bloodGroup}\r\n                  onChange={handleSelectChange(setBloodGroup, 'bloodGroup')}\r\n                  size=\"small\"\r\n                  displayEmpty\r\n                >\r\n                  <MenuItem value=\"\" disabled>\r\n                    Please select your blood group\r\n                  </MenuItem>\r\n                  {configData.bloodGroupList.map((group: string) => (\r\n                    <MenuItem key={group} value={group}>\r\n                      {group}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {errors.bloodGroup && (\r\n                  <Typography color=\"error\">{errors.bloodGroup}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            {/* Complexion */}\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Complexion *</FormLabel>\r\n                <Select\r\n                  name=\"complexion\"\r\n                  value={complexion}\r\n                  onChange={handleSelectChange(setComplexion, 'complexion')}\r\n                  size=\"small\"\r\n                  displayEmpty\r\n                >\r\n                  <MenuItem value=\"\" disabled>\r\n                    Please select your complexion\r\n                  </MenuItem>\r\n                  {configData.complexionList.map((item: any) => (\r\n                    <MenuItem key={item.id} value={item.name}>\r\n                      {item.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {errors.complexion && (\r\n                  <Typography color=\"error\">{errors.complexion}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            {/* Body Type */}\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Body Type *</FormLabel>\r\n                <Select\r\n                  name=\"bodyType\"\r\n                  value={bodyType}\r\n                  onChange={handleSelectChange(setBodyType, 'bodyType')}\r\n                  size=\"small\"\r\n                  displayEmpty\r\n                >\r\n                  <MenuItem value=\"\" disabled>\r\n                    Please select your body type\r\n                  </MenuItem>\r\n                  {configData.bodyTypesList.map((type: any) => (\r\n                    <MenuItem key={type.id} value={type.name}>\r\n                      {type.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {errors.bodyType && (\r\n                  <Typography color=\"error\">{errors.bodyType}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Language Known *</FormLabel>\r\n\r\n                <TextField\r\n                  value={language}\r\n                  onChange={handleLanguageChange}\r\n                  onKeyDown={handleLanguageInputKeyDown}\r\n                  placeholder=\"e.g English, Hindi\"\r\n                  size=\"small\"\r\n                />\r\n\r\n                {language && (\r\n                  <Box>\r\n                    {filteredLanguages.map((lang: string) => (\r\n                      <Chip\r\n                        key={lang}\r\n                        label={lang}\r\n                        onClick={() => handleAddLanguage(lang)}\r\n                        style={{ margin: '2px' }}\r\n                      />\r\n                    ))}\r\n                  </Box>\r\n                )}\r\n\r\n                <Box mt={1}>\r\n                  {selectedLanguages.map((lang: string) => (\r\n                    <Chip\r\n                      key={lang}\r\n                      label={lang}\r\n                      onDelete={() => handleRemoveLanguage(lang)}\r\n                      color=\"primary\"\r\n                      style={{ margin: '2px' }}\r\n                    />\r\n                  ))}\r\n                </Box>\r\n\r\n                {errors.selectedLanguages && (\r\n                  <Typography color=\"error\">\r\n                    {errors.selectedLanguages}\r\n                  </Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Eye Color *</FormLabel>\r\n                <Select\r\n                  name=\"eyeType\"\r\n                  value={eyeType}\r\n                  onChange={handleSelectChange(setEyeType, 'eyeColor')}\r\n                  size=\"small\"\r\n                  displayEmpty\r\n                >\r\n                  <MenuItem value=\"\" disabled>\r\n                    Please select your eye color\r\n                  </MenuItem>\r\n                  {configData.eyeTypesList.map((eyeType: string) => (\r\n                    <MenuItem key={eyeType} value={eyeType}>\r\n                      {eyeType}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {errors.eyeType && (\r\n                  <Typography color=\"error\">{errors.eyeType}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n              <FormLabel>About Yourself *</FormLabel>\r\n              <TextField\r\n                value={aboutYourself}\r\n                onChange={handleTextFieldChange(setAboutYourself)}\r\n                size=\"small\"\r\n                fullWidth\r\n                name=\"aboutYourself\" // Ensure this matches the error key\r\n                multiline\r\n                rows={4} // Adjust rows to fit your design\r\n              />\r\n              {errors.aboutYourself && (\r\n                <Typography color=\"error\">{errors.aboutYourself}</Typography>\r\n              )}\r\n            </Grid>\r\n            {apiResponse && (\r\n              <Typography color=\"success\">{apiResponse}</Typography>\r\n            )}\r\n            {apiError && <Typography color=\"error\">{apiError}</Typography>}\r\n          </Grid>\r\n        </Box>\r\n\r\n        {/* Buttons */}\r\n        <Box className=\"navigation-buttons\">\r\n          <Button variant=\"contained\" onClick={onBack}>\r\n            Back\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={cred.isDemoUser == '1' ? onNext : handleNext}\r\n          >\r\n            Next\r\n          </Button>\r\n        </Box>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Step3;\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  Typography,\r\n  FormControl,\r\n  FormLabel,\r\n  Select,\r\n  MenuItem,\r\n  Grid,\r\n  SelectChangeEvent,\r\n  Typography as MuiTypography\r\n} from '@mui/material';\r\nimport '../addAppUser.css';\r\nimport { AddAppUser } from 'src/models/addappuser';\r\nimport { useSnackbar } from 'src/content/useSnackbar';\r\n\r\ninterface Step4Props {\r\n  title: { id: number; name: string }[];\r\n  progressBarLength: string;\r\n  onBack: () => void;\r\n  onNext: () => void;\r\n  configData: any;\r\n  currentStepId: number;\r\n  userInfo: any; // Add userInfo prop to access the global state\r\n  setUserInfo: (userInfo: any) => void;\r\n}\r\n\r\nconst Step4: React.FC<Step4Props> = ({\r\n  title,\r\n  progressBarLength,\r\n  onBack,\r\n  onNext,\r\n  configData,\r\n  currentStepId,\r\n  userInfo,\r\n  setUserInfo\r\n}) => {\r\n  const [religion, setReligion] = useState<{ id: number; name: string }[]>([]);\r\n  const [selectedReligion, setSelectedReligion] = useState(\r\n    userInfo.religion || ''\r\n  );\r\n  const [community, setCommunity] = useState<\r\n    { id: number; name: string; religionId: number }[]\r\n  >([]);\r\n  const [selectedCommunity, setSelectedCommunity] = useState(\r\n    userInfo.community || ''\r\n  );\r\n  const [subcommunity, setSubCommunity] = useState<\r\n    { id: number; name: string; communityId: number }[]\r\n  >([]);\r\n  const [selectedSubCommunity, setSelectedSubCommunity] = useState(\r\n    userInfo.subCommunity || ''\r\n  );\r\n  const [motherTounge, setmotherTounge] = useState<string>(\r\n    userInfo.motherTongue || ''\r\n  );\r\n  const [apiResponse, setApiResponse] = React.useState<string | null>(null);\r\n  const [apiError, setApiError] = React.useState<string | null>(null);\r\n  const [errors, setErrors] = useState<{ [key: string]: string }>({});\r\n  const { showSnackBar, SnackbarComponent } = useSnackbar();\r\n\r\n  const currentTitle =\r\n    title.find((item) => item.id === currentStepId)?.name || '';\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await fetch('/api/app/users/getMasterData', {\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Fetched data:', data);\r\n\r\n      if (data && data.recordList) {\r\n        setReligion(data.recordList.religion || []);\r\n        setCommunity(data.recordList.community || []);\r\n        setSubCommunity(data.recordList.subCommunity || []);\r\n      } else {\r\n        console.error('Unexpected data format:', data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Filtered community based on selected religion\r\n  const [filteredCommunity, setFilteredCommunity] = useState<\r\n    { id: number; name: string }[]\r\n  >([]);\r\n  useEffect(() => {\r\n    if (selectedReligion) {\r\n      const religionId = religion.find((r) => r.name === selectedReligion)?.id;\r\n      if (religionId) {\r\n        const filtered = community.filter(\r\n          (comm) => comm.religionId === religionId\r\n        );\r\n        setFilteredCommunity(filtered);\r\n      } else {\r\n        setFilteredCommunity([]);\r\n      }\r\n    } else {\r\n      setFilteredCommunity([]);\r\n    }\r\n  }, [selectedReligion, religion, community]);\r\n\r\n  // Filtered subcommunity based on selected community\r\n  // const [filteredSubCommunity, setFilteredSubCommunity] = useState<{ id: number; name: string }[]>([]);\r\n  // useEffect(() => {\r\n  //   if (selectedCommunity) {\r\n  //     const communityId = community.find(comm => comm.name === selectedCommunity)?.id;\r\n  //     if (communityId) {\r\n  //       const filtered = subcommunity.filter(sub => sub.communityId === communityId);\r\n  //       setFilteredSubCommunity(filtered);\r\n  //     } else {\r\n  //       setFilteredSubCommunity([]);\r\n  //     }\r\n  //   } else {\r\n  //     setFilteredSubCommunity([]);\r\n  //   }\r\n  // }, [selectedCommunity, community, subcommunity]);\r\n\r\n  // State to store filtered subcommunity based on selected community\r\n  const [filteredSubCommunity, setFilteredSubCommunity] = useState<\r\n    { id: number; name: string }[]\r\n  >([]);\r\n\r\n  // Update the subcommunity state when the selected community changes\r\n  useEffect(() => {\r\n    if (selectedCommunity) {\r\n      const communityId = community.find(\r\n        (c) => c.name === selectedCommunity\r\n      )?.id;\r\n      if (communityId) {\r\n        const filtered = subcommunity.filter(\r\n          (sc) => sc.communityId === communityId\r\n        );\r\n        setFilteredSubCommunity(filtered);\r\n      } else {\r\n        setFilteredSubCommunity([]);\r\n      }\r\n    } else {\r\n      setFilteredSubCommunity([]);\r\n    }\r\n  }, [selectedCommunity, subcommunity, community]);\r\n\r\n  // const handleSelectChange =\r\n  //   (setter: React.Dispatch<React.SetStateAction<string>>) =>\r\n  //   (event: SelectChangeEvent<string>) => {\r\n  //     setter(event.target.value as string);\r\n  //     setErrors((prev) => ({ ...prev, [event.target.name]: '' }));\r\n  //   };\r\n\r\n  const handleSelectChange =\r\n    (\r\n      setter: React.Dispatch<React.SetStateAction<string>>,\r\n      fieldName: keyof AddAppUser\r\n    ) =>\r\n    (event: SelectChangeEvent<string>) => {\r\n      const selectedValue = event.target.value;\r\n\r\n      // Update the local state for the specific field (e.g., maritalStatus)\r\n      setter(selectedValue);\r\n\r\n      // Clear the error message for the selected field\r\n      setErrors((prevErrors) => ({\r\n        ...prevErrors,\r\n        [event.target.name]: '' // Clear the specific error associated with the field\r\n      }));\r\n\r\n      // Update the userInfo object with the new value for the selected field\r\n      // setUserInfo((prevUserInfo) => {\r\n      //   const updatedUserInfo = { ...prevUserInfo, [fieldName]: selectedValue };\r\n      //   return updatedUserInfo;\r\n      // });\r\n      setUserInfo((prevUserInfo) => ({\r\n        ...prevUserInfo,\r\n        [fieldName]: selectedValue // Update the specific field in userInfo\r\n      }));\r\n    };\r\n  let cred = JSON.parse(localStorage.getItem('Credentials')) as any;\r\n\r\n  // const validateForm = () => {\r\n  //   let valid = true;\r\n  //   const newErrors: { [key: string]: string } = {};\r\n\r\n  //   if (!selectedReligion) {\r\n  //     newErrors.religion = 'Religion is required';\r\n  //     valid = false;\r\n  //   }\r\n  //   if (!selectedCommunity) {\r\n  //     newErrors.community = 'Community is required';\r\n  //     valid = false;\r\n  //   }\r\n  //   // if (!selectedSubCommunity) {\r\n  //   //   newErrors.subcommunity = 'Sub community is required';\r\n  //   //   valid = false;\r\n  //   // }\r\n  //   if (filteredSubCommunity.length > 0 && !selectedSubCommunity) {\r\n  //     newErrors.subcommunity = 'Sub community is required';\r\n  //     valid = false;\r\n  //   }\r\n  //   if (!motherTounge) {\r\n  //     newErrors.motherTounge = 'Native Language is required';\r\n  //     valid = false;\r\n  //   }\r\n\r\n  //   setErrors(newErrors);\r\n  //   return valid;\r\n  // };\r\n\r\n  // const handleNext = () => {\r\n  //   if (validateForm()) {\r\n  //     onNext();\r\n  //   }\r\n  // };\r\n  let isEdit;\r\n  isEdit = localStorage.getItem('isEdit');\r\n  const handleNext = async () => {\r\n    if (validateForm()) {\r\n      // if(isEdit === \"false\"){\r\n      // Retrieve user data from localStorage\r\n      const userId = localStorage.getItem('userId');\r\n      const newToken = localStorage.getItem('newToken');\r\n      const rtoken = localStorage.getItem('rtoken');\r\n\r\n      // if (!userId || !newToken || !rtoken) {\r\n      //   setApiError('User information is missing.');\r\n      //   return;\r\n      // }\r\n      const token = localStorage.getItem('newToken');\r\n      // Prepare data for Step 4 API call\r\n      const step4Data = {\r\n        id: userId,\r\n        screenNumber: 4,\r\n        religionId:\r\n          religion.find((r) => r.name === userInfo.religion)?.id || null,\r\n        communityId:\r\n          community.find((c) => c.name === userInfo.community)?.id || null,\r\n        subCommunityId:\r\n          subcommunity.find((s) => s.name === userInfo.subCommunity)?.id ||\r\n          null,\r\n        motherTongue: userInfo.motherTongue,\r\n        // token: localStorage.getItem('newToken')\r\n        token: token,\r\n        ...(token ? {} : { userId: userId })\r\n      };\r\n\r\n      try {\r\n        // Call completeUserProfileV2 for Step 4\r\n        const step4Response = await fetch(\r\n          '/api/admin/users/completeUserProfileV2',\r\n          {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              Authorization: `MatrimonyAndroid|Bearer ${newToken}`,\r\n              refreshtoken: `${rtoken}`\r\n            },\r\n            body: JSON.stringify(step4Data)\r\n          }\r\n        );\r\n\r\n        if (!step4Response.ok)\r\n          throw new Error('Failed to update profile with Step 4 data');\r\n\r\n        // Handle successful response\r\n        setApiResponse('Profile updated successfully for Step 4');\r\n        onNext(); // Move to next step\r\n      } catch (error) {\r\n        // Handle API error\r\n        setApiError(error.message);\r\n      }\r\n      // }else{\r\n      //   onNext();\r\n      // }\r\n    }\r\n  };\r\n\r\n  // Form validation function for checking required fields\r\n  const validateForm = () => {\r\n    const newErrors: { [key: string]: string } = {};\r\n\r\n    if (!selectedReligion) {\r\n      newErrors.religion = 'Religion is required';\r\n    }\r\n    if (!selectedCommunity) {\r\n      newErrors.community = 'Community is required';\r\n    }\r\n    if (!motherTounge) {\r\n      newErrors.motherTounge = 'Mother tongue is required';\r\n    }\r\n    if (filteredSubCommunity.length > 0 && !selectedSubCommunity) {\r\n      newErrors.subCommunity = 'subcommunity is required';\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n  useEffect(() => {\r\n    if (cred?.isDemoUser) {\r\n      showSnackBar(\r\n        \"**Access Denied**\\nWe're sorry, but you do not have permission to access this feature.\"\r\n      );\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Box>\r\n      {cred.isDemoUser > 0 && <SnackbarComponent />}\r\n      <Card className=\"container\">\r\n        {/* Title */}\r\n        <Typography variant=\"h3\" className=\"title\">\r\n          {currentTitle}\r\n        </Typography>\r\n\r\n        {/* Progress Bar */}\r\n        <Box className=\"progress-bar-container\">\r\n          <Box className=\"progress-bar\" style={{ width: progressBarLength }} />\r\n        </Box>\r\n\r\n        {/* Dropdown Fields */}\r\n        <Grid container spacing={3}>\r\n          {/* Religion Dropdown */}\r\n          <Grid item xs={6}>\r\n            <FormControl fullWidth>\r\n              <FormLabel>Religion *</FormLabel>\r\n              <Select\r\n                name=\"religion\"\r\n                value={selectedReligion}\r\n                onChange={handleSelectChange(setSelectedReligion, 'religion')}\r\n                size=\"small\"\r\n                displayEmpty\r\n              >\r\n                <MenuItem value=\"\" disabled>\r\n                  Please select your religion\r\n                </MenuItem>\r\n\r\n                {religion.map((item) => (\r\n                  <MenuItem key={item.id} value={item.name}>\r\n                    {item.name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n              {errors.religion && (\r\n                <MuiTypography color=\"error\">{errors.religion}</MuiTypography>\r\n              )}\r\n            </FormControl>\r\n          </Grid>\r\n\r\n          {/* Community Dropdown */}\r\n          <Grid item xs={6}>\r\n            <FormControl fullWidth>\r\n              <FormLabel>Community *</FormLabel>\r\n              <Select\r\n                name=\"community\"\r\n                value={selectedCommunity}\r\n                onChange={handleSelectChange(setSelectedCommunity, 'community')}\r\n                size=\"small\"\r\n                displayEmpty\r\n              >\r\n                <MenuItem value=\"\" disabled>\r\n                  Please select your community\r\n                </MenuItem>\r\n                {filteredCommunity.map((item) => (\r\n                  <MenuItem key={item.id} value={item.name}>\r\n                    {item.name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n              {errors.community && (\r\n                <MuiTypography color=\"error\">{errors.community}</MuiTypography>\r\n              )}\r\n            </FormControl>\r\n          </Grid>\r\n\r\n          {filteredSubCommunity.length > 0 ? (\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Sub Community *</FormLabel>\r\n                <Select\r\n                  name=\"subCommunity\"\r\n                  value={selectedSubCommunity}\r\n                  onChange={handleSelectChange(\r\n                    setSelectedSubCommunity,\r\n                    'subCommunity'\r\n                  )}\r\n                  size=\"small\"\r\n                  displayEmpty\r\n                  //disabled={filteredSubCommunity.length === 0} // Disable if no options available\r\n                >\r\n                  <MenuItem value=\"\" disabled>\r\n                    Please select your sub community\r\n                  </MenuItem>\r\n                  {filteredSubCommunity.length > 0 ? (\r\n                    filteredSubCommunity.map((item) => (\r\n                      <MenuItem key={item.id} value={item.name}>\r\n                        {item.name}\r\n                      </MenuItem>\r\n                    ))\r\n                  ) : (\r\n                    <MenuItem disabled>No Sub Community Data</MenuItem>\r\n                  )}\r\n                </Select>\r\n                {errors.subCommunity && (\r\n                  <MuiTypography color=\"error\">\r\n                    {errors.subCommunity}\r\n                  </MuiTypography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n          ) : null}\r\n\r\n          {/* Mother Tongue Dropdown */}\r\n          <Grid item xs={6}>\r\n            <FormControl fullWidth>\r\n              <FormLabel>Mother Tounge *</FormLabel>\r\n              <Select\r\n                name=\"motherTounge\"\r\n                value={motherTounge}\r\n                onChange={handleSelectChange(setmotherTounge, 'motherTongue')}\r\n                size=\"small\"\r\n                displayEmpty\r\n              >\r\n                <MenuItem value=\"\" disabled>\r\n                  Please select your mother tounge\r\n                </MenuItem>\r\n                {configData.languages.map((lang: string) => (\r\n                  <MenuItem key={lang} value={lang}>\r\n                    {lang}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n              {errors.motherTounge && (\r\n                <MuiTypography color=\"error\">\r\n                  {errors.motherTounge}\r\n                </MuiTypography>\r\n              )}\r\n            </FormControl>\r\n          </Grid>\r\n          {apiResponse && (\r\n            <Typography color=\"success\">{apiResponse}</Typography>\r\n          )}\r\n          {apiError && <Typography color=\"error\">{apiError}</Typography>}\r\n        </Grid>\r\n\r\n        {/* Navigation Buttons */}\r\n        <Box className=\"navigation-buttons\">\r\n          <Button variant=\"contained\" onClick={onBack}>\r\n            Back\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={cred.isDemoUser == '1' ? onNext : handleNext}\r\n          >\r\n            Next\r\n          </Button>\r\n        </Box>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Step4;\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  Typography,\r\n  Grid,\r\n  FormControl,\r\n  FormLabel,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  Radio,\r\n  TextField,\r\n  Select,\r\n  MenuItem,\r\n  SelectChangeEvent\r\n} from '@mui/material';\r\nimport '../addAppUser.css';\r\nimport { AddAppUser, FamilyMemberDetailModel } from 'src/models/addappuser';\r\nimport { useSnackbar } from 'src/content/useSnackbar';\r\n\r\ninterface Step5Props {\r\n  title: { id: number; name: string }[];\r\n  progressBarLength: string;\r\n  onBack: () => void;\r\n  onNext: () => void;\r\n  configData: any;\r\n  currentStepId: number;\r\n  userInfo: any; // Add userInfo prop to access the global state\r\n  setUserInfo: (userInfo: any) => void;\r\n}\r\n\r\nconst Step5: React.FC<Step5Props> = ({\r\n  title,\r\n  progressBarLength,\r\n  onBack,\r\n  onNext,\r\n  configData,\r\n  currentStepId,\r\n  userInfo,\r\n  setUserInfo\r\n}) => {\r\n  const [familyType, setFamilyType] = useState<string>(\r\n    userInfo.familyType || ''\r\n  );\r\n  const [fatherStatus, setFatherStatus] = useState<string>(\r\n    userInfo?.fatherDetails?.isAlive || ''\r\n  );\r\n  const [fatherName, setFatherName] = useState<string>(\r\n    userInfo?.fatherDetails?.name || ''\r\n  );\r\n  const [fatherId, setFatherId] = useState<string>();\r\n  const [motherId, setMotherId] = useState<string>();\r\n  const [otherId, setOtherId] = useState<string>();\r\n\r\n  const [fatherEducation, setFatherEducation] = useState<\r\n    { id: number; name: string }[]\r\n  >([]);\r\n  const [selectedFatherEducation, setselectedFatherEducation] = useState(\r\n    userInfo?.fatherDetails?.educationId || ''\r\n  );\r\n  // const [fatherPost, setFatherPost] = useState<string>('');\r\n  const [fatherPost, setFatherPost] = useState<{ id: number; name: string }[]>(\r\n    []\r\n  );\r\n  const [selectedFatherPost, setselectedFatherPost] = useState(\r\n    userInfo?.fatherDetails?.occupationId || ''\r\n  );\r\n  const [motherStatus, setMotherStatus] = useState<string>(\r\n    userInfo?.motherDetails?.isAlive || ''\r\n  );\r\n  const [motherName, setMotherName] = useState<string>(\r\n    userInfo?.motherDetails?.name || ''\r\n  );\r\n  // const [motherEducation, setMotherEducation] = useState<string>('');\r\n  const [motherEducation, setMotherEducation] = useState<\r\n    { id: number; name: string }[]\r\n  >([]);\r\n  const [selectedMotherEducation, setselectedMotherEducation] = useState(\r\n    userInfo?.motherDetails?.educationId || ''\r\n  );\r\n  // const [motherPost, setMotherPost] = useState<string>('');\r\n  const [motherPost, setMotherPost] = useState<{ id: number; name: string }[]>(\r\n    []\r\n  );\r\n  const [selectedMotherPost, setselectedMotherPost] = useState(\r\n    userInfo?.motherDetails?.occupationId || ''\r\n  );\r\n  const [otherPost, setOtherPost] = useState<{ id: number; name: string }[]>(\r\n    []\r\n  );\r\n  const [otherEducation, setOtherEducation] = useState<\r\n    { id: number; name: string }[]\r\n  >([]);\r\n  const [familyTypes, setFamilyTypes] = useState<\r\n    { type: string; subTypes: string[] }[]\r\n  >([]);\r\n  const [subTypes, setSubTypes] = useState<string[]>([]);\r\n  // const [selectedFamilyType, setSelectedFamilyType] = useState<string>('');\r\n  // const [selectedSubType, setSelectedSubType] = useState<string>('');\r\n  // const [selectedOtherEducation, setSelectedOtherEducation] = useState('');\r\n  // const [selectedOtherPost, setSelectedOtherPost] = useState('');\r\n  // const [martialStatus, setMartialStatus] = useState<string>('');\r\n  const [fieldData, setFieldData] = useState<\r\n    | {\r\n        id: number;\r\n        educationType: string;\r\n        occupationType: string;\r\n        maritalStatusType: string;\r\n        familyType: string;\r\n        selectedSubType: string;\r\n        name: string;\r\n      }[]\r\n    | any\r\n  >([]);\r\n  const [apiResponse, setApiResponse] = React.useState<string | null>(null);\r\n  const [apiError, setApiError] = React.useState<string | null>(null);\r\n  const [errors, setErrors] = useState<{ [key: string]: string }>({});\r\n  const [isFamilyLength, setIsFamilyLength] = useState<boolean>(false);\r\n  const { showSnackBar, SnackbarComponent } = useSnackbar();\r\n\r\n  console.log('userInfo data------>', userInfo);\r\n\r\n  const currentTitle =\r\n    title.find((item) => item?.id === currentStepId)?.name || '';\r\n\r\n    let cred = (JSON.parse(localStorage.getItem('Credentials')) as any);\r\n  const fetchData = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await fetch('/api/app/users/getMasterData', {\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      if (data && data.recordList) {\r\n        setFatherEducation(data.recordList.education || []);\r\n        setMotherEducation(data.recordList.education || []);\r\n        setFatherPost(data.recordList.occupation || []);\r\n        setMotherPost(data.recordList.occupation || []);\r\n        setOtherPost(data.recordList.occupation || []);\r\n        setOtherEducation(data.recordList.education || []);\r\n      } else {\r\n        console.error('Unexpected data format:', data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (userInfo?.familyDetail?.length) {\r\n      setFieldData(userInfo.familyDetail);\r\n    }\r\n  }, [userInfo]);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (configData.familyTypes) {\r\n      setFamilyTypes(configData.familyTypes);\r\n    }\r\n  }, [configData]);\r\n\r\n  useEffect(() => {\r\n    const selectedFamilyType = fieldData\r\n      .map((family) =>\r\n        configData?.familyTypes.find((data) => data?.type == family?.memberType)\r\n      )\r\n      ?.map((data) => data?.subTypes);\r\n\r\n    setSubTypes(selectedFamilyType.flat());\r\n  }, []);\r\n\r\n  const validateFields = () => {\r\n    let newErrors: { [key: string]: string } = {};\r\n\r\n    // Basic Fields Validation\r\n    if (!familyType) newErrors.familyType = 'Family Type is required.';\r\n    if (!fatherStatus) newErrors.fatherStatus = \"Father's status is required.\";\r\n    if (!motherStatus) newErrors.motherStatus = \"Mother's status is required.\";\r\n    if (!fatherName) newErrors.fatherName = \"Father's Name is required.\";\r\n    if (!selectedFatherEducation)\r\n      newErrors.fatherEducation = \"Father's Education is required.\";\r\n    if (!selectedFatherPost)\r\n      newErrors.fatherPost = \"Father's Post is required.\";\r\n    if (!motherName) newErrors.motherName = \"Mother's Name is required.\";\r\n    if (!selectedMotherEducation)\r\n      newErrors.motherEducation = \"Mother's Education is required.\";\r\n    if (!selectedMotherPost)\r\n      newErrors.motherPost = \"Mother's Post is required.\";\r\n\r\n    // Field Data Validation (Dynamic Fields)\r\n    fieldData.forEach((field, index) => {\r\n      if (!field.educationId) {\r\n        newErrors[`educationType_${index}`] = 'Education Degree is required.';\r\n      }\r\n      if (!field.occupationId) {\r\n        newErrors[`occupationType_${index}`] = 'Profession is required.';\r\n      }\r\n      if (!field.maritalStatusId) {\r\n        newErrors[`maritalStatusType_${index}`] = 'Marital Status is required.';\r\n      }\r\n      if (!field.memberType) {\r\n        newErrors[`familyType_${index}`] = 'Family Type is required.';\r\n      }\r\n      if (!field.memberSubType) {\r\n        newErrors[`subType_${index}`] = 'Sub Type is required.';\r\n      }\r\n      if (!field.name) {\r\n        newErrors[`name_${index}`] = 'Name is required.';\r\n      }\r\n    });\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  let isEdit;\r\n  isEdit = localStorage.getItem('isEdit');\r\n  const handleNext = async () => {\r\n    if (validateFields()) {\r\n      // if(isEdit === \"false\"){\r\n      // Retrieve user data from localStorage\r\n      const userId = localStorage.getItem('userId');\r\n      const newToken = localStorage.getItem('newToken');\r\n      const rtoken = localStorage.getItem('rtoken');\r\n\r\n      // if (!userId || !newToken || !rtoken) {\r\n      //   setApiError('User information is missing.');\r\n      //   return;\r\n      // }\r\n      const token = localStorage.getItem('newToken');\r\n      // Prepare data for Step 5 API call\r\n      const step5Data = {\r\n        id: userId,\r\n        screenNumber: 5,\r\n        familyType: userInfo.familyType,\r\n        token: token,\r\n        ...(token ? {} : { userId: userId }),\r\n        fatherDetails: {\r\n          id: userInfo.fatherDetails?.id || '', // Adjust this if you need to handle existing records\r\n          name: userInfo?.fatherDetails?.name || '',\r\n          memberType: familyType,\r\n          memberSubType: 'Father',\r\n          educationId: userInfo?.fatherDetails?.educationId || '',\r\n          // fatherEducation.find(\r\n          //   (e) => e.name === userInfo?.fatherDetails?.educationId\r\n          // )?.id || null,\r\n          occupationId: userInfo?.fatherDetails?.occupationId,\r\n          // fatherPost.find(\r\n          //   (o) => o.name === userInfo?.fatherDetails?.occupationId\r\n          // )?.id || null,\r\n          maritalStatusId: null, // Adjust as needed\r\n          isAlive: userInfo?.fatherDetails?.isAlive\r\n        },\r\n        motherDetails: {\r\n          id: userInfo?.motherDetails?.id || '', // Adjust this if you need to handle existing records\r\n          name: userInfo?.motherDetails?.name || '',\r\n          memberType: familyType,\r\n          memberSubType: 'Mother',\r\n          educationId: userInfo?.motherDetails?.educationId || '',\r\n          // motherEducation.find(\r\n          //   (e) => e.name === userInfo?.motherDetails?.educationId\r\n          // )?.id || null,\r\n          occupationId: userInfo?.motherDetails?.occupationId,\r\n          // motherPost.find(\r\n          //   (o) => o.name === userInfo?.motherDetails?.occupationId\r\n          // )?.id || null,\r\n          maritalStatusId: null, // Adjust as needed\r\n          isAlive: userInfo?.motherDetails?.isAlive\r\n        },\r\n        familyDetail: fieldData.map((field, index) => ({\r\n          id: field?.id,\r\n          name: field.name,\r\n          memberType: field.memberType,\r\n          memberSubType: field.memberSubType,\r\n          educationId: field.educationId,\r\n          occupationId: field.occupationId,\r\n          maritalStatusId: field.maritalStatusId, // Adjust as needed\r\n          isAlive: 1 // Default or adjust as needed\r\n        }))\r\n      };\r\n\r\n      setFieldData(step5Data?.familyDetail);\r\n\r\n      try {\r\n        // Call completeUserProfileV2 for Step 5\r\n        const step5Response = await fetch(\r\n          '/api/admin/users/completeUserProfileV2',\r\n          {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              Authorization: `MatrimonyAndroid|Bearer ${newToken}`,\r\n              refreshtoken: `${rtoken}`\r\n            },\r\n            body: JSON.stringify(step5Data)\r\n          }\r\n        );\r\n\r\n        if (!step5Response.ok)\r\n          throw new Error('Failed to update profile with Step 5 data');\r\n\r\n        const data = await step5Response.json();\r\n\r\n        setUserInfo((prevUserInfo) => ({\r\n          ...prevUserInfo, // Keep other details intact\r\n          fatherDetails: {\r\n            ...prevUserInfo.fatherDetails, // Maintain existing father details if any\r\n            id: data?.recordList[0]?.fatherDetails?.id || null\r\n          },\r\n          motherDetails: {\r\n            ...prevUserInfo.motherDetails, // Maintain existing mother details if any\r\n            id: data?.recordList[0]?.motherDetails?.id || null\r\n          },\r\n          familyDetail: Array.isArray(prevUserInfo.familyDetail)\r\n            ? prevUserInfo.familyDetail.map((detail, index) => ({\r\n                ...detail,\r\n                id: data?.recordList[0]?.familyDetail?.[index]?.id || detail?.id // Update id only if available\r\n              }))\r\n            : []\r\n        }));\r\n\r\n        setApiResponse('Profile updated successfully for Step 5');\r\n        onNext(); // Move to next step\r\n      } catch (error) {\r\n        setApiError(error.message);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleFamilyChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setFamilyType(event.target.value);\r\n    const selectedValue = event.target.value;\r\n    setErrors((prevErrors) => ({ ...prevErrors, familyType: '' }));\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      familyType: selectedValue // Assuming 'heightId' is the field in your userInfo\r\n    }));\r\n  };\r\n\r\n  const handleStatusChange =\r\n    (\r\n      setter: React.Dispatch<React.SetStateAction<string>>,\r\n      parentField: keyof AddAppUser,\r\n      fieldName: keyof FamilyMemberDetailModel\r\n    ) =>\r\n    (event: React.ChangeEvent<HTMLInputElement>) => {\r\n      const selectedValue = event.target.value;\r\n      setter(event.target.value);\r\n      setErrors((prevErrors) => ({ ...prevErrors, [event.target.name]: '' }));\r\n      // setUserInfo((prevUserInfo) => ({\r\n      //   ...prevUserInfo,\r\n      //   [fieldName]: selectedValue,\r\n      // }));\r\n      setUserInfo((prevUserInfo) => ({\r\n        ...prevUserInfo,\r\n        [parentField]: {\r\n          ...prevUserInfo[parentField], // Keep other fields of the parent intact\r\n          [fieldName]: selectedValue // Update only the specific field\r\n        }\r\n      }));\r\n    };\r\n\r\n  const handleInputChange =\r\n    (\r\n      setter: React.Dispatch<React.SetStateAction<string>>,\r\n      parentField: keyof AddAppUser,\r\n      fieldName: keyof FamilyMemberDetailModel\r\n    ) =>\r\n    (event: React.ChangeEvent<HTMLInputElement>) => {\r\n      const selectedValue = event.target.value;\r\n      setter(event.target.value);\r\n      setErrors((prevErrors) => ({ ...prevErrors, [event.target.name]: '' }));\r\n\r\n      setUserInfo((prevUserInfo) => ({\r\n        ...prevUserInfo,\r\n        [parentField]: {\r\n          ...prevUserInfo[parentField], // Keep other fields of the parent intact\r\n          [fieldName]: selectedValue // Update only the specific field\r\n        }\r\n      }));\r\n    };\r\n\r\n  const handleSelectChange =\r\n    (\r\n      setter: React.Dispatch<React.SetStateAction<string>>,\r\n      parentField: keyof AddAppUser,\r\n      fieldName: keyof FamilyMemberDetailModel\r\n    ) =>\r\n    (event: SelectChangeEvent<string>) => {\r\n      const selectedValue = event.target.value;\r\n      setter(event.target.value as string);\r\n      setErrors((prevErrors) => ({ ...prevErrors, [event.target.name]: '' }));\r\n      setUserInfo((prevUserInfo) => ({\r\n        ...prevUserInfo,\r\n        [parentField]: {\r\n          ...prevUserInfo[parentField], // Keep other fields of the parent intact\r\n          [fieldName]: selectedValue // Update only the specific field\r\n        }\r\n      }));\r\n    };\r\n\r\n  const handleAddClick = () => {\r\n    setFieldData((prevFieldData) => [\r\n      ...prevFieldData,\r\n      {\r\n        id: userInfo?.familyDetail?.id || null,\r\n\r\n        educationId: userInfo.familyDetail.educationId || null,\r\n\r\n        occupationId: userInfo.familyDetail.occupationId || null,\r\n        maritalStatusId: userInfo.familyDetail.maritalStatusId || null,\r\n\r\n        memberType: userInfo.familyDetail.memberType || null,\r\n\r\n        memberSubType: userInfo.familyDetail.memberSubType || null,\r\n        name: userInfo.familyDetail.name || ''\r\n      }\r\n    ]);\r\n    setIsFamilyLength(true);\r\n  };\r\n\r\n  console.info('setFieldData------------>', fieldData);\r\n\r\n  const handleRemoveClick = (id: number) => {\r\n    setFieldData((prevFieldData) =>\r\n      prevFieldData.filter((field) => field?.id !== id)\r\n    );\r\n\r\n    // Optionally, remove any associated errors for this field set\r\n    setErrors((prevErrors) => {\r\n      const newErrors = { ...prevErrors };\r\n      delete newErrors[`otherEducation_${id}`];\r\n      delete newErrors[`otherPost_${id}`];\r\n      delete newErrors[`maritalStatus_${id}`];\r\n      return newErrors;\r\n    });\r\n  };\r\n\r\n  // const handleFieldChange = (id: number, fieldName: string, value: string) => {\r\n  //   setFieldData((prevFieldData) =>\r\n  //     prevFieldData.map((field) =>\r\n  //       field.id === id ? { ...field, [fieldName]: value } : field\r\n  //     )\r\n  //   );\r\n  // };\r\n\r\n  // const handleFieldChange = (id: number, fieldName: string, value: string) => {\r\n  //   setFieldData((prevFieldData) =>\r\n  //     prevFieldData.map((field) =>\r\n  //       field.id === id ? { ...field, [fieldName]: value } : field\r\n  //     )\r\n  //   );\r\n\r\n  //   // Clear the error for the specific field\r\n  //   setErrors((prevErrors) => ({\r\n  //     ...prevErrors,\r\n  //     [`${fieldName}_${id}`]: ''\r\n  //   }));\r\n  // };\r\n\r\n  const handleDetailChange = (\r\n    index: number,\r\n    key: string,\r\n    value: string,\r\n    parentField: keyof AddAppUser,\r\n    fieldName: keyof FamilyMemberDetailModel\r\n  ) => {\r\n    // Update field data state\r\n    setFieldData((prevFields) =>\r\n      prevFields.map((field, i) =>\r\n        i === index ? { ...field, [key]: value } : field\r\n      )\r\n    );\r\n\r\n    // Dynamically manage errors\r\n    setErrors((prevErrors) => {\r\n      const newErrors = { ...prevErrors };\r\n\r\n      // If value is not empty, remove the specific error\r\n      if (value.trim()) {\r\n        delete newErrors[`${key}_${index}`]; // Clear the error for this field\r\n      } else {\r\n        // If value is empty, set the appropriate error message\r\n        newErrors[`${key}_${index}`] = `${fieldName} is required.`; // Adjust error message based on field name\r\n      }\r\n\r\n      return newErrors;\r\n    });\r\n\r\n    // Update user info state\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      [parentField]: {\r\n        ...prevUserInfo[parentField], // Keep other fields of the parent intact\r\n        [fieldName]: value // Update only the specific field\r\n      }\r\n    }));\r\n  };\r\n\r\n  // const handleFieldChange = (\r\n  //   id: number,\r\n  //   fieldName: keyof FamilyMemberDetailModel,\r\n  //   value: string,\r\n  //   parentField: keyof AddAppUser\r\n  // ) => {\r\n  //   setFieldData((prevFieldData) =>\r\n  //     prevFieldData.map((field) =>\r\n  //       field.id === id ? { ...field, [fieldName]: value } : field\r\n  //     )\r\n  //   );\r\n\r\n  //   // Clear the error for the specific field\r\n  //   setErrors((prevErrors) => ({\r\n  //     ...prevErrors,\r\n  //     [`${fieldName}_${id}`]: '' // Clear the error for this field\r\n  //   }));\r\n\r\n  //   setUserInfo((prevUserInfo) => ({\r\n  //     ...prevUserInfo,\r\n  //     [parentField]: {\r\n  //       ...prevUserInfo[parentField], // Keep other fields of the parent intact\r\n  //       [fieldName]: value\r\n  //     }\r\n  //   }));\r\n  //   // Optionally validate again after the change\r\n  //   validateFields();\r\n  // };\r\n\r\n  const handleFieldChange = (\r\n    id: number,\r\n    fieldName: keyof FamilyMemberDetailModel,\r\n    value: string,\r\n    parentField: keyof AddAppUser,\r\n    index: number // Added index to manage errors per field\r\n  ) => {\r\n    debugger;\r\n    // Update field data state\r\n    setFieldData((prevFieldData) =>\r\n      prevFieldData.map((field) =>\r\n        field?.id === id ? { ...field, [fieldName]: value } : field\r\n      )\r\n    );\r\n\r\n    // Dynamically manage errors\r\n    setErrors((prevErrors) => {\r\n      // Create a new object with existing errors\r\n      const newErrors = { ...prevErrors };\r\n\r\n      // If value is not empty, remove the specific error\r\n      if (value) {\r\n        delete newErrors[`${fieldName}_${index}`]; // Clear the error for this field\r\n      } else {\r\n        // If value is empty, set the appropriate error message\r\n        newErrors[`${fieldName}_${index}`] = `${fieldName} is required.`;\r\n      }\r\n\r\n      return newErrors;\r\n    });\r\n\r\n    // Update user info state\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      [parentField]: {\r\n        ...prevUserInfo[parentField],\r\n        [fieldName]: value\r\n      }\r\n    }));\r\n  };\r\n\r\n  // const handleFamilyTypeChange = (\r\n  //   id: number,\r\n  //   event: SelectChangeEvent<string>\r\n  // ) => {\r\n  //   const type = event.target.value;\r\n  //   handleFieldChange(id, 'familyType', type);\r\n\r\n  //   // Find selected family type and update subTypes\r\n  //   const selectedFamilyType = familyTypes.find(\r\n  //     (family) => family.type === type\r\n  //   );\r\n  //   setSubTypes(selectedFamilyType ? selectedFamilyType.subTypes : []);\r\n  //   setErrors((prev) => ({ ...prev, [`familyType_${id}`]: '' }));\r\n  // };\r\n\r\n  // const handleSubTypeChange = (\r\n  //   id: number,\r\n  //   event: SelectChangeEvent<string>\r\n  // ) => {\r\n  //   handleFieldChange(id, 'selectedSubType', event.target.value as string);\r\n  //   setErrors((prev) => ({ ...prev, [`subType_${id}`]: '' }));\r\n  // };\r\n\r\n  const handleFamilyTypeChange = (\r\n    event: SelectChangeEvent<string>,\r\n    index: number,\r\n    parentField: keyof AddAppUser,\r\n    fieldName: keyof FamilyMemberDetailModel\r\n  ) => {\r\n    debugger;\r\n    const type = event.target.value;\r\n    const updatedFields = fieldData.map((field, i) =>\r\n      i === index ? { ...field, memberType: type, memberSubType: '' } : field\r\n    );\r\n\r\n    setFieldData(updatedFields);\r\n\r\n    const selectedFamilyType = configData.familyTypes.find(\r\n      (family) => family.type == type\r\n    );\r\n    setSubTypes(selectedFamilyType ? selectedFamilyType.subTypes : []);\r\n    setErrors((prev) => ({ ...prev, [`familyType_${index}`]: '' }));\r\n\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      [parentField]: {\r\n        ...prevUserInfo[parentField], // Keep other fields of the parent intact\r\n        [fieldName]: type // Update only the specific field\r\n      }\r\n    }));\r\n  };\r\n\r\n  const handleSubTypeChange = (\r\n    event: SelectChangeEvent<string>,\r\n    index: number,\r\n    parentField: keyof AddAppUser,\r\n    fieldName: keyof FamilyMemberDetailModel\r\n  ) => {\r\n    debugger;\r\n    const subType = event.target.value;\r\n    const updatedFields = fieldData.map((field, i) =>\r\n      i === index ? { ...field, memberSubType: subType } : field\r\n    );\r\n    setFieldData(updatedFields);\r\n    setErrors((prev) => ({ ...prev, [`subType_${index}`]: '' }));\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      [parentField]: {\r\n        ...prevUserInfo[parentField], // Keep other fields of the parent intact\r\n        [fieldName]: subType // Update only the specific field\r\n      }\r\n    }));\r\n  };\r\n\r\n  // const handleNameChange = (id: number, value: string) => {\r\n  //   handleFieldChange(id, 'name', value);\r\n  //   setErrors((prev) => ({ ...prev, [`name_${id}`]: '' }));\r\n  // };\r\n  useEffect(() => {\r\n    if (cred?.isDemoUser) {\r\n      showSnackBar(\r\n        \"**Access Denied**\\nWe're sorry, but you do not have permission to access this feature.\"\r\n      );\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Box>\r\n      {cred.isDemoUser > 0 && <SnackbarComponent />}\r\n      <Card className=\"container\">\r\n        <Typography variant=\"h3\" className=\"title\">\r\n          {currentTitle}\r\n        </Typography>\r\n        <Box className=\"progress-bar-container\">\r\n          <Box className=\"progress-bar\" style={{ width: progressBarLength }} />\r\n        </Box>\r\n\r\n        <Box sx={{ width: '100%', mb: 2, p: 4 }}>\r\n          <Grid container spacing={3}>\r\n            {/* Family Type */}\r\n            <Grid item xs={12}>\r\n              <FormControl component=\"fieldset\">\r\n                <FormLabel>Family Type *</FormLabel>\r\n                <RadioGroup\r\n                  value={familyType}\r\n                  onChange={handleFamilyChange}\r\n                  row\r\n                >\r\n                  <FormControlLabel\r\n                    value=\"JointFamily\"\r\n                    control={<Radio />}\r\n                    label=\"Joint Family\"\r\n                  />\r\n                  <FormControlLabel\r\n                    value=\"Nuclear\"\r\n                    control={<Radio />}\r\n                    label=\"Nuclear\"\r\n                  />\r\n                </RadioGroup>\r\n                {errors?.familyType && (\r\n                  <Typography color=\"error\">{errors.familyType}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h2\">Parents Details</Typography>\r\n            </Grid>\r\n            {/* Father's Details */}\r\n\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h6\">Father's Details</Typography>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Alive Status *</FormLabel>\r\n                <RadioGroup\r\n                  value={fatherStatus}\r\n                  onChange={handleStatusChange(\r\n                    setFatherStatus,\r\n                    'fatherDetails',\r\n                    'isAlive'\r\n                  )}\r\n                  row\r\n                  name=\"fatherStatus\"\r\n                >\r\n                  <FormControlLabel\r\n                    value={1}\r\n                    control={<Radio />}\r\n                    label=\"Alive\"\r\n                  />\r\n                  <FormControlLabel\r\n                    value={2}\r\n                    control={<Radio />}\r\n                    label=\"Passed Away\"\r\n                  />\r\n                </RadioGroup>\r\n                {errors.fatherStatus && (\r\n                  <Typography color=\"error\">{errors.fatherStatus}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n              <FormLabel>Father's Name</FormLabel>\r\n              <TextField\r\n                value={fatherName}\r\n                onChange={handleInputChange(\r\n                  setFatherName,\r\n                  'fatherDetails',\r\n                  'name'\r\n                )}\r\n                size=\"small\"\r\n                fullWidth\r\n                name=\"fatherName\"\r\n              />\r\n              {errors.fatherName && (\r\n                <Typography color=\"error\">{errors.fatherName}</Typography>\r\n              )}\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Education</FormLabel>\r\n                <Select\r\n                  value={selectedFatherEducation}\r\n                  onChange={handleSelectChange(\r\n                    setselectedFatherEducation,\r\n                    'fatherDetails',\r\n                    'educationId'\r\n                  )}\r\n                  size=\"small\"\r\n                  displayEmpty\r\n                  name=\"fatherEducation\"\r\n                  // renderValue={() => {\r\n\r\n                  //   const selectedNames = fatherEducation\r\n                  //     .filter((item) => (item.id))\r\n                  //     .map((item) => item.name);\r\n                  //   return selectedNames;\r\n                  // }}\r\n                  renderValue={(selected) => {\r\n                    const selectedItem = fatherEducation.find(\r\n                      (item) => item?.id === selected\r\n                    );\r\n                    return selectedItem\r\n                      ? selectedItem.name\r\n                      : 'Select Education';\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"\" disabled>\r\n                    Select Education\r\n                  </MenuItem>\r\n                  {fatherEducation.map((item) => (\r\n                    <MenuItem key={item?.id} value={item?.id}>\r\n                      {item.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {errors.fatherEducation && (\r\n                  <Typography color=\"error\">\r\n                    {errors.fatherEducation}\r\n                  </Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Occupation</FormLabel>\r\n                <Select\r\n                  value={selectedFatherPost}\r\n                  onChange={handleSelectChange(\r\n                    setselectedFatherPost,\r\n                    'fatherDetails',\r\n                    'occupationId'\r\n                  )}\r\n                  size=\"small\"\r\n                  displayEmpty\r\n                  name=\"fatherPost\"\r\n                  renderValue={(selected) => {\r\n                    const selectedItem = fatherPost.find(\r\n                      (item) => item.id === selected\r\n                    );\r\n                    return selectedItem ? selectedItem.name : 'Select Post';\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"\" disabled>\r\n                    Select Post\r\n                  </MenuItem>\r\n                  {fatherPost.map((item) => (\r\n                    <MenuItem key={item?.id} value={item?.id}>\r\n                      {item.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {errors.fatherPost && (\r\n                  <Typography color=\"error\">{errors.fatherPost}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            {/* Mother's Details */}\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h6\">Mother's Details</Typography>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Alive Status *</FormLabel>\r\n                <RadioGroup\r\n                  value={motherStatus}\r\n                  onChange={handleStatusChange(\r\n                    setMotherStatus,\r\n                    'motherDetails',\r\n                    'isAlive'\r\n                  )}\r\n                  row\r\n                  name=\"motherStatus\"\r\n                >\r\n                  <FormControlLabel\r\n                    value={1}\r\n                    control={<Radio />}\r\n                    label=\"Alive\"\r\n                  />\r\n                  <FormControlLabel\r\n                    value={2}\r\n                    control={<Radio />}\r\n                    label=\"Passed Away\"\r\n                  />\r\n                </RadioGroup>\r\n                {errors.motherStatus && (\r\n                  <Typography color=\"error\">{errors.motherStatus}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n              <FormLabel>Mother's Name</FormLabel>\r\n              <TextField\r\n                value={motherName}\r\n                onChange={handleInputChange(\r\n                  setMotherName,\r\n                  'motherDetails',\r\n                  'name'\r\n                )}\r\n                size=\"small\"\r\n                fullWidth\r\n                name=\"motherName\"\r\n              />\r\n              {errors.motherName && (\r\n                <Typography color=\"error\">{errors.motherName}</Typography>\r\n              )}\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Education</FormLabel>\r\n                <Select\r\n                  value={selectedMotherEducation}\r\n                  onChange={handleSelectChange(\r\n                    setselectedMotherEducation,\r\n                    'motherDetails',\r\n                    'educationId'\r\n                  )}\r\n                  size=\"small\"\r\n                  displayEmpty\r\n                  name=\"motherEducation\"\r\n                  renderValue={(selected) => {\r\n                    const selectedItem = motherEducation.find(\r\n                      (item) => item?.id === selected\r\n                    );\r\n                    return selectedItem\r\n                      ? selectedItem.name\r\n                      : 'Select Education';\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"\" disabled>\r\n                    Select Education\r\n                  </MenuItem>\r\n                  {motherEducation.map((item) => (\r\n                    <MenuItem key={item?.id} value={item?.id}>\r\n                      {item.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {errors.motherEducation && (\r\n                  <Typography color=\"error\">\r\n                    {errors.motherEducation}\r\n                  </Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Occupation</FormLabel>\r\n                <Select\r\n                  value={selectedMotherPost}\r\n                  onChange={handleSelectChange(\r\n                    setselectedMotherPost,\r\n                    'motherDetails',\r\n                    'occupationId'\r\n                  )}\r\n                  size=\"small\"\r\n                  displayEmpty\r\n                  name=\"motherPost\"\r\n                  renderValue={(selected) => {\r\n                    const selectedItem = motherPost.find(\r\n                      (item) => item?.id === selected\r\n                    );\r\n                    return selectedItem ? selectedItem.name : 'Select Post';\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"\" disabled>\r\n                    Select Post\r\n                  </MenuItem>\r\n                  {motherPost.map((item) => (\r\n                    <MenuItem key={item?.id} value={item?.id}>\r\n                      {item.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {/* {errors.motherPost && (\r\n                  <Typography color=\"error\">{errors.motherPost}</Typography>\r\n                )} */}\r\n              </FormControl>\r\n            </Grid>\r\n            <Button\r\n              variant=\"contained\"\r\n              // color='primary'\r\n              onClick={handleAddClick}\r\n              sx={{ mt: 3 }}\r\n            >\r\n              Add\r\n            </Button>\r\n\r\n            {(isFamilyLength || userInfo?.familyDetail?.length > 0) &&\r\n              fieldData?.map((field, index) => (\r\n                <Grid\r\n                  container\r\n                  spacing={2}\r\n                  sx={{ mt: 3, mb: 3 }}\r\n                  key={field?.id}\r\n                >\r\n                  <Grid item xs={12}>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"warning\"\r\n                      onClick={() => handleRemoveClick(field?.id)}\r\n                    >\r\n                      Cancel\r\n                    </Button>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={6}>\r\n                    <FormControl fullWidth>\r\n                      <FormLabel>Family Type *</FormLabel>\r\n                      <Select\r\n                        value={field?.memberType}\r\n                        onChange={(e) =>\r\n                          handleFamilyTypeChange(\r\n                            e,\r\n                            index,\r\n                            'familyDetail',\r\n                            'memberType'\r\n                          )\r\n                        }\r\n                        size=\"small\"\r\n                        displayEmpty\r\n                        name={`familyType_${index}`}\r\n                      >\r\n                        <MenuItem value=\"\" disabled>\r\n                          Select Family Type\r\n                        </MenuItem>\r\n                        {configData?.familyTypes?.map((item) => (\r\n                          <MenuItem key={item.type} value={item.type}>\r\n                            {item.type}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                      {errors[`familyType_${index}`] && (\r\n                        <Typography color=\"error\">\r\n                          {errors[`familyType_${index}`]}\r\n                        </Typography>\r\n                      )}\r\n                    </FormControl>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={6}>\r\n                    <FormControl fullWidth>\r\n                      <FormLabel>Sub Type</FormLabel>\r\n                      <Select\r\n                        value={field?.memberSubType}\r\n                        onChange={(e) =>\r\n                          handleSubTypeChange(\r\n                            e,\r\n                            index,\r\n                            'familyDetail',\r\n                            'memberSubType'\r\n                          )\r\n                        }\r\n                        size=\"small\"\r\n                        displayEmpty\r\n                        name={`subType_${index}`}\r\n                        renderValue={() => field?.memberSubType}\r\n                      >\r\n                        <MenuItem value=\"\" disabled>\r\n                          Select Sub Type\r\n                        </MenuItem>\r\n                        {subTypes?.map((subType) => (\r\n                          <MenuItem key={subType} value={subType}>\r\n                            {subType}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                      {errors[`subType_${index}`] && (\r\n                        <Typography color=\"error\">\r\n                          {errors[`subType_${index}`]}\r\n                        </Typography>\r\n                      )}\r\n                    </FormControl>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={6}>\r\n                    <FormLabel>Name</FormLabel>\r\n                    <TextField\r\n                      value={field?.name} // Bind the value to the field's name\r\n                      onChange={(e) =>\r\n                        handleDetailChange(\r\n                          index,\r\n                          'name',\r\n                          e.target.value,\r\n                          'familyDetail',\r\n                          'name' // The fieldName for error messages\r\n                        )\r\n                      }\r\n                      size=\"small\"\r\n                      fullWidth\r\n                      name={`name_${index}`}\r\n                      error={!!errors[`name_${index}`]} // Show error styling if there's an error\r\n                    />\r\n                    {errors[`name_${index}`] && (\r\n                      <Typography color=\"error\">\r\n                        {errors[`name_${index}`]}\r\n                      </Typography>\r\n                    )}\r\n                  </Grid>\r\n\r\n                  {/* Education Degree Field */}\r\n                  <Grid item xs={6}>\r\n                    <FormControl fullWidth>\r\n                      <FormLabel>Education Degree *</FormLabel>\r\n                      <Select\r\n                        value={field?.educationId || ''}\r\n                        onChange={(e) =>\r\n                          handleFieldChange(\r\n                            field?.id,\r\n                            'educationId',\r\n                            e.target.value,\r\n                            'familyDetail',\r\n                            index\r\n                          )\r\n                        }\r\n                        size=\"small\"\r\n                        displayEmpty\r\n                        name={`educationType_${index}`}\r\n                        renderValue={() =>\r\n                          otherEducation?.find(\r\n                            (data) => data?.id === field?.educationId\r\n                          )?.name || ''\r\n                        }\r\n                      >\r\n                        <MenuItem value=\"\" disabled>\r\n                          Select Education\r\n                        </MenuItem>\r\n                        {otherEducation.map((item) => (\r\n                          <MenuItem key={item?.id} value={item?.id}>\r\n                            {item.name}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                      {errors[`educationType_${index}`] && (\r\n                        <Typography color=\"error\">\r\n                          {errors[`educationType_${index}`]}\r\n                        </Typography>\r\n                      )}\r\n                    </FormControl>\r\n                  </Grid>\r\n\r\n                  {/* Profession Field */}\r\n                  <Grid item xs={6}>\r\n                    <FormControl fullWidth>\r\n                      <FormLabel>Profession *</FormLabel>\r\n                      <Select\r\n                        value={field?.occupationId || ''}\r\n                        onChange={(e) =>\r\n                          handleFieldChange(\r\n                            field.id,\r\n                            'occupationId',\r\n                            e.target.value,\r\n                            'familyDetail',\r\n                            index\r\n                          )\r\n                        }\r\n                        size=\"small\"\r\n                        displayEmpty\r\n                        name={`occupationType_${index}`}\r\n                        renderValue={() =>\r\n                          otherPost?.find(\r\n                            (data) => data?.id === field?.occupationId\r\n                          )?.name || ''\r\n                        }\r\n                      >\r\n                        <MenuItem value=\"\" disabled>\r\n                          Select Profession\r\n                        </MenuItem>\r\n                        {otherPost.map((item) => (\r\n                          <MenuItem key={item?.id} value={item?.id}>\r\n                            {item?.name}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                      {errors[`occupationType_${index}`] && (\r\n                        <Typography color=\"error\">\r\n                          {errors[`occupationType_${index}`]}\r\n                        </Typography>\r\n                      )}\r\n                    </FormControl>\r\n                  </Grid>\r\n\r\n                  {/* Marital Status Field */}\r\n                  <Grid item xs={6}>\r\n                    <FormControl fullWidth>\r\n                      <FormLabel>Marital Status *</FormLabel>\r\n                      <Select\r\n                        value={field?.maritalStatusId || ''}\r\n                        onChange={(e) =>\r\n                          handleFieldChange(\r\n                            field?.id,\r\n                            'maritalStatusId',\r\n                            e.target.value,\r\n                            'familyDetail',\r\n                            index\r\n                          )\r\n                        }\r\n                        size=\"small\"\r\n                        displayEmpty\r\n                        name={`maritalStatusType_${index}`}\r\n                        renderValue={() =>\r\n                          configData?.maritalStatus?.find(\r\n                            (data) => data?.id === field?.maritalStatusId\r\n                          )?.name || 'Select Marital Status'\r\n                        }\r\n                      >\r\n                        <MenuItem value=\"\" disabled>\r\n                          Please select your marital status\r\n                        </MenuItem>\r\n                        {configData?.maritalStatus?.length > 0 ? (\r\n                          configData.maritalStatus.map((status) => (\r\n                            <MenuItem key={status?.id} value={status?.id}>\r\n                              {status?.name}\r\n                            </MenuItem>\r\n                          ))\r\n                        ) : (\r\n                          <MenuItem disabled>\r\n                            No marital statuses available\r\n                          </MenuItem>\r\n                        )}\r\n                      </Select>\r\n                      {errors[`maritalStatusType_${index}`] && (\r\n                        <Typography color=\"error\">\r\n                          {errors[`maritalStatusType_${index}`]}\r\n                        </Typography>\r\n                      )}\r\n                    </FormControl>\r\n                  </Grid>\r\n                </Grid>\r\n              ))}\r\n\r\n            {apiResponse && (\r\n              <Typography color=\"success\">{apiResponse}</Typography>\r\n            )}\r\n            {apiError && <Typography color=\"error\">{apiError}</Typography>}\r\n          </Grid>\r\n        </Box>\r\n\r\n        {/* Navigation Buttons */}\r\n        <Grid item xs={12}>\r\n          <Box className=\"navigation-buttons\">\r\n            <Button variant=\"contained\" onClick={onBack}>\r\n              Back\r\n            </Button>\r\n            <Button\r\n  variant=\"contained\"\r\n  onClick={ cred.isDemoUser == '1' ?onNext: handleNext }\r\n>\r\n              Next\r\n            </Button>\r\n          </Box>\r\n        </Grid>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Step5;\r\n","// import React, { useEffect, useRef, useState } from 'react';\r\n\r\n// interface MapComponentProps {\r\n//   defaultCenter: { lat: number; lng: number };\r\n//   onMarkerUpdate: (lat: number, lng: number, address: string) => void; // Prop to pass marker data\r\n// }\r\n\r\n// const MapComponent: React.FC<MapComponentProps> = ({ defaultCenter, onMarkerUpdate }) => {\r\n//   const mapRef = useRef<HTMLDivElement | null>(null);\r\n//   const [map, setMap] = useState<google.maps.Map | null>(null);\r\n//   const markerRef = useRef<google.maps.Marker | null>(null); // Ref to store the marker\r\n//   const geocoderRef = useRef<google.maps.Geocoder | null>(null); // Ref for Geocoder\r\n\r\n//   // Function to initialize the map\r\n//   const initMap = (position: { lat: number; lng: number }) => {\r\n//     if (mapRef.current && !map) {\r\n//       const googleMap = new window.google.maps.Map(mapRef.current, {\r\n//         center: position || defaultCenter,\r\n//         zoom: 12,\r\n//       });\r\n\r\n//       setMap(googleMap);\r\n\r\n//       // Create a marker at the initial position\r\n//       const marker = new window.google.maps.Marker({\r\n//         position: position || defaultCenter,\r\n//         map: googleMap,\r\n//       });\r\n\r\n//       markerRef.current = marker;\r\n\r\n//       // Add click listener to the map for updating the marker\r\n//       googleMap.addListener('click', (event: google.maps.MapMouseEvent) => {\r\n//         const latLng = event.latLng;\r\n//         if (latLng) {\r\n//           // Remove the previous marker, if any\r\n//           if (markerRef.current) {\r\n//             markerRef.current.setMap(null);\r\n//           }\r\n\r\n//           // Create and place a new marker\r\n//           const newMarker = new window.google.maps.Marker({\r\n//             position: latLng,\r\n//             map: googleMap,\r\n//           });\r\n\r\n//           markerRef.current = newMarker;\r\n\r\n//           // Reverse geocode the latLng to get the address\r\n//           geocodeLatLng(latLng.lat(), latLng.lng());\r\n//         }\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   // Function to reverse geocode lat and lng into an address\r\n//   const geocodeLatLng = (lat: number, lng: number) => {\r\n//     if (!geocoderRef.current) {\r\n//       geocoderRef.current = new window.google.maps.Geocoder();\r\n//     }\r\n\r\n//     const latLng = { lat, lng };\r\n//     geocoderRef.current.geocode({ location: latLng }, (results, status) => {\r\n//       if (status === 'OK' && results && results[0]) {\r\n//         const address = results[0].formatted_address;\r\n//         console.log('Geocoded Address:', address);\r\n\r\n//         // Pass lat, lng, and address to parent component\r\n//         onMarkerUpdate(lat, lng, address);\r\n//       } else {\r\n//         console.error('Geocode failed:', status);\r\n//       }\r\n//     });\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const loadGoogleMapsScript = (src: string) => {\r\n//       if (!document.querySelector(`script[src=\"${src}\"]`)) {\r\n//         const script = document.createElement('script');\r\n//         script.src = src;\r\n//         script.async = true;\r\n//         script.defer = true;\r\n//         script.onload = () => {\r\n//           // Get current location and initialize the map\r\n//           navigator.geolocation.getCurrentPosition(\r\n//             (position) => {\r\n//               const currentLocation = {\r\n//                 lat: position.coords.latitude,\r\n//                 lng: position.coords.longitude,\r\n//               };\r\n//               initMap(currentLocation);\r\n//             },\r\n//             () => {\r\n//               // Fallback to default center if geolocation fails\r\n//               initMap(defaultCenter);\r\n//             }\r\n//           );\r\n//         };\r\n//         document.body.appendChild(script);\r\n//       }\r\n//     };\r\n\r\n//     if (!window.google || !window.google.maps) {\r\n//       loadGoogleMapsScript(\r\n//         `https://maps.googleapis.com/maps/api/js?key=AIzaSyDEKhKKZ3AjjBPEWh3XJyiOmbckQvdWx5A`\r\n//       );\r\n//     } else {\r\n//       // Geolocation if the script is already loaded\r\n//       navigator.geolocation.getCurrentPosition(\r\n//         (position) => {\r\n//           const currentLocation = {\r\n//             lat: position.coords.latitude,\r\n//             lng: position.coords.longitude,\r\n//           };\r\n//           initMap(currentLocation);\r\n//         },\r\n//         () => {\r\n//           initMap(defaultCenter);\r\n//         }\r\n//       );\r\n//     }\r\n//   }, [map, defaultCenter]);\r\n\r\n//   return <div ref={mapRef} style={{ width: '100%', height: '300px' }}></div>;\r\n// };\r\n\r\n// export default MapComponent;\r\n\r\n\r\n\r\nimport React, { useEffect, useRef, useState } from 'react';\r\n\r\ninterface MapComponentProps {\r\n  defaultCenter: { lat: number; lng: number };\r\n  onMarkerUpdate: (lat: number, lng: number, address: string) => void; // Prop to pass marker data\r\n}\r\n\r\nconst MapComponent: React.FC<MapComponentProps> = ({ defaultCenter, onMarkerUpdate }) => {\r\n  const mapRef = useRef<HTMLDivElement | null>(null);\r\n  const [map, setMap] = useState<google.maps.Map | null>(null);\r\n  const markerRef = useRef<google.maps.Marker | null>(null); // Ref to store the marker\r\n  const geocoderRef = useRef<google.maps.Geocoder | null>(null); // Ref for Geocoder\r\n\r\n  // Function to initialize the map\r\n  const initMap = (position: { lat: number; lng: number }) => {\r\n    if (mapRef.current && !map) {\r\n      const googleMap = new window.google.maps.Map(mapRef.current, {\r\n        center: position || defaultCenter,\r\n        zoom: 12,\r\n      });\r\n\r\n      setMap(googleMap);\r\n\r\n      // Create a marker at the initial position\r\n      const marker = new window.google.maps.Marker({\r\n        position: position || defaultCenter,\r\n        map: googleMap,\r\n      });\r\n\r\n      markerRef.current = marker;\r\n\r\n      // Add click listener to the map for updating the marker\r\n      googleMap.addListener('click', (event: google.maps.MapMouseEvent) => {\r\n        const latLng = event.latLng;\r\n        if (latLng) {\r\n          // Remove the previous marker, if any\r\n          if (markerRef.current) {\r\n            markerRef.current.setMap(null);\r\n          }\r\n\r\n          // Create and place a new marker\r\n          const newMarker = new window.google.maps.Marker({\r\n            position: latLng,\r\n            map: googleMap,\r\n          });\r\n\r\n          markerRef.current = newMarker;\r\n\r\n          // Reverse geocode the latLng to get the address\r\n          geocodeLatLng(latLng.lat(), latLng.lng());\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  // Function to reverse geocode lat and lng into an address\r\n  const geocodeLatLng = (lat: number, lng: number) => {\r\n    if (!geocoderRef.current) {\r\n      geocoderRef.current = new window.google.maps.Geocoder();\r\n    }\r\n\r\n    const latLng = { lat, lng };\r\n    geocoderRef.current.geocode({ location: latLng }, (results, status) => {\r\n      if (status === 'OK' && results && results[0]) {\r\n        const address = results[0].formatted_address;\r\n        console.log('Geocoded Address:', address);\r\n\r\n        // Pass lat, lng, and address to parent component\r\n        onMarkerUpdate(lat, lng, address);\r\n      } else {\r\n        console.error('Geocode failed:', status);\r\n      }\r\n    });\r\n  };\r\n\r\n  // Remove the navigator.geolocation.getCurrentPosition call and directly use defaultCenter in initMap\r\n\r\nuseEffect(() => {\r\n  const loadGoogleMapsScript = (src: string) => {\r\n    if (!document.querySelector(`script[src=\"${src}\"]`)) {\r\n      const script = document.createElement('script');\r\n      script.src = src;\r\n      script.async = true;\r\n      script.defer = true;\r\n      script.onload = () => {\r\n        // Initialize the map directly with defaultCenter\r\n        initMap(defaultCenter);\r\n      };\r\n      document.body.appendChild(script);\r\n    }\r\n  };\r\n\r\n  if (!window.google || !window.google.maps) {\r\n    loadGoogleMapsScript(\r\n      `https://maps.googleapis.com/maps/api/js?key=AIzaSyDEKhKKZ3AjjBPEWh3XJyiOmbckQvdWx5A`\r\n    );\r\n  } else {\r\n    // Initialize map with defaultCenter when Google Maps API is already loaded\r\n    initMap(defaultCenter);\r\n  }\r\n}, [map, defaultCenter]);\r\n\r\n\r\n  return <div ref={mapRef} style={{ width: '100%', height: '300px' }}></div>;\r\n};\r\n\r\nexport default MapComponent;\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  Typography,\r\n  TextField,\r\n  Checkbox,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  Grid,\r\n  Select,\r\n  MenuItem,\r\n  SelectChangeEvent,\r\n  RadioGroup,\r\n  Radio\r\n} from '@mui/material';\r\nimport '../addAppUser.css';\r\nimport MapComponent from '../MapComponent';\r\nimport { AddAppUser, Address } from 'src/models/addappuser';\r\nimport { useSnackbar } from 'src/content/useSnackbar';\r\n\r\ninterface Step6Props {\r\n  title: { id: number; name: string }[];\r\n  progressBarLength: string;\r\n  onBack: () => void;\r\n  onNext: () => void;\r\n  configData: any;\r\n  currentStepId: number;\r\n  userInfo: any; // Add userInfo prop to access the global state\r\n  setUserInfo: (userInfo: any) => void;\r\n}\r\n\r\nconst Step6: React.FC<Step6Props> = ({\r\n  title,\r\n  progressBarLength,\r\n  onBack,\r\n  onNext,\r\n  configData,\r\n  currentStepId,\r\n  userInfo,\r\n  setUserInfo\r\n}) => {\r\n  const [permanentAddress, setPermanentAddress] = useState({\r\n    addressLine1: userInfo?.permanentAddress?.addressLine1 || '',\r\n    addressLine2: userInfo?.permanentAddress?.addressLine2 || '',\r\n    name: '',\r\n    cityName: userInfo?.permanentAddress?.cityName || '',\r\n    state: userInfo?.permanentAddress?.state || '',\r\n    country: userInfo?.permanentAddress?.country || '',\r\n    pincode: userInfo?.permanentAddress?.pincode || '',\r\n    residentialStatus: userInfo?.permanentAddress?.residentialStatus || '',\r\n    latitude: userInfo?.permanentAddress?.latitude || null,\r\n    longitude: userInfo?.permanentAddress?.longitude || null,\r\n    cityId: null,\r\n    stateId: null,\r\n    countryId: null,\r\n    districtId: null\r\n  });\r\n  // console.log(\"padd\", permanentAddress.latitude);\r\n  const [currentAddress, setCurrentAddress] = useState({\r\n    addressLine1: userInfo?.currentAddress?.addressLine1 || '',\r\n    addressLine2: userInfo?.currentAddress?.addressLine2 || '',\r\n    name: '',\r\n    cityName: userInfo?.currentAddress?.cityName || '',\r\n    state: userInfo?.currentAddress?.state || '',\r\n    country: userInfo?.currentAddress?.country || '',\r\n    pincode: userInfo?.currentAddress?.pincode || '',\r\n    residentialStatus: userInfo?.currentAddress?.residentialStatus || '',\r\n    latitude: userInfo?.currentAddress?.latitude || null,\r\n    longitude: userInfo?.currentAddress?.longitude || null,\r\n    cityId: null,\r\n    stateId: null,\r\n    countryId: null,\r\n    districtId: null\r\n  });\r\n\r\n  const [sameAsPermanent, setSameAsPermanent] = useState(false);\r\n  console.log('tick', sameAsPermanent);\r\n  // const [error, setError] = useState<string>('');\r\n  const [errors, setErrors] = useState({\r\n    permanentAddress: {\r\n      addressLine1: '',\r\n      city: '',\r\n      state: '',\r\n      country: '',\r\n      pincode: '',\r\n      residentialStatus: ''\r\n    },\r\n    currentAddress: {\r\n      addressLine1: '',\r\n      city: '',\r\n      state: '',\r\n      country: '',\r\n      pincode: '',\r\n      residentialStatus: ''\r\n    },\r\n\r\n    visaStatus: '',\r\n    willingToGoAbroad: '',\r\n    nativePlace: '',\r\n    citizenship: ''\r\n  });\r\n\r\n  // State for dropdowns\r\n  // const [city, setCity] = useState<string>(''); // New state for city\r\n  // const [city, setCity] = useState<{ districtName: string }[]>([]);\r\n  const [permanentCityList, setPermanentCityList] = useState([]); // To store city names\r\n  const [currentCityList, setCurrentCityList] = useState([]); // To store city names\r\n  const [willingToGoAbroad, setWillingToGoAbroad] = useState<string>(\r\n    userInfo.willingToGoAbroad || ''\r\n  );\r\n  const [nativePlace, setNativePlace] = useState<string>(\r\n    userInfo.nativePlace || ''\r\n  );\r\n  const [citizenship, setCitizenship] = useState<string>(\r\n    userInfo.citizenship || ''\r\n  );\r\n  // const [selectedPermanentAddress, setselectedPermanentAddress] = useState('');\r\n  // const [selectedCurrentAddress, setselectedCurrentAddress] = useState('');\r\n\r\n  // const [residentialStatus, setResidentialStatus] = useState<string>('');\r\n  const [visaStatus, setVisaStatus] = useState<string>(\r\n    userInfo.visaStatus || ''\r\n  );\r\n  const { showSnackBar, SnackbarComponent } = useSnackbar();\r\n\r\n  const currentTitle =\r\n    title.find((item) => item.id === currentStepId)?.name || '';\r\n\r\n  const fetchDataForPermanentAddress = async (pincode) => {\r\n    if (pincode.length !== 6) return; // Ensure only 6-digit pincodes trigger the fetch\r\n\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await fetch('/api/app/regions/getRegionByPincode', {\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ pincode }) // Pass pincode to the API\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Fetched data for Permanent Address:', data);\r\n\r\n      if (data && data.recordList) {\r\n        const cities = data.recordList.map((item) => ({\r\n          id: item.id,\r\n          name: item.name\r\n        })); // Extract city names\r\n        const { stateName, countryName } = data.recordList[0]; // Use the first record to auto-fill state and country\r\n\r\n        setPermanentCityList(cities); // Populate the city dropdown for permanent address\r\n\r\n        setPermanentAddress((prev) => ({\r\n          ...prev,\r\n          city: '', // Set an empty value to force user to select from the dropdown\r\n          state: stateName || '', // Auto-fill state\r\n          country: countryName || '' // Auto-fill country\r\n        }));\r\n      } else {\r\n        console.error('Unexpected data format for Permanent Address:', data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching data for Permanent Address:', error);\r\n    }\r\n  };\r\n  let cred = (JSON.parse(localStorage.getItem('Credentials')) as any);\r\n\r\n  const fetchDataForCurrentAddress = async (pincode) => {\r\n    if (pincode.length !== 6) return; // Ensure only 6-digit pincodes trigger the fetch\r\n\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await fetch('/api/app/regions/getRegionByPincode', {\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ pincode }) // Pass pincode to the API\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Fetched data for Current Address:', data);\r\n\r\n      if (data && data.recordList) {\r\n        const cities = data.recordList.map((item) => ({\r\n          id: item.id,\r\n          name: item.name\r\n        })); // Extract city names\r\n        const { stateName, countryName } = data.recordList[0]; // Use the first record to auto-fill state and country\r\n\r\n        setCurrentCityList(cities); // Populate the city dropdown for current address\r\n\r\n        setCurrentAddress((prev) => ({\r\n          ...prev,\r\n          city: '', // Set an empty value to force user to select from the dropdown\r\n          state: stateName || '', // Auto-fill state\r\n          country: countryName || '' // Auto-fill country\r\n        }));\r\n      } else {\r\n        console.error('Unexpected data format for Current Address:', data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching data for Current Address:', error);\r\n    }\r\n  };\r\n\r\n  // Call the above functions\r\n  const fetchData = async (permanentPincode, currentPincode) => {\r\n    await fetchDataForPermanentAddress(permanentPincode); // Fetch data for permanent address\r\n    await fetchDataForCurrentAddress(currentPincode); // Fetch data for current address\r\n  };\r\n\r\n  const handlePermanentAddressUpdate = (\r\n    lat: number,\r\n    lng: number,\r\n    addressLine1: string\r\n  ) => {\r\n    setPermanentAddress((prev) => ({\r\n      ...prev, // Spread previous permanent address state\r\n      addressLine1, // Update only the address field\r\n      latitude: lat,\r\n      longitude: lng\r\n    }));\r\n\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      permanentAddress: {\r\n        ...prevUserInfo.permanentAddress,\r\n        addressLine1, // Update the address\r\n        latitude: lat,\r\n        longitude: lng\r\n      }\r\n    }));\r\n\r\n    setErrors((prev) => ({\r\n      ...prev,\r\n      permanentAddress: {\r\n        ...prev.permanentAddress,\r\n        addressLine1: '' // Clear the error message for address\r\n      }\r\n    }));\r\n\r\n    // setUserInfo((prevUserInfo) => ({\r\n    //   ...prevUserInfo,\r\n    //   address: address,\r\n    //   latitude: lat,\r\n    //   longitude: lng\r\n    // }));\r\n\r\n    // setErrors((prev) => ({\r\n    //   ...prev,\r\n    //   permanentAddress: { address: '' }, // Clear any previous errors\r\n    // }));\r\n  };\r\n\r\n  const handleCurrentAddressUpdate = (\r\n    lat: number,\r\n    lng: number,\r\n    addressLine1: string\r\n  ) => {\r\n    console.log('Current Address Lat:', lat, 'Lng:', lng);\r\n    setCurrentAddress((prev) => ({\r\n      ...prev, // Spread previous current address state\r\n      addressLine1, // Update only the address field\r\n      latitude: lat,\r\n      longitude: lng\r\n    }));\r\n\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      currentAddress: {\r\n        ...prevUserInfo.currentAddress,\r\n        addressLine1, // Update the address\r\n        latitude: lat,\r\n        longitude: lng\r\n      }\r\n    }));\r\n\r\n    setErrors((prev) => ({\r\n      ...prev,\r\n      currentAddress: {\r\n        ...prev.currentAddress,\r\n        addressLine1: '' // Clear the error message for address\r\n      }\r\n    }));\r\n    // setErrors((prev) => ({\r\n    //   ...prev,\r\n    //   currentAddress: { address: '' }, // Clear any previous errors\r\n    // }));\r\n  };\r\n\r\n  const handleRadioChange =\r\n    (setter: React.Dispatch<React.SetStateAction<string>>) =>\r\n    (event: React.ChangeEvent<HTMLInputElement>) => {\r\n      setter(event.target.value);\r\n      const selectedValue = event.target.value;\r\n      setErrors((prev) => ({ ...prev, [event.target.name]: '' }));\r\n\r\n      setUserInfo((prevUserInfo) => ({\r\n        ...prevUserInfo,\r\n        willingToGoAbroad: selectedValue\r\n      }));\r\n    };\r\n\r\n  const handlepAddressChange =\r\n    (parentField: keyof AddAppUser) =>\r\n    (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      const { name, value } = e.target; // Destructure the target\r\n      setPermanentAddress((prev) => ({\r\n        ...prev,\r\n        [name]: value // Dynamically update the field based on the input name\r\n      }));\r\n      setUserInfo((prevUserInfo) => ({\r\n        ...prevUserInfo,\r\n        [parentField]: {\r\n          ...prevUserInfo[parentField], // Keep other fields of the parent intact\r\n          addressLine1: value // Update only the specific field\r\n        }\r\n      }));\r\n    };\r\n  const handlecAddressChange =\r\n    (parentField: keyof AddAppUser) =>\r\n    (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      const { name, value } = e.target; // Destructure the target\r\n      setCurrentAddress((prev) => ({\r\n        ...prev,\r\n        [name]: value // Dynamically update the field based on the input name\r\n      }));\r\n      setUserInfo((prevUserInfo) => ({\r\n        ...prevUserInfo,\r\n        [parentField]: {\r\n          ...prevUserInfo[parentField], // Keep other fields of the parent intact\r\n          addressLine1: value // Update only the specific field\r\n        }\r\n      }));\r\n    };\r\n\r\n  useEffect(() => {\r\n    if (permanentAddress?.pincode && permanentAddress?.pincode.length === 6) {\r\n      fetchDataForPermanentAddress(permanentAddress?.pincode); // Automatically fetch the data if pincode is already valid\r\n    }\r\n  }, [permanentAddress?.pincode]);\r\n  useEffect(() => {\r\n    if (currentAddress?.pincode && currentAddress?.pincode.length === 6) {\r\n      fetchDataForCurrentAddress(currentAddress?.pincode); // Automatically fetch the data if pincode is already valid\r\n    }\r\n  }, [currentAddress?.pincode]);\r\n\r\n  const handlePermanentAddressChange =\r\n    (parentField: keyof AddAppUser) =>\r\n    (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      const { name, value } = e.target;\r\n\r\n      // Update the permanent address state\r\n      setPermanentAddress((prev) => ({\r\n        ...prev,\r\n        [name]: value\r\n      }));\r\n\r\n      // Clear the error message for the field being updated\r\n      setErrors((prev) => ({\r\n        ...prev,\r\n        permanentAddress: {\r\n          ...prev.permanentAddress,\r\n          [name]: '' // Clear the error message\r\n        }\r\n      }));\r\n\r\n      // If the pincode field is being updated and it is exactly 6 digits, fetch the data\r\n\r\n      if (name === 'pincode' && value.length === 6) {\r\n        // setNameData(name);\r\n        // setNameValue(value);\r\n        fetchDataForPermanentAddress(value); // Pass the pincode value to fetchData\r\n      }\r\n\r\n      setUserInfo((prevUserInfo) => ({\r\n        ...prevUserInfo,\r\n        [parentField]: {\r\n          ...prevUserInfo[parentField], // Keep other fields of the parent intact\r\n          [name]: value // Update only the specific field\r\n          // cityName: value\r\n        }\r\n      }));\r\n    };\r\n\r\n  const handlePermanentCityChange =\r\n    (parentField: keyof AddAppUser) => (event: SelectChangeEvent<string>) => {\r\n      // Find the selected city by name in the permanentCityList state\r\n      const selectedCity = permanentCityList.find(\r\n        (city) => city.name === event.target.value\r\n      );\r\n      const selectedValue = event.target.value;\r\n\r\n      if (selectedCity) {\r\n        setPermanentAddress((prev) => ({\r\n          ...prev,\r\n          cityName: selectedCity.name,\r\n          cityId: selectedCity.id // Store the selected city id\r\n        }));\r\n      } else {\r\n        console.error('Selected city not found');\r\n      }\r\n\r\n      setErrors((prev) => ({\r\n        ...prev,\r\n        permanentAddress: {\r\n          ...prev.permanentAddress,\r\n          city: '', // Clear the error message for address\r\n          state: '',\r\n          country: ''\r\n        }\r\n      }));\r\n      setUserInfo((prevUserInfo) => ({\r\n        ...prevUserInfo,\r\n        [parentField]: {\r\n          ...prevUserInfo[parentField], // Keep other fields of the parent intact\r\n          cityName: selectedValue // Update only the specific field\r\n        }\r\n      }));\r\n    };\r\n\r\n  const handlePermanentResidentialStatusChange =\r\n    (parentField: keyof AddAppUser) => (event: SelectChangeEvent<string>) => {\r\n      const selectedStatus = configData.residentialStatus.find(\r\n        (status) => status === event.target.value\r\n      );\r\n      const selectedValue = event.target.value;\r\n      if (selectedStatus) {\r\n        setPermanentAddress((prev) => ({\r\n          ...prev,\r\n          residentialStatus: selectedStatus // Store the selected residential status\r\n        }));\r\n      } else {\r\n        console.error('Selected residential status not found');\r\n      }\r\n      setErrors((prev) => ({\r\n        ...prev,\r\n        permanentAddress: {\r\n          ...prev.permanentAddress,\r\n          residentialStatus: '' // Clear the error message for address\r\n        }\r\n      }));\r\n      setUserInfo((prevUserInfo) => ({\r\n        ...prevUserInfo,\r\n        [parentField]: {\r\n          ...prevUserInfo[parentField], // Keep other fields of the parent intact\r\n          residentialStatus: selectedValue // Update only the specific field\r\n        }\r\n      }));\r\n    };\r\n  const handleCurrentResidentialStatusChange =\r\n    (parentField: keyof AddAppUser) => (event: SelectChangeEvent<string>) => {\r\n      const selectedStatus = configData.residentialStatus.find(\r\n        (status) => status === event.target.value\r\n      );\r\n      const selectedValue = event.target.value;\r\n\r\n      if (selectedStatus) {\r\n        setCurrentAddress((prev) => ({\r\n          ...prev,\r\n          residentialStatus: selectedStatus // Store the selected residential status\r\n        }));\r\n      } else {\r\n        console.error('Selected residential status not found');\r\n      }\r\n      setErrors((prev) => ({\r\n        ...prev,\r\n        currentAddress: {\r\n          ...prev.currentAddress,\r\n          residentialStatus: '' // Clear the error message for address\r\n        }\r\n      }));\r\n      setUserInfo((prevUserInfo) => ({\r\n        ...prevUserInfo,\r\n        [parentField]: {\r\n          ...prevUserInfo[parentField], // Keep other fields of the parent intact\r\n          residentialStatus: selectedValue // Update only the specific field\r\n        }\r\n      }));\r\n    };\r\n\r\n  const handleCurrentCityChange =\r\n    (parentField: keyof AddAppUser) => (event: SelectChangeEvent<string>) => {\r\n      // Find the selected city by name in the permanentCityList state\r\n      const selectedCity = currentCityList.find(\r\n        (city) => city.name === event.target.value\r\n      );\r\n      const selectedValue = event.target.value;\r\n\r\n      if (selectedCity) {\r\n        setCurrentAddress((prev) => ({\r\n          ...prev,\r\n          cityName: selectedCity.name,\r\n          cityId: selectedCity.id // Store the selected city id\r\n        }));\r\n      } else {\r\n        console.error('Selected city not found');\r\n      }\r\n      setErrors((prev) => ({\r\n        ...prev,\r\n        currentAddress: {\r\n          ...prev.currentAddress,\r\n          city: '', // Clear the error message for address\r\n          state: '',\r\n          country: ''\r\n        }\r\n      }));\r\n      setUserInfo((prevUserInfo) => ({\r\n        ...prevUserInfo,\r\n        [parentField]: {\r\n          ...prevUserInfo[parentField], // Keep other fields of the parent intact\r\n          cityName: selectedValue // Update only the specific field\r\n        }\r\n      }));\r\n    };\r\n\r\n  // const handleCurrentCityChange = (event: SelectChangeEvent<string>) => {\r\n  //   setSelectedCurrentAddress((prev) => ({\r\n  //     ...prev,\r\n  //     name: event.target.value // Set cityId directly\r\n  //   }));\r\n  //   setErrors((prev) => ({\r\n  //     ...prev,\r\n  //     currentAddress: {\r\n  //       ...prev.currentAddress,\r\n  //       city: '' // Clear the city error message\r\n  //     }\r\n  //   }));\r\n  // };\r\n\r\n  // const handleCurrentAddressChange = (\r\n  //   e: React.ChangeEvent<HTMLInputElement>\r\n  // ) => {\r\n  //   const { name, value } = e.target;\r\n  //   setCurrentAddress((prev) => ({ ...prev, [name]: value }));\r\n  // };\r\n\r\n  const handleCurrentAddressChange =\r\n    (parentField: keyof AddAppUser) =>\r\n    (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      const { name, value } = e.target;\r\n      setCurrentAddress((prev) => ({ ...prev, [name]: value }));\r\n      setErrors((prev) => ({\r\n        ...prev,\r\n        currentAddress: {\r\n          ...prev.currentAddress,\r\n          [name]: '' // Clear the error message\r\n        }\r\n      }));\r\n\r\n      if (name === 'pincode' && value.length === 6) {\r\n        fetchDataForCurrentAddress(value); // Pass the pincode value to fetchData\r\n      }\r\n      setUserInfo((prevUserInfo) => ({\r\n        ...prevUserInfo,\r\n        [parentField]: {\r\n          ...prevUserInfo[parentField], // Keep other fields of the parent intact\r\n          [name]: value // Update only the specific field\r\n        }\r\n      }));\r\n    };\r\n\r\n  console.log('hi', userInfo.currentAddress, userInfo);\r\n\r\n  useEffect(() => {\r\n    setCurrentAddress(userInfo?.permanentAddress);\r\n    // setCurrentAddress(userInfo?.selectedPermanentAddress)\r\n    // setSameAsPermanent(true);\r\n    if (\r\n      currentAddress?.addressLine1 == permanentAddress?.addressLine1 &&\r\n      currentAddress?.addressLine1\r\n    ) {\r\n      setSameAsPermanent(true);\r\n    }\r\n  }, []);\r\n  debugger;\r\n  const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSameAsPermanent(e.target.checked);\r\n\r\n    if (e.target.checked) {\r\n      setCurrentAddress(permanentAddress);\r\n      // console.log('info', userInfo.permanentAddress);\r\n    } else {\r\n      setCurrentAddress({\r\n        addressLine1: '',\r\n        addressLine2: '',\r\n        name: '',\r\n        cityName: '',\r\n        state: '',\r\n        country: '',\r\n        pincode: '',\r\n        residentialStatus: '',\r\n        latitude: null,\r\n        longitude: null,\r\n        cityId: null,\r\n        stateId: null,\r\n        countryId: null,\r\n        districtId: null\r\n      });\r\n    }\r\n  };\r\n\r\n  // const handleResidentialStatusChange = (event: SelectChangeEvent<string>) => {\r\n  //   setResidentialStatus(event.target.value);\r\n  // };\r\n\r\n  // const handleResidentialStatusChange = (event: SelectChangeEvent<string>) => {\r\n  //   setResidentialStatus(event.target.value);\r\n  //   setErrors((prev) => ({\r\n  //     ...prev,\r\n  //     residentialStatus: '' // Clear the error message\r\n  //   }));\r\n  // };\r\n\r\n  const handleVisaStatusChange = (event: SelectChangeEvent<string>) => {\r\n    setVisaStatus(event.target.value);\r\n    const selectedValue = event.target.value;\r\n    setErrors((prev) => ({\r\n      ...prev,\r\n      visaStatus: '' // Clear the error message\r\n    }));\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      visaStatus: selectedValue // Assuming 'heightId' is the field in your userInfo\r\n    }));\r\n  };\r\n\r\n  const handleNativePlace = (event) => {\r\n    setNativePlace(event.target.value);\r\n    const selectedValue = event.target.value;\r\n    setErrors((prev) => ({\r\n      ...prev,\r\n      nativePlace: '' // Clear the error message\r\n    }));\r\n\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      nativePlace: selectedValue // Assuming 'heightId' is the field in your userInfo\r\n    }));\r\n  };\r\n  const handleCitizenship = (event) => {\r\n    setCitizenship(event.target.value);\r\n    const selectedValue = event.target.value;\r\n    setErrors((prev) => ({\r\n      ...prev,\r\n      citizenship: '' // Clear the error message\r\n    }));\r\n\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      citizenship: selectedValue // Assuming 'heightId' is the field in your userInfo\r\n    }));\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const newErrors = {\r\n      permanentAddress: {\r\n        addressLine1: permanentAddress.addressLine1\r\n          ? ''\r\n          : 'Address is required',\r\n        city: permanentAddress.cityName ? '' : 'City is required',\r\n        state: permanentAddress.state ? '' : 'State is required',\r\n        country: permanentAddress.country ? '' : 'Country is required',\r\n        pincode: permanentAddress.pincode ? '' : 'Pincode is required',\r\n        residentialStatus: permanentAddress.residentialStatus\r\n          ? ''\r\n          : 'Residential Status is required'\r\n      },\r\n      currentAddress: {\r\n        addressLine1:\r\n          sameAsPermanent || currentAddress.addressLine1\r\n            ? ''\r\n            : 'Address is required',\r\n        city:\r\n          sameAsPermanent || currentAddress.cityName ? '' : 'City is required',\r\n        state:\r\n          sameAsPermanent || currentAddress.state ? '' : 'State is required',\r\n        country:\r\n          sameAsPermanent || currentAddress.country\r\n            ? ''\r\n            : 'Country is required',\r\n        pincode:\r\n          sameAsPermanent || currentAddress.pincode\r\n            ? ''\r\n            : 'Pincode is required',\r\n        residentialStatus:\r\n          sameAsPermanent || currentAddress.residentialStatus\r\n            ? ''\r\n            : 'Residential Status is required'\r\n      },\r\n\r\n      visaStatus: visaStatus ? '' : 'Visa Status is required',\r\n      willingToGoAbroad: willingToGoAbroad\r\n        ? ''\r\n        : 'Willing to go Abroad is required',\r\n      nativePlace: nativePlace ? '' : 'Native place is required',\r\n      citizenship: citizenship ? '' : 'Citizenship is required'\r\n    };\r\n\r\n    // Check if there are any errors\r\n    const hasErrors =\r\n      Object.values(newErrors.permanentAddress).some((error) => error !== '') ||\r\n      Object.values(newErrors.currentAddress).some((error) => error !== '') ||\r\n      // newErrors.residentialStatus !== '' ||\r\n      newErrors.visaStatus !== '' ||\r\n      newErrors.willingToGoAbroad !== '' ||\r\n      newErrors.nativePlace !== '' ||\r\n      newErrors.citizenship !== '';\r\n\r\n    return { newErrors, hasErrors };\r\n  };\r\n\r\n  let isEdit;\r\n  isEdit = localStorage.getItem('isEdit');\r\n\r\n  const handleNext = async () => {\r\n    // if(isEdit === \"false\"){\r\n\r\n    try {\r\n      // Validate form fields\r\n      // const userId = localStorage.getItem('userId');\r\n      const newToken = localStorage.getItem('newToken');\r\n      const rtoken = localStorage.getItem('rtoken');\r\n      const { newErrors, hasErrors } = validateForm();\r\n      setErrors(newErrors);\r\n\r\n      if (hasErrors) {\r\n        return; // Prevent submission if there are errors\r\n      }\r\n\r\n      const userId = localStorage.getItem('userId'); // Make sure userId is available\r\n      if (!userId) {\r\n        console.error('User ID is required');\r\n        return;\r\n      }\r\n      const token = localStorage.getItem('newToken');\r\n      // Construct the request payload for screen 6\r\n      const payload = {\r\n        id: userId,\r\n        screenNumber: 6, // Assuming this is step 6\r\n        token: token,\r\n        ...(token ? {} : { userId: userId }),\r\n        permanentAddress: {\r\n          addressLine1: userInfo?.permanentAddress?.addressLine1 || '',\r\n          addressLine2: userInfo?.permanentAddress?.addressLine2 || '',\r\n          pincode: userInfo?.permanentAddress?.pincode || '',\r\n          cityId: null,\r\n          districtId: permanentAddress?.districtId || null,\r\n          stateId: permanentAddress?.stateId || null,\r\n          countryId: permanentAddress?.countryId || null,\r\n          countryName: permanentAddress?.country || '',\r\n          stateName: permanentAddress.state || '',\r\n          // cityName: selectedPermanentAddress?.Id  || '',\r\n          // cityName: selectedPermanentAddress?.cityName || '',\r\n          cityName: permanentAddress.cityName,\r\n          latitude: userInfo?.permanentAddress?.latitude, // Should be set correctly\r\n          residentialStatus:\r\n            userInfo?.permanentAddress?.residentialStatus || '',\r\n          longitude: userInfo?.permanentAddress?.longitude || null\r\n        },\r\n        currentAddress: {\r\n          addressLine1: currentAddress?.addressLine1 || '',\r\n          addressLine2: currentAddress?.addressLine2 || '',\r\n          pincode: currentAddress?.pincode || '',\r\n          cityId: null,\r\n          districtId: currentAddress?.districtId || null,\r\n          stateId: currentAddress?.stateId || null,\r\n          countryId: currentAddress?.countryId || null,\r\n          countryName: currentAddress?.country || '',\r\n          stateName: currentAddress?.state || '',\r\n          cityName: currentAddress?.cityName || '',\r\n          latitude: currentAddress?.latitude || null,\r\n          longitude: currentAddress?.longitude || null,\r\n          residentialStatus: currentAddress.residentialStatus || ''\r\n        },\r\n        nativePlace: nativePlace || '',\r\n        willingToGoAbroad: willingToGoAbroad || '',\r\n        citizenship: citizenship || '',\r\n        visaStatus: visaStatus || ''\r\n      };\r\n\r\n      // Perform the POST request\r\n      const response = await fetch('/api/admin/users/completeUserProfileV2', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `MatrimonyAndroid|Bearer ${newToken}`, // Make sure the token is passed\r\n          refreshtoken: `${rtoken}`\r\n        },\r\n        body: JSON.stringify(payload)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to update profile details');\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Profile update successful:', data);\r\n\r\n      // Proceed to the next step if the response is successful\r\n      onNext();\r\n    } catch (error) {\r\n      console.error('Error in submitting form:', error.message);\r\n    }\r\n    // }else{\r\n    //   onNext();\r\n    // }\r\n  };\r\n  useEffect(() => {\r\n    if (cred?.isDemoUser) {\r\n      showSnackBar(\r\n        \"**Access Denied**\\nWe're sorry, but you do not have permission to access this feature.\"\r\n      );\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Box>\r\n      {cred.isDemoUser > 0 && <SnackbarComponent />}\r\n      <Card className=\"container\">\r\n        {/* Title */}\r\n        <Typography variant=\"h3\" className=\"title\">\r\n          {currentTitle}\r\n        </Typography>\r\n\r\n        {/* Progress Bar */}\r\n        <Box className=\"progress-bar-container\">\r\n          <Box className=\"progress-bar\" style={{ width: progressBarLength }} />\r\n        </Box>\r\n\r\n        <Box sx={{ width: '100%', mb: 2, p: 4 }}>\r\n          {/* Permanent Address Section */}\r\n          <Typography variant=\"h3\" className=\"section-title\">\r\n            Permanent Address\r\n          </Typography>\r\n          {/* Static Map for Permanent Address */}\r\n          <Box sx={{ mt: 2, mb: 2 }}>\r\n            {/* <iframe\r\n              width=\"100%\"\r\n              height=\"300\"\r\n              frameBorder=\"0\"\r\n              style={{ border: 0 }}\r\n              src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDEKhKKZ3AjjBPEWh3XJyiOmbckQvdWx5A\"\r\n              allowFullScreen\r\n            ></iframe> */}\r\n\r\n            <MapComponent\r\n              defaultCenter={{\r\n                lat: permanentAddress.latitude || 21.14,\r\n                lng: permanentAddress.longitude || 73.09\r\n              }}\r\n              onMarkerUpdate={handlePermanentAddressUpdate}\r\n            />\r\n          </Box>\r\n\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Address *</FormLabel>\r\n                <TextField\r\n                  name=\"addressLine1\"\r\n                  value={permanentAddress.addressLine1}\r\n                  // onChange={handlePermanentAddressChange}\r\n                  onChange={handlepAddressChange('permanentAddress')}\r\n                  size=\"small\"\r\n\r\n                  // error={!!errors.permanentAddress.address}\r\n                  // helperText={errors.permanentAddress.address}\r\n                />\r\n                {errors.permanentAddress.addressLine1 && (\r\n                  <Typography color=\"error\">\r\n                    {errors.permanentAddress.addressLine1}\r\n                  </Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Address</FormLabel>\r\n                <TextField\r\n                  name=\"addressLine2\"\r\n                  value={permanentAddress.addressLine2}\r\n                  onChange={handlePermanentAddressChange('permanentAddress')}\r\n                  placeholder=\"Enter Address place\"\r\n                  size=\"small\"\r\n                />\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            {/* <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>City *</FormLabel>\r\n                <TextField\r\n                  name=\"city\"\r\n                  value={permanentAddress.city}\r\n                  onChange={handlePermanentAddressChange}\r\n                  size=\"small\"\r\n                />\r\n              </FormControl>\r\n            </Grid> */}\r\n\r\n            {/* Permanent Address - City Dropdown */}\r\n\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Pincode *</FormLabel>\r\n                <TextField\r\n                  name=\"pincode\"\r\n                  value={permanentAddress.pincode}\r\n                  onChange={handlePermanentAddressChange('permanentAddress')}\r\n                  size=\"small\"\r\n                  // error={!!errors.permanentAddress.pincode}\r\n                  // helperText={errors.permanentAddress.pincode}\r\n                />\r\n                {errors.permanentAddress.pincode && (\r\n                  <Typography color=\"error\">\r\n                    {errors.permanentAddress.pincode}\r\n                  </Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>City *</FormLabel>\r\n                <Select\r\n                  value={permanentAddress.cityName} // Use the city state\r\n                  onChange={handlePermanentCityChange('permanentAddress')}\r\n                  size=\"small\"\r\n                  // error={!!errors.permanentAddress.city}\r\n                >\r\n                  <MenuItem value=\"\" disabled>\r\n                    Select City\r\n                  </MenuItem>\r\n                  {permanentCityList.map((cityName) => (\r\n                    <MenuItem key={cityName.id} value={cityName.name}>\r\n                      {cityName.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {errors.permanentAddress.city && (\r\n                  <Typography color=\"error\">\r\n                    {errors.permanentAddress.city}\r\n                  </Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            {/* Repeat similar changes for Current Address City field */}\r\n\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>State *</FormLabel>\r\n                <TextField\r\n                  name=\"state\"\r\n                  value={permanentAddress.state}\r\n                  onChange={handlePermanentAddressChange('permanentAddress')}\r\n                  size=\"small\"\r\n                  // error={!!errors.permanentAddress.state}\r\n                  // helperText={errors.permanentAddress.state}\r\n                />\r\n                {errors.permanentAddress.state && (\r\n                  <Typography color=\"error\">\r\n                    {errors.permanentAddress.state}\r\n                  </Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Country *</FormLabel>\r\n                <TextField\r\n                  name=\"country\"\r\n                  value={permanentAddress.country}\r\n                  onChange={handlePermanentAddressChange('permanentAddress')}\r\n                  size=\"small\"\r\n                  // error={!!errors.permanentAddress.country}\r\n                  // helperText={errors.permanentAddress.country}\r\n                />\r\n                {errors.permanentAddress.country && (\r\n                  <Typography color=\"error\">\r\n                    {errors.permanentAddress.country}\r\n                  </Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Residential Status *</FormLabel>\r\n                <Select\r\n                  value={permanentAddress.residentialStatus}\r\n                  onChange={handlePermanentResidentialStatusChange(\r\n                    'permanentAddress'\r\n                  )}\r\n                  size=\"small\"\r\n                  // error={!!errors.residentialStatus}\r\n                >\r\n                  <MenuItem value=\"\" disabled>\r\n                    Select Residential Status\r\n                  </MenuItem>\r\n                  {configData.residentialStatus.map((status) => (\r\n                    <MenuItem key={status} value={status}>\r\n                      {status}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {errors.permanentAddress.residentialStatus && (\r\n                  <Typography color=\"error\">\r\n                    {errors.permanentAddress.residentialStatus}\r\n                  </Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          {/* Current Address Section */}\r\n          <Typography variant=\"h3\" className=\"section-title\" sx={{ mt: 2 }}>\r\n            Current Address\r\n          </Typography>\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                checked={sameAsPermanent}\r\n                onChange={handleCheckboxChange}\r\n              />\r\n            }\r\n            label=\"Same as Permanent Address\"\r\n          />\r\n          {/* Static Map for Current Address */}\r\n\r\n          {/* {!sameAsPermanent && ( */}\r\n          <Grid>\r\n            <Box sx={{ mt: 2, mb: 2 }}>\r\n              <MapComponent\r\n                defaultCenter={{\r\n                  lat: currentAddress?.latitude || 21.14,\r\n                  lng: currentAddress?.longitude || 73.09\r\n                }}\r\n                onMarkerUpdate={handleCurrentAddressUpdate}\r\n              />\r\n            </Box>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                <FormControl fullWidth>\r\n                  <FormLabel>Address *</FormLabel>\r\n                  <TextField\r\n                    name=\"addressLine1\"\r\n                    value={currentAddress?.addressLine1}\r\n                    // onChange={handleCurrentAddressChange}\r\n                    onChange={handlecAddressChange('currentAddress')}\r\n                    size=\"small\"\r\n                    // error={!!errors.currentAddress.address}\r\n                    // helperText={errors.currentAddress.address}\r\n                  />\r\n                  {errors.currentAddress.addressLine1 && (\r\n                    <Typography color=\"error\">\r\n                      {errors.currentAddress.addressLine1}\r\n                    </Typography>\r\n                  )}\r\n                </FormControl>\r\n              </Grid>\r\n\r\n              <Grid item xs={12}>\r\n                <FormControl fullWidth>\r\n                  <FormLabel>Address</FormLabel>\r\n                  <TextField\r\n                    name=\"addressLine2\"\r\n                    value={currentAddress?.addressLine2}\r\n                    onChange={handleCurrentAddressChange('currentAddress')}\r\n                    placeholder=\"Enter Address place\"\r\n                    size=\"small\"\r\n                  />\r\n                </FormControl>\r\n              </Grid>\r\n\r\n              <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                  <FormLabel>Pincode *</FormLabel>\r\n                  <TextField\r\n                    name=\"pincode\"\r\n                    value={currentAddress?.pincode}\r\n                    onChange={handleCurrentAddressChange('currentAddress')}\r\n                    size=\"small\"\r\n                    // error={!!errors.currentAddress.pincode}\r\n                    // helperText={errors.currentAddress.pincode}\r\n                  />\r\n                  {errors.currentAddress.pincode && (\r\n                    <Typography color=\"error\">\r\n                      {errors.currentAddress.pincode}\r\n                    </Typography>\r\n                  )}\r\n                </FormControl>\r\n              </Grid>\r\n\r\n              <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                  <FormLabel>City *</FormLabel>\r\n                  <Select\r\n                    value={currentAddress?.cityName} // Use the city state\r\n                    onChange={handleCurrentCityChange('currentAddress')}\r\n                    size=\"small\"\r\n                    // error={!!errors.currentAddress.city}\r\n                  >\r\n                    <MenuItem value=\"\" disabled>\r\n                      Select City\r\n                    </MenuItem>\r\n                    {/* Replace these with actual city names */}\r\n                    {currentCityList.map((cityName) => (\r\n                      <MenuItem key={cityName.id} value={cityName.name}>\r\n                        {cityName.name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                  {errors.currentAddress.city && (\r\n                    <Typography color=\"error\">\r\n                      {errors.currentAddress.city}\r\n                    </Typography>\r\n                  )}\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                  <FormLabel>State *</FormLabel>\r\n                  <TextField\r\n                    name=\"state\"\r\n                    value={currentAddress?.state}\r\n                    onChange={handleCurrentAddressChange('currentAddress')}\r\n                    size=\"small\"\r\n                    // error={!!errors.currentAddress.state}\r\n                    // helperText={errors.currentAddress.state}\r\n                  />\r\n                  {errors.currentAddress.state && (\r\n                    <Typography color=\"error\">\r\n                      {errors.currentAddress.state}\r\n                    </Typography>\r\n                  )}\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                  <FormLabel>Country *</FormLabel>\r\n                  <TextField\r\n                    name=\"country\"\r\n                    value={currentAddress?.country}\r\n                    onChange={handleCurrentAddressChange('currentAddress')}\r\n                    size=\"small\"\r\n                    // error={!!errors.currentAddress.country}\r\n                    // helperText={errors.currentAddress.country}\r\n                  />\r\n                  {errors.currentAddress.country && (\r\n                    <Typography color=\"error\">\r\n                      {errors.currentAddress.country}\r\n                    </Typography>\r\n                  )}\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <FormControl fullWidth>\r\n                  <FormLabel>Residential Status *</FormLabel>\r\n                  <Select\r\n                    value={currentAddress?.residentialStatus}\r\n                    onChange={handleCurrentResidentialStatusChange(\r\n                      'currentAddress'\r\n                    )}\r\n                    size=\"small\"\r\n                    // error={!!errors.residentialStatus}\r\n                  >\r\n                    <MenuItem value=\"\" disabled>\r\n                      Select Residential Status\r\n                    </MenuItem>\r\n                    {configData.residentialStatus.map((status) => (\r\n                      <MenuItem key={status} value={status}>\r\n                        {status}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                  {errors.currentAddress.residentialStatus && (\r\n                    <Typography color=\"error\">\r\n                      {errors.currentAddress.residentialStatus}\r\n                    </Typography>\r\n                  )}\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          {/* )} */}\r\n\r\n          {/* Residential Status and Visa Status Section */}\r\n          <Typography variant=\"h3\" className=\"section-title\" sx={{ mt: 2 }}>\r\n            Additional Information\r\n          </Typography>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Native Place</FormLabel>\r\n                <TextField\r\n                  name=\"nativePlace\"\r\n                  value={nativePlace}\r\n                  onChange={handleNativePlace}\r\n                  placeholder=\"Enter Native place\"\r\n                  size=\"small\"\r\n                />\r\n                {errors.nativePlace && (\r\n                  <Typography color=\"error\">{errors.nativePlace}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>CitizenShip *</FormLabel>\r\n                <TextField\r\n                  name=\"citizenship\"\r\n                  value={citizenship}\r\n                  onChange={handleCitizenship}\r\n                  placeholder=\"Enter CitizenShip\"\r\n                  size=\"small\"\r\n                />\r\n                {errors.citizenship && (\r\n                  <Typography color=\"error\">{errors.citizenship}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Willing To Go Abroad *</FormLabel>\r\n                <RadioGroup\r\n                  name=\"willingToGoAbroad\"\r\n                  value={willingToGoAbroad}\r\n                  // onChange={handleRadioChange(setWillingToGoAbroad)}\r\n                  onChange={handleRadioChange(setWillingToGoAbroad)}\r\n                  row\r\n                >\r\n                  <FormControlLabel value={1} control={<Radio />} label=\"Yes\" />\r\n                  <FormControlLabel value={2} control={<Radio />} label=\"No\" />\r\n                </RadioGroup>\r\n                {errors.willingToGoAbroad && (\r\n                  <Typography color=\"error\">\r\n                    {errors.willingToGoAbroad}\r\n                  </Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Visa Status *</FormLabel>\r\n                <Select\r\n                  value={visaStatus}\r\n                  onChange={handleVisaStatusChange}\r\n                  size=\"small\"\r\n                  // error={!!errors.visaStatus}\r\n                >\r\n                  <MenuItem value=\"\" disabled>\r\n                    Select Visa Status\r\n                  </MenuItem>\r\n                  {configData.visaStatusList.map((status) => (\r\n                    <MenuItem key={status} value={status}>\r\n                      {status}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {errors.visaStatus && (\r\n                  <Typography color=\"error\">{errors.visaStatus}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n\r\n        {/* Error Message */}\r\n        {/* {error && <Typography color=\"error\">{error}</Typography>} */}\r\n\r\n        {/* Navigation Buttons */}\r\n        <Box className=\"navigation-buttons\">\r\n          <Button variant=\"contained\" onClick={onBack}>\r\n            Back\r\n          </Button>\r\n          <Button\r\n  variant=\"contained\"\r\n  onClick={ cred.isDemoUser == '1' ?onNext: handleNext }\r\n>\r\n            Next\r\n          </Button>\r\n        </Box>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Step6;\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  Typography,\r\n  Grid,\r\n  FormControl,\r\n  FormLabel,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  Radio,\r\n  Select,\r\n  MenuItem,\r\n  SelectChangeEvent,\r\n  TextField,\r\n  FormHelperText\r\n} from '@mui/material';\r\nimport '../addAppUser.css';\r\nimport { AddAppUser } from 'src/models/addappuser';\r\nimport { useSnackbar } from 'src/content/useSnackbar';\r\n\r\ninterface Step7Props {\r\n  title: { id: number; name: string }[];\r\n  progressBarLength: string;\r\n  onBack: () => void;\r\n  onNext: () => void;\r\n  currentStepId: number;\r\n  userInfo: any; // Add userInfo prop to access the global state\r\n  setUserInfo: (userInfo: any) => void;\r\n}\r\n\r\nconst Step7: React.FC<Step7Props> = ({\r\n  title,\r\n  progressBarLength,\r\n  onBack,\r\n  onNext,\r\n  currentStepId,\r\n  userInfo,\r\n  setUserInfo\r\n}) => {\r\n  // State Management\r\n  // const [educationMedium, setEducationMedium] = useState<string>('');\r\n  const [educationMedium, setEducationMedium] = useState<\r\n    { id: number; name: string }[]\r\n  >([]);\r\n  const [selectedEducationMedium, setSelectedEducationMedium] = useState(\r\n    userInfo.educationMediumId || ''\r\n  );\r\n  // const [degreeType, setDegreeType] = useState<string>('');\r\n  const [degreeType, setDegreeType] = useState<{ id: number; name: string }[]>(\r\n    []\r\n  );\r\n  const [selectedDegreeType, setSelectedDegreeType] = useState(\r\n    userInfo.educationTypeId || ''\r\n  );\r\n  \r\n  \r\n  const [educationDegree, setEducationDegree] = useState<\r\n    { id: number; name: string; educationTypeId: number }[]\r\n  >([]);\r\n\r\n  const [selectedEducationDegree, setSelectedEducationDegree] = useState(\r\n    userInfo.educationId || ''\r\n  );\r\n  \r\n  const [filteredEducationDegree, setFilteredEducationDegree] = useState<\r\n    { id: number; name: string }[]\r\n  >([]);\r\n\r\n  const [isWorking, setIsWorking] = useState<string>(\r\n    userInfo.areYouWorking || ''\r\n  );\r\n  const [occupationType, setOccupationType] = useState<string>(\r\n    userInfo.occupationId || ''\r\n  );\r\n  // const [designation, setDesignation] = useState<string>('');\r\n  const [designation, setDesignation] = useState<\r\n    { id: number; name: string }[]\r\n  >([]);\r\n  const [selectedDesignation, setSelectedDesignation] = useState(\r\n    userInfo.designation || ''\r\n  );\r\n  // const [workType, setWorkType] = useState<string>('');\r\n  const [workType, setWorkType] = useState<{ id: number; name: string }[]>([]);\r\n  const [selectedWorkType, setSelectedWorkType] = useState(\r\n    userInfo.employmentTypeId || ''\r\n  );\r\n  // const [salaryRange, setSalaryRange] = useState<string>('');\r\n  const [salaryRange, setSalaryRange] = useState<\r\n    { id: number; value: string }[]\r\n  >([]);\r\n  const [selectedSalaryRange, setSelectedSalaryRange] = useState(\r\n    userInfo.annualIncome || ''\r\n  );\r\n  const [companyName, setCompanyName] = useState<string>(\r\n    userInfo.companyName || ''\r\n  );\r\n  const [businessName, setBusinessName] = useState<string>(\r\n    userInfo.businessName || ''\r\n  );\r\n  const [apiResponse, setApiResponse] = React.useState<string | null>(null);\r\n  const [apiError, setApiError] = React.useState<string | null>(null);\r\n  const { showSnackBar, SnackbarComponent } = useSnackbar();\r\n  const [errorMessages, setErrorMessages] = useState({\r\n    educationMedium: '',\r\n    degreeType: '',\r\n    educationDegree: '',\r\n    isWorking: '',\r\n    occupationType: '',\r\n    designation: '',\r\n    workType: '',\r\n    salaryRange: '',\r\n    companyName: '',\r\n    businessName: ''\r\n  });\r\n\r\n  const [errors, setErrors] = useState({\r\n    educationMedium: false,\r\n    degreeType: false,\r\n    educationDegree: false,\r\n    isWorking: false,\r\n    occupationType: false,\r\n    designation: false,\r\n    workType: false,\r\n    salaryRange: false,\r\n    companyName: false,\r\n    businessName: false\r\n  });\r\n\r\n  const currentTitle =\r\n    title.find((item) => item.id === currentStepId)?.name || '';\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await fetch('/api/app/users/getMasterData', {\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Fetched data:', data);\r\n\r\n      if (data && data.recordList) {\r\n        setDegreeType(data.recordList.educationType || []);\r\n        setEducationMedium(data.recordList.educationMedium || []);\r\n        setEducationDegree(data.recordList.education || []);\r\n        setDesignation(data.recordList.occupation || []);\r\n        setWorkType(data.recordList.employmentType || []);\r\n        setSalaryRange(data.recordList.annualIncome || []);\r\n      } else {\r\n        console.error('Unexpected data format:', data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Handlers for form controls\r\n  // const handleSelectChange =\r\n  //   (setter: React.Dispatch<React.SetStateAction<string>>) =>\r\n  //   (event: SelectChangeEvent<string>) => {\r\n  //     setter(event.target.value as string);\r\n\r\n  //   };\r\n\r\n  // const handleRadioChange =\r\n  //   (setter: React.Dispatch<React.SetStateAction<string>>) =>\r\n  //   (event: React.ChangeEvent<HTMLInputElement>) => {\r\n  //     setter(event.target.value);\r\n\r\n  //   };\r\n\r\n  const handleSelectChange =\r\n    (\r\n      setter: React.Dispatch<React.SetStateAction<string>>,\r\n      field: string,\r\n      fieldName: keyof AddAppUser\r\n    ) =>\r\n    (event: SelectChangeEvent<string>) => {\r\n      const value = event.target.value as string;\r\n      setter(value);\r\n\r\n      // Remove error if the field is valid now\r\n      setErrors((prevErrors) => ({\r\n        ...prevErrors,\r\n        [field]: false // Clear error for this field\r\n      }));\r\n\r\n      setErrorMessages((prevMessages) => ({\r\n        ...prevMessages,\r\n        [field]: '' // Clear error message for this field\r\n      }));\r\n      setUserInfo((prevUserInfo) => ({\r\n        ...prevUserInfo,\r\n        [fieldName]: value // Update the specific field in userInfo\r\n      }));\r\n    };\r\n\r\n  const handleCompanyNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = e.target.value;\r\n    setCompanyName(e.target.value);\r\n\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      companyName: value\r\n    }));\r\n  };\r\n  const handleBusinessNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = e.target.value;\r\n    setBusinessName(e.target.value);\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      businessName: value\r\n    }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (selectedDegreeType) {\r\n      const selectedEducationType = degreeType.find(\r\n        (type) => type.name === selectedDegreeType\r\n      );\r\n  \r\n      if (selectedEducationType) {\r\n        const filteredDegrees = educationDegree.filter(\r\n          (degree) => degree.educationTypeId === selectedEducationType.id\r\n        );\r\n        setFilteredEducationDegree(filteredDegrees);\r\n      }\r\n    }\r\n  }, [selectedDegreeType, educationDegree]);\r\n  let cred = (JSON.parse(localStorage.getItem('Credentials')) as any);\r\n\r\n  const handleEducationTypeChange = (event: SelectChangeEvent<string>) => {\r\n    const selectedTypeName = event.target.value as string;\r\n    setSelectedDegreeType(selectedTypeName);\r\n\r\n    // Find the selected educationType by name\r\n    const selectedEducationType = degreeType.find(\r\n      (type) => type.name == selectedTypeName\r\n    );\r\n\r\n    if (selectedEducationType) {\r\n      // Filter educationDegree based on educationTypeId\r\n      const filteredDegrees = educationDegree.filter(\r\n        (degree) => degree.educationTypeId == selectedEducationType.id\r\n      );\r\n      setFilteredEducationDegree(filteredDegrees); // Update the filtered list\r\n      setSelectedEducationDegree('');\r\n    } else {\r\n      setFilteredEducationDegree([]); // Clear the degrees if no match\r\n      setSelectedEducationDegree('');\r\n    }\r\n\r\n    // Clear any existing errors for this field\r\n    setErrors((prevErrors) => ({\r\n      ...prevErrors,\r\n      degreeType: false\r\n    }));\r\n    setErrorMessages((prevMessages) => ({\r\n      ...prevMessages,\r\n      degreeType: ''\r\n    }));\r\n\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      educationTypeId: selectedTypeName // Assuming 'heightId' is the field in your userInfo\r\n    }));\r\n  };\r\n\r\n  \r\n\r\n  // const handleRadioChange =\r\n  //   (\r\n  //     setter: React.Dispatch<React.SetStateAction<string>>,\r\n  //     field: string\r\n  //   ) =>\r\n  //   (event: React.ChangeEvent<HTMLInputElement>) => {\r\n  //     const value = event.target.value;\r\n  //     setter(value);\r\n\r\n  //     // Remove error if the field is valid now\r\n  //     setErrors((prevErrors) => ({\r\n  //       ...prevErrors,\r\n  //       [field]: false, // Clear error for this field\r\n  //     }));\r\n\r\n  //     setErrorMessages((prevMessages) => ({\r\n  //       ...prevMessages,\r\n  //       [field]: '', // Clear error message for this field\r\n  //     }));\r\n  //   };\r\n\r\n  const handleRadioChange =\r\n    (\r\n      setter: React.Dispatch<React.SetStateAction<string>>,\r\n      field: string,\r\n      fieldName: keyof AddAppUser\r\n    ) =>\r\n    (event: React.ChangeEvent<HTMLInputElement>) => {\r\n      const value = event.target.value;\r\n      setter(value);\r\n\r\n      // Clear the input field when switching between Job and Business\r\n      if (value == '1') {\r\n        setCompanyName(''); // Clear companyName when switching to \"Job\"\r\n      } else if (value == '2') {\r\n        setBusinessName(''); // Clear businessName when switching to \"Business\"\r\n      }\r\n\r\n      // Remove error if the field is valid now\r\n      setErrors((prevErrors) => ({\r\n        ...prevErrors,\r\n        [field]: false // Clear error for this field\r\n      }));\r\n\r\n      setErrorMessages((prevMessages) => ({\r\n        ...prevMessages,\r\n        [field]: '' // Clear error message for this field\r\n      }));\r\n\r\n      setUserInfo((prevUserInfo) => ({\r\n        ...prevUserInfo,\r\n        [fieldName]: value // Update the specific field in userInfo\r\n      }));\r\n    };\r\n\r\n  // const handleValidation = () => {\r\n  //   const newErrors = {\r\n  //     educationMedium: educationMedium === '',\r\n  //     degreeType: degreeType === '',\r\n  //     degree: degree === '',\r\n  //     isWorking: isWorking === '',\r\n  //     occupationType: isWorking === 'Yes' && occupationType === '',\r\n  //     designation: isWorking === 'Yes' && designation === '',\r\n  //     workType: isWorking === 'Yes' && workType === '',\r\n  //     salaryRange: isWorking === 'Yes' && salaryRange === '',\r\n  //     companyName: isWorking === 'Yes' && companyName === ''\r\n  //   };\r\n\r\n  //   setErrors(newErrors);\r\n\r\n  //   return !Object.values(newErrors).some((error) => error);\r\n  // };\r\n  const handleValidation = () => {\r\n    const newErrors = {\r\n      // educationMedium: educationMedium === '',\r\n      educationMedium: selectedEducationMedium === '',\r\n      // degreeType: degreeType === '',\r\n      degreeType: selectedDegreeType === '',\r\n      // educationDegree: educationDegree === '',\r\n      educationDegree: selectedEducationDegree === '',\r\n      isWorking: isWorking === '',\r\n      occupationType: isWorking === '1' && occupationType === '',\r\n      designation: isWorking === '1' && selectedDesignation === '',\r\n      // workType: isWorking === 'Yes' && workType === '',\r\n      workType: isWorking === '1' && selectedWorkType === '',\r\n      // salaryRange: isWorking === 'Yes' && salaryRange === '',\r\n      salaryRange: isWorking === '1' && selectedSalaryRange === '',\r\n      // companyName: isWorking === '1' && companyName === ''\r\n      companyName: occupationType === '1' && companyName === '', // Validate companyName if \"Job\" is selected\r\n      businessName: occupationType === '2' && businessName === ''\r\n    };\r\n\r\n    const newErrorMessages = {\r\n      // educationMedium: educationMedium === '' ? 'Education medium is required' : '',\r\n      educationMedium:\r\n        selectedEducationMedium === '' ? 'Education medium is required' : '',\r\n      // degreeType: degreeType === '' ? 'Education type is required' : '',\r\n      degreeType: selectedDegreeType === '' ? 'Education type is required' : '',\r\n      // educationDegree: educationDegree === '' ? 'Education degree is required' : '',\r\n      educationDegree:\r\n        selectedEducationDegree === '' ? 'Education degree is required' : '',\r\n      isWorking: isWorking === '' ? 'Employment status is required' : '',\r\n      occupationType:\r\n        isWorking === '1' && occupationType === ''\r\n          ? 'Occupation type is required'\r\n          : '',\r\n      designation:\r\n        isWorking === '1' && selectedDesignation === ''\r\n          ? 'Designation is required'\r\n          : '',\r\n      workType:\r\n        isWorking === '1' && selectedWorkType === ''\r\n          ? 'Work type is required'\r\n          : '',\r\n      salaryRange:\r\n        isWorking === '1' && selectedSalaryRange === ''\r\n          ? 'Salary range is required'\r\n          : '',\r\n      // companyName:\r\n      //   isWorking === '1' && companyName === ''\r\n      //     ? 'name is required'\r\n      //     : ''\r\n      companyName:\r\n        occupationType === '1' && companyName === ''\r\n          ? 'Company name is required'\r\n          : '', // Error message for companyName\r\n      businessName:\r\n        occupationType === '2' && businessName === ''\r\n          ? 'Business name is required'\r\n          : ''\r\n    };\r\n\r\n    setErrors(newErrors);\r\n    setErrorMessages(newErrorMessages);\r\n\r\n    return !Object.values(newErrors).some((error) => error);\r\n  };\r\n\r\n  let isEdit;\r\n  isEdit = localStorage.getItem('isEdit');\r\n\r\n  const handleNext = async () => {\r\n    if (handleValidation()) {\r\n      // if(isEdit === \"false\"){\r\n      // Retrieve user data from localStorage\r\n      const userId = localStorage.getItem('userId');\r\n      const newToken = localStorage.getItem('newToken');\r\n      const rtoken = localStorage.getItem('rtoken');\r\n\r\n      // if (!userId || !newToken || !rtoken) {\r\n      //   setApiError('User information is missing.');\r\n      //   return;\r\n      // }\r\n\r\n      const token = localStorage.getItem('newToken');\r\n      // Prepare data for Step 7 API call\r\n      const step7Data = {\r\n        id: userId,\r\n        screenNumber: 7,\r\n        educationTypeId:\r\n          degreeType.find((item) => item.name === userInfo.educationTypeId)\r\n            ?.id || null,\r\n        educationMediumId:\r\n          educationMedium.find(\r\n            (item) => item.name === userInfo.educationMediumId\r\n          )?.id || null,\r\n        educationId: userInfo.educationId,\r\n        // educationDegree.find((item) => item.name === userInfo.educationId)\r\n        //   ?.id || null,\r\n        areYouWorking: userInfo.areYouWorking, // Assuming 1 = Working, 2 = Not Working\r\n        occupationId: userInfo.occupationId || null,\r\n        designation:userInfo.designation,\r\n          // designation.find((item) => item.name == userInfo.designation)?.id ||\r\n          // null,\r\n        employmentTypeId: userInfo.employmentTypeId,\r\n          // workType.find((item) => item.name === userInfo.employmentTypeId)\r\n          //   ?.id || null,\r\n        companyName: companyName || null,\r\n        businessName: businessName || null,\r\n        annualIncomeId: userInfo.annualIncomeId,\r\n          // salaryRange.find((item) => item.value === userInfo.annualIncome)\r\n          //   ?.id || null,\r\n        token: token,\r\n        ...(token ? {} : { userId: userId })\r\n      };\r\n\r\n      try {\r\n        // Call completeUserProfileV2 for Step 7\r\n        const step7Response = await fetch(\r\n          '/api/admin/users/completeUserProfileV2',\r\n          {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              Authorization: `MatrimonyAndroid|Bearer ${newToken}`,\r\n              refreshtoken: `${rtoken}`\r\n            },\r\n            body: JSON.stringify(step7Data)\r\n          }\r\n        );\r\n\r\n        if (!step7Response.ok)\r\n          throw new Error('Failed to update profile with Step 7 data');\r\n\r\n        // Handle successful response\r\n        setApiResponse('Profile updated successfully for Step 7');\r\n        onNext(); // Move to next step\r\n      } catch (error) {\r\n        // Handle API error\r\n        setApiError(error.message);\r\n      }\r\n      // }else{\r\n      //   onNext();\r\n      // }\r\n    }\r\n  };\r\n  \r\n  useEffect(() => {\r\n    if (cred?.isDemoUser) {\r\n      showSnackBar(\r\n        \"**Access Denied**\\nWe're sorry, but you do not have permission to access this feature.\"\r\n      );\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Box>\r\n      {cred.isDemoUser > 0 && <SnackbarComponent />}\r\n      <Card className=\"container\">\r\n        {/* Title */}\r\n        <Typography variant=\"h3\" className=\"title\">\r\n          {currentTitle}\r\n        </Typography>\r\n\r\n        {/* Progress Bar */}\r\n        <Box className=\"progress-bar-container\">\r\n          <Box className=\"progress-bar\" style={{ width: progressBarLength }} />\r\n        </Box>\r\n\r\n        <Box sx={{ width: '100%', mb: 2, p: 4 }}>\r\n          <Grid container spacing={3}>\r\n            {/* Education Details */}\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h3\">Education Details</Typography>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Education Medium *</FormLabel>\r\n                <Select\r\n                  value={selectedEducationMedium}\r\n                  onChange={handleSelectChange(\r\n                    setSelectedEducationMedium,\r\n                    'educationMedium',\r\n                    'educationMediumId'\r\n                  )}\r\n                  size=\"small\"\r\n                  displayEmpty\r\n                >\r\n                  <MenuItem value=\"\" disabled>\r\n                    Select Education Medium\r\n                  </MenuItem>\r\n                  {educationMedium.map((item) => (\r\n                    <MenuItem key={item.id} value={item.name}>\r\n                      {item.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {errorMessages.educationMedium && (\r\n                  <FormHelperText error>\r\n                    {errorMessages.educationMedium}\r\n                  </FormHelperText>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            {/* <Grid item xs={6}>\r\n            <FormControl fullWidth>\r\n              <FormLabel>Education Type *</FormLabel>\r\n              <Select\r\n                value={selectedDegreeType}\r\n                onChange={handleSelectChange(setSelectedDegreeType, 'degreeType')}\r\n                size=\"small\"\r\n                displayEmpty\r\n              >\r\n                <MenuItem value=\"\" disabled>\r\n                  Select Education Type\r\n                </MenuItem>\r\n                {degreeType.map((item) => (\r\n                    <MenuItem key={item.id} value={item.name}>\r\n                      {item.name}\r\n                    </MenuItem>\r\n                  ))}\r\n              </Select>\r\n              {errorMessages.degreeType && (\r\n                <FormHelperText error>\r\n                  {errorMessages.degreeType}\r\n                </FormHelperText>\r\n              )}\r\n            </FormControl>\r\n          </Grid> */}\r\n\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Education Type *</FormLabel>\r\n                <Select\r\n                  value={selectedDegreeType}\r\n                  onChange={handleEducationTypeChange} // Use the new handler\r\n                  size=\"small\"\r\n                  displayEmpty\r\n                >\r\n                  <MenuItem value=\"\" disabled>\r\n                    Select Education Type\r\n                  </MenuItem>\r\n                  {degreeType.map((item) => (\r\n                    <MenuItem key={item.id} value={item.name}>\r\n                      {item.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {errorMessages.degreeType && (\r\n                  <FormHelperText error>\r\n                    {errorMessages.degreeType}\r\n                  </FormHelperText>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n           \r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Education Degree *</FormLabel>\r\n                <Select\r\n                  value={selectedEducationDegree}\r\n                  onChange={handleSelectChange(\r\n                    setSelectedEducationDegree,\r\n                    'educationDegree',\r\n                    'educationId'\r\n                  )}\r\n                  size=\"small\"\r\n                  displayEmpty\r\n                  renderValue={(selected) => {\r\n                    const selectedItem = filteredEducationDegree.find(\r\n                      (item) => item.id === selected\r\n                    );\r\n                    return selectedItem ? selectedItem.name : 'Select Degree';\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"\" disabled>\r\n                    Select Degree\r\n                  </MenuItem>\r\n                  {filteredEducationDegree.map((item) => (\r\n                    <MenuItem key={item.id} value={item.id}>\r\n                      {item.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {errorMessages.educationDegree && (\r\n                  <FormHelperText error>\r\n                    {errorMessages.educationDegree}\r\n                  </FormHelperText>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            {/* Career Details */}\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h3\">Career Details</Typography>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n              <FormControl component=\"fieldset\">\r\n                <FormLabel>Are you working? *</FormLabel>\r\n                <RadioGroup\r\n                  value={isWorking}\r\n                  onChange={handleRadioChange(\r\n                    setIsWorking,\r\n                    'isWorking',\r\n                    'areYouWorking'\r\n                  )}\r\n                  row\r\n                >\r\n                  <FormControlLabel value={1} control={<Radio />} label=\"Yes\" />\r\n                  <FormControlLabel value={2} control={<Radio />} label=\"No\" />\r\n                </RadioGroup>\r\n                {errorMessages.isWorking && (\r\n                  <FormHelperText error>\r\n                    {errorMessages.isWorking}\r\n                  </FormHelperText>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            {/* Conditionally Rendered Fields */}\r\n            {isWorking == '1' && (\r\n              <>\r\n                {/* <Grid item xs={6}>\r\n                <FormControl component=\"fieldset\">\r\n                  <FormLabel>Occupation Type *</FormLabel>\r\n                  <RadioGroup\r\n                    value={occupationType}\r\n                    onChange={handleRadioChange(setOccupationType, 'occupationType')}\r\n                    row\r\n                  >\r\n                    <FormControlLabel\r\n                      value={1}\r\n                      control={<Radio />}\r\n                      label=\"Job\"\r\n                    />\r\n                    <FormControlLabel\r\n                      value={2}\r\n                      control={<Radio />}\r\n                      label=\"Business\"\r\n                    />\r\n                  </RadioGroup>\r\n                  {errorMessages.occupationType && (\r\n                    <FormHelperText error>\r\n                      {errorMessages.occupationType}\r\n                    </FormHelperText>\r\n                  )}\r\n                </FormControl>\r\n              </Grid> */}\r\n\r\n                <Grid item xs={6}>\r\n                  <FormControl component=\"fieldset\">\r\n                    <FormLabel>Occupation Type *</FormLabel>\r\n                    <RadioGroup\r\n                      value={occupationType}\r\n                      onChange={handleRadioChange(\r\n                        setOccupationType,\r\n                        'occupationType',\r\n                        'occupationId'\r\n                      )}\r\n                      row\r\n                    >\r\n                      <FormControlLabel\r\n                        value=\"1\"\r\n                        control={<Radio />}\r\n                        label=\"Job\"\r\n                      />\r\n                      <FormControlLabel\r\n                        value=\"2\"\r\n                        control={<Radio />}\r\n                        label=\"Business\"\r\n                      />\r\n                    </RadioGroup>\r\n                    {errorMessages.occupationType && (\r\n                      <FormHelperText error>\r\n                        {errorMessages.occupationType}\r\n                      </FormHelperText>\r\n                    )}\r\n                  </FormControl>\r\n                </Grid>\r\n\r\n                <Grid item xs={6}>\r\n                  <FormControl fullWidth>\r\n                    <FormLabel>Designation</FormLabel>\r\n                    <Select\r\n                      value={selectedDesignation}\r\n                      onChange={handleSelectChange(\r\n                        setSelectedDesignation,\r\n                        'designation',\r\n                        'designation'\r\n                      )}\r\n                      size=\"small\"\r\n                      displayEmpty\r\n                    >\r\n                      <MenuItem value=\"\" disabled>\r\n                        Select Designation\r\n                      </MenuItem>\r\n                      {designation.map((item) => (\r\n                        <MenuItem key={item.id} value={item.name}>\r\n                          {item.name}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                    {errorMessages.designation && (\r\n                      <FormHelperText error>\r\n                        {errorMessages.designation}\r\n                      </FormHelperText>\r\n                    )}\r\n                  </FormControl>\r\n                </Grid>\r\n\r\n                {/* <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                  <FormLabel>Company Name *</FormLabel>\r\n                  <TextField\r\n                    value={companyName}\r\n                    onChange={(e) => setCompanyName(e.target.value)}\r\n                    size=\"small\"\r\n                    placeholder=\"Enter Company Name\"\r\n                  />\r\n                  {errorMessages.companyName && (\r\n                    <FormHelperText error>\r\n                      {errorMessages.companyName}\r\n                    </FormHelperText>\r\n                  )}\r\n                </FormControl>\r\n              </Grid> */}\r\n\r\n                {occupationType == '1' ? (\r\n                  <Grid item xs={6}>\r\n                    <FormControl fullWidth>\r\n                      <FormLabel>Company Name *</FormLabel>\r\n                      <TextField\r\n                        value={companyName}\r\n                        onChange={handleCompanyNameChange}\r\n                        size=\"small\"\r\n                        placeholder=\"Enter Company Name\"\r\n                      />\r\n                      {errorMessages.companyName && (\r\n                        <FormHelperText error>\r\n                          {errorMessages.companyName}\r\n                        </FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  </Grid>\r\n                ) : occupationType == '2' ? (\r\n                  <Grid item xs={6}>\r\n                    <FormControl fullWidth>\r\n                      <FormLabel>Business Name *</FormLabel>\r\n                      <TextField\r\n                        value={businessName}\r\n                        onChange={handleBusinessNameChange}\r\n                        size=\"small\"\r\n                        placeholder=\"Enter Business Name\"\r\n                      />\r\n                      {errorMessages.businessName && (\r\n                        <FormHelperText error>\r\n                          {errorMessages.businessName}\r\n                        </FormHelperText>\r\n                      )}\r\n                    </FormControl>\r\n                  </Grid>\r\n                ) : null}\r\n\r\n                <Grid item xs={6}>\r\n                  <FormControl fullWidth>\r\n                    <FormLabel>Work Type</FormLabel>\r\n                    <Select\r\n                      value={selectedWorkType}\r\n                      onChange={handleSelectChange(\r\n                        setSelectedWorkType,\r\n                        'workType',\r\n                        'employmentTypeId'\r\n                      )}\r\n                      size=\"small\"\r\n                      displayEmpty\r\n                      renderValue={(selected) => {\r\n                        const selectedItem = workType.find((item) => item.id === selected);\r\n                        return selectedItem ? selectedItem.name : 'Select Work Type';\r\n\r\n                      }}\r\n                    >\r\n                      <MenuItem value=\"\" disabled>\r\n                        Select Work Type\r\n                      </MenuItem>\r\n                      {workType.map((item) => (\r\n                        <MenuItem key={item.id} value={item.id}>\r\n                          {item.name}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                    {errorMessages.workType && (\r\n                      <FormHelperText error>\r\n                        {errorMessages.workType}\r\n                      </FormHelperText>\r\n                    )}\r\n                  </FormControl>\r\n                </Grid>\r\n\r\n                <Grid item xs={6}>\r\n                  <FormControl fullWidth>\r\n                    <FormLabel>Salary Range</FormLabel>\r\n                    <Select\r\n                      value={selectedSalaryRange}\r\n                      onChange={handleSelectChange(\r\n                        setSelectedSalaryRange,\r\n                        'salaryRange',\r\n                        'annualIncome'\r\n                      )}\r\n                      size=\"small\"\r\n                      displayEmpty\r\n                      renderValue={(selected) => {\r\n                        const selectedItem = salaryRange.find((item) => item.id === selected);\r\n                        return selectedItem ? selectedItem.value : 'Select Education';\r\n                      }}\r\n                    >\r\n                      <MenuItem value=\"\" disabled>\r\n                        Select Salary Range\r\n                      </MenuItem>\r\n                      {salaryRange.map((item) => (\r\n                        <MenuItem key={item.id} value={item.id}>\r\n                          {item.value}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                    {errorMessages.salaryRange && (\r\n                      <FormHelperText error>\r\n                        {errorMessages.salaryRange}\r\n                      </FormHelperText>\r\n                    )}\r\n                  </FormControl>\r\n                </Grid>\r\n              </>\r\n            )}\r\n            {apiResponse && (\r\n              <Typography color=\"success\">{apiResponse}</Typography>\r\n            )}\r\n            {apiError && <Typography color=\"error\">{apiError}</Typography>}\r\n          </Grid>\r\n        </Box>\r\n\r\n        {/* Navigation Buttons */}\r\n        <Box className=\"navigation-buttons\">\r\n          <Button variant=\"contained\" onClick={onBack}>\r\n            Back\r\n          </Button>\r\n          <Button\r\n  variant=\"contained\"\r\n  onClick={ cred.isDemoUser == '1' ?onNext: handleNext }\r\n>\r\n            Next\r\n          </Button>\r\n        </Box>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Step7;\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  Typography,\r\n  FormControl,\r\n  FormLabel,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  Radio,\r\n  Select,\r\n  MenuItem,\r\n  TextField,\r\n  OutlinedInput,\r\n  FormHelperText\r\n} from '@mui/material';\r\nimport { MobileTimePicker } from '@mui/x-date-pickers/MobileTimePicker';\r\nimport { SelectChangeEvent } from '@mui/material/Select';\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport '../addAppUser.css';\r\nimport { useRouteId } from 'react-router/dist/lib/hooks';\r\nimport { useSnackbar } from 'src/content/useSnackbar';\r\n\r\ninterface Step8Props {\r\n  title: { id: number; name: string }[];\r\n  progressBarLength: string;\r\n  onBack: () => void;\r\n  onNext: () => void;\r\n  configData: any;\r\n  currentStepId: number;\r\n  userInfo: any; // Add userInfo prop to access the global state\r\n  setUserInfo: (userInfo: any) => void;\r\n}\r\n\r\nconst Step8: React.FC<Step8Props> = ({\r\n  title,\r\n  progressBarLength,\r\n  onBack,\r\n  onNext,\r\n  configData,\r\n  currentStepId,\r\n  userInfo,\r\n  setUserInfo\r\n}) => {\r\n  const [horoscopeBelief, setHoroscopeBelief] = useState<string>(\r\n    userInfo.horoscopeBelief || ''\r\n  );\r\n\r\n  const [cityInput, setCityInput] = useState<string>('');\r\n  const [countryOfBirth, setCountryOfBirth] = useState<string>(\r\n    userInfo.birthCountryId || ''\r\n  );\r\n  const [selectedCountryOfBirth, setSelectedCountryOfBirth] = useState<\r\n    { id: number; name: string }[]\r\n  >([]);\r\n  const [cityOfBirth, setCityOfBirth] = useState<string>(\r\n    userInfo.birthCityId || ''\r\n  );\r\n  const [selectedCityOfBirth, setSelectedCityOfBirth] = useState<\r\n    { id: number; name: string }[]\r\n  >([]);\r\n  const [zodiacSign, setZodiacSign] = useState<string>(\r\n    userInfo.zodiacSign || ''\r\n  );\r\n  const token = localStorage.getItem('SessionToken');\r\n  // const [timeOfBirth, setTimeOfBirth] = useState<string>('');\r\n  const [timeOfBirth, setTimeOfBirth] = React.useState(\r\n    userInfo.timeOfBirth || null\r\n  );\r\n  const [manglik, setManglik] = useState<string>(userInfo.manglik || '');\r\n\r\n  const [errors, setErrors] = useState<{ [key: string]: string }>({});\r\n  const { showSnackBar, SnackbarComponent } = useSnackbar();\r\n\r\n  const userId = localStorage.getItem('userId');\r\n\r\n  const currentTitle =\r\n    title.find((item) => item.id === currentStepId)?.name || '';\r\n\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n    setCityInput(value); // Update the state with input value\r\n    cityDataCall(value); // Call the function with the new input\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const token = localStorage.getItem('SessionToken');\r\n      const newToken = localStorage.getItem('newToken');\r\n\r\n      const countryResponse = await fetch('/api/admin/region/getCountriesV2', {\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          userId: userId\r\n        })\r\n      });\r\n\r\n      if (!countryResponse.ok) {\r\n        throw new Error('Network response was not ok for countries');\r\n      }\r\n\r\n      const countryData = await countryResponse.json();\r\n      console.log('Fetched data from getCountries:', countryData);\r\n\r\n      if (countryData && countryData.recordList) {\r\n        setSelectedCountryOfBirth(countryData.recordList); // Assuming you have a state to store countries\r\n      } else {\r\n        console.error('Unexpected data format from getCountries:', countryData);\r\n      }\r\n\r\n      const cityResponse = await fetch('/api/admin/cities/getCitiesV2', {\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          fetchRecord: 10,\r\n          startIndex: 0,\r\n          userId: userId\r\n        })\r\n      });\r\n      debugger;\r\n\r\n      if (!cityResponse.ok) {\r\n        throw new Error('Network response was not ok for city');\r\n      }\r\n\r\n      const cityData = await cityResponse.json();\r\n      console.log('Fetched data from getcitys:', cityData);\r\n\r\n      if (cityData && cityData.recordList) {\r\n        setSelectedCityOfBirth(cityData.recordList);\r\n      } else {\r\n        console.error('Unexpected data format from getcitys:', cityData);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n  let cred = (JSON.parse(localStorage.getItem('Credentials')) as any);\r\n\r\n  const cityDataCall = async (data) => {\r\n    try {\r\n      const cityResponse = await fetch('/api/admin/cities/getCitiesV2', {\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          fetchRecord: 10,\r\n          startIndex: 0,\r\n          searchString: String(data),\r\n          userId\r\n        })\r\n      });\r\n\r\n      if (!cityResponse.ok) {\r\n        throw new Error('Network response was not ok for city');\r\n      }\r\n\r\n      const cityData = await cityResponse.json();\r\n      console.log('Fetched data from getcitys:', cityData);\r\n\r\n      if (cityData && cityData.recordList) {\r\n        setSelectedCityOfBirth(cityData.recordList);\r\n      } else {\r\n        console.error('Unexpected data format from getcitys:', cityData);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  const handleHoroscopeBeliefChange = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    setHoroscopeBelief(event.target.value);\r\n    const selectedValue = event.target.value;\r\n    {\r\n      setErrors((prevErrors) => ({ ...prevErrors, horoscopeBelief: '' }));\r\n    }\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      horoscopeBelief: selectedValue\r\n    }));\r\n  };\r\n\r\n  const handleSelectChange =\r\n    (setter: React.Dispatch<React.SetStateAction<string>>, fieldName: string) =>\r\n    (event: SelectChangeEvent<string>) => {\r\n      setter(event.target.value);\r\n      const selectedValue = event.target.value;\r\n      setErrors((prevErrors) => ({ ...prevErrors, [fieldName]: '' }));\r\n      setUserInfo((prevUserInfo) => ({\r\n        ...prevUserInfo,\r\n        zodiacSign: selectedValue\r\n      }));\r\n    };\r\n\r\n  const handleCountryChange = (\r\n    event: SelectChangeEvent<typeof countryOfBirth>\r\n  ) => {\r\n    const value = event.target.value;\r\n    setCountryOfBirth(value);\r\n    setErrors((prevErrors) => ({ ...prevErrors, countryOfBirth: '' }));\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      birthCountryId: value\r\n    }));\r\n  };\r\n\r\n  const handleCityChange = (event: SelectChangeEvent<typeof cityOfBirth>) => {\r\n    const value = event.target.value;\r\n    setCityOfBirth(value);\r\n    setErrors((prevErrors) => ({ ...prevErrors, cityOfBirth: '' }));\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      birthCityId: value\r\n    }));\r\n  };\r\n\r\n  const handleTextFieldChange =\r\n    (\r\n      setter: React.Dispatch<React.SetStateAction<Date | null>>,\r\n      fieldName: string\r\n    ) =>\r\n    (newValue: Date | null) => {\r\n      setter(newValue);\r\n      setErrors((prevErrors) => ({ ...prevErrors, [fieldName]: '' }));\r\n      setUserInfo((prevUserInfo) => ({\r\n        ...prevUserInfo,\r\n        timeOfBirth: newValue\r\n      }));\r\n    };\r\n\r\n  const handleRadioChange = (event) => {\r\n    setManglik(event.target.value);\r\n    const selectedValue = event.target.value;\r\n    setErrors((prevErrors) => ({ ...prevErrors, manglik: '' }));\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      manglik: selectedValue\r\n    }));\r\n  };\r\n\r\n  let isEdit;\r\n  isEdit = localStorage.getItem('isEdit');\r\n  const handleNext = async () => {\r\n    // Validate the form before proceeding\r\n    const newErrors: { [key: string]: string } = {};\r\n\r\n    if (!horoscopeBelief) {\r\n      newErrors.horoscopeBelief = 'Horoscope Belief is required';\r\n    }\r\n\r\n    if (horoscopeBelief === '1') {\r\n      // If \"Yes\" is selected\r\n      if (!countryOfBirth) {\r\n        newErrors.countryOfBirth = 'Country of Birth is required';\r\n      }\r\n      if (!cityOfBirth) {\r\n        newErrors.cityOfBirth = 'City of Birth is required';\r\n      }\r\n      if (!zodiacSign) {\r\n        newErrors.zodiacSign = 'Zodiac Sign is required';\r\n      }\r\n      if (!timeOfBirth) {\r\n        newErrors.timeOfBirth = 'Time of Birth is required';\r\n      }\r\n      if (!manglik) {\r\n        newErrors.manglik = 'Manglik is required';\r\n      }\r\n    }\r\n    // if(isEdit === \"false\"){\r\n    // If \"No\" is selected, skip additional checks\r\n    if (horoscopeBelief === '2' || horoscopeBelief === '0') {\r\n      // Store \"No\" directly in the database and proceed\r\n      try {\r\n        const newToken = localStorage.getItem('newToken');\r\n        const token = localStorage.getItem('newToken');\r\n\r\n        // Prepare the request body with the current state values\r\n        const requestBody = {\r\n          id: userId, // User ID\r\n          horoscopeBelief: horoscopeBelief, // Directly storing \"No\"\r\n          screenNumber: 8,\r\n          token: token,\r\n          ...(token ? {} : { userId: userId })\r\n        };\r\n\r\n        // Make the API call to submit the data\r\n        const response = await fetch('/api/admin/users/completeUserProfileV2', {\r\n          method: 'POST',\r\n          headers: {\r\n            Authorization: `Bearer ${newToken}`,\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify(requestBody)\r\n        });\r\n\r\n        if (!response.ok) {\r\n          const errorResponse = await response.json();\r\n          setErrors((prevErrors) => ({\r\n            ...prevErrors,\r\n            apiError: errorResponse.message || 'An error occurred.'\r\n          }));\r\n          return;\r\n        }\r\n\r\n        // Call onNext to proceed to the next step\r\n        onNext();\r\n      } catch (error) {\r\n        console.error('Error submitting astrologic details:', error);\r\n        setErrors((prevErrors) => ({\r\n          ...prevErrors,\r\n          apiError: 'An error occurred while submitting.'\r\n        }));\r\n      }\r\n      return; // Exit after processing \"No\"\r\n    }\r\n\r\n    // If there are validation errors, show them\r\n    if (Object.keys(newErrors).length > 0) {\r\n      setErrors(newErrors);\r\n      return;\r\n    }\r\n\r\n    // Proceed if there are no validation errors\r\n    try {\r\n      const userId = localStorage.getItem('userId');\r\n      const newToken = localStorage.getItem('newToken');\r\n\r\n      // if (!userId || !newToken) {\r\n      //   setErrors((prevErrors) => ({\r\n      //     ...prevErrors,\r\n      //     apiError: 'User information is missing.'\r\n      //   }));\r\n      //   return;\r\n      // }\r\n      const token = localStorage.getItem('newToken');\r\n      // Prepare the request body with the current state values\r\n      const requestBody = {\r\n        id: userId, // User ID\r\n        horoscopeBelief: userInfo.horoscopeBelief, // Horoscope Belief\r\n        birthCountryId: userInfo.birthCountryId, // Single selection\r\n        birthCityId: userInfo.birthCityId, // Single selection\r\n        zodiacSign: userInfo.zodiacSign, // Zodiac Sign\r\n        timeOfBirth: userInfo.timeOfBirth, // Time of Birth\r\n        manglik: userInfo.manglik, // Manglik\r\n        screenNumber: 8,\r\n        token: token,\r\n        ...(token ? {} : { userId: userId })\r\n      };\r\n\r\n      // Make the API call to submit the data\r\n      const response = await fetch('/api/admin/users/completeUserProfileV2', {\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: `Bearer ${newToken}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(requestBody)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorResponse = await response.json();\r\n        setErrors((prevErrors) => ({\r\n          ...prevErrors,\r\n          apiError: errorResponse.message || 'An error occurred.'\r\n        }));\r\n        return;\r\n      }\r\n\r\n      // Call onNext to proceed to the next step\r\n      onNext();\r\n    } catch (error) {\r\n      console.error('Error submitting astrologic details:', error);\r\n      setErrors((prevErrors) => ({\r\n        ...prevErrors,\r\n        apiError: 'An error occurred while submitting.'\r\n      }));\r\n    }\r\n    // }else{\r\n    //   onNext();\r\n    // }\r\n  };\r\n  useEffect(() => {\r\n    if (cred?.isDemoUser) {\r\n      showSnackBar(\r\n        \"**Access Denied**\\nWe're sorry, but you do not have permission to access this feature.\"\r\n      );\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Box>\r\n      {cred.isDemoUser > 0 && <SnackbarComponent />}\r\n      <Card className=\"container\">\r\n        {/* Title */}\r\n        <Typography variant=\"h3\" className=\"title\">\r\n          {currentTitle}\r\n        </Typography>\r\n\r\n        {/* Progress Bar */}\r\n        <Box className=\"progress-bar-container\">\r\n          <Box className=\"progress-bar\" style={{ width: progressBarLength }} />\r\n        </Box>\r\n\r\n        <Box sx={{ width: '100%', mb: 2, p: 4 }}>\r\n          <FormControl component=\"fieldset\">\r\n            <FormLabel component=\"legend\">Horoscope Belief *</FormLabel>\r\n            <RadioGroup\r\n              name=\"horoscopeBelief\"\r\n              value={horoscopeBelief}\r\n              onChange={handleHoroscopeBeliefChange}\r\n              row\r\n            >\r\n              <FormControlLabel value={1} control={<Radio />} label=\"Yes\" />\r\n              <FormControlLabel value={2} control={<Radio />} label=\"No\" />\r\n              <FormControlLabel\r\n                value={0}\r\n                control={<Radio />}\r\n                label=\"Doesn't Matter\"\r\n              />\r\n            </RadioGroup>\r\n            {errors.horoscopeBelief && (\r\n              <FormHelperText error>{errors.horoscopeBelief}</FormHelperText>\r\n            )}\r\n          </FormControl>\r\n\r\n          {horoscopeBelief == '1' && (\r\n            <Box mt={2}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Country of Birth *</FormLabel>\r\n                <Select\r\n                  value={countryOfBirth}\r\n                  onChange={handleCountryChange}\r\n                  size=\"small\"\r\n                  displayEmpty\r\n                >\r\n                  <MenuItem value=\"\" disabled>\r\n                    Please select your country of birth\r\n                  </MenuItem>\r\n                  {selectedCountryOfBirth.map((cntry) => (\r\n                    <MenuItem key={cntry.id} value={cntry.id}>\r\n                      {cntry.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {errors.countryOfBirth && (\r\n                  <FormHelperText error>{errors.countryOfBirth}</FormHelperText>\r\n                )}\r\n              </FormControl>\r\n\r\n              <FormControl fullWidth sx={{ mt: 2 }}>\r\n                <FormLabel>City of Birth *</FormLabel>\r\n                <Select\r\n                  labelId=\"demo-city-label\"\r\n                  id=\"demo-city-label\"\r\n                  value={cityOfBirth}\r\n                  onChange={handleCityChange}\r\n                  size=\"small\"\r\n                  displayEmpty\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                  }}\r\n                >\r\n                  <MenuItem>\r\n                    <TextField\r\n                      placeholder=\"Search city...\"\r\n                      variant=\"outlined\"\r\n                      size=\"small\"\r\n                      fullWidth\r\n                      autoFocus\r\n                      onChange={(e) => handleInputChange(e)}\r\n                      value={cityInput}\r\n                      onClick={(e) => e.stopPropagation()} // Prevent Select from closing\r\n                      onKeyDown={(e) => e.stopPropagation()} // Allow typing\r\n                    />\r\n                  </MenuItem>\r\n\r\n                  {selectedCityOfBirth.map((cty) => (\r\n                    <MenuItem key={cty.id} value={cty.id}>\r\n                      {cty.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {errors.cityOfBirth && (\r\n                  <FormHelperText error>{errors.cityOfBirth}</FormHelperText>\r\n                )}\r\n              </FormControl>\r\n\r\n              <FormControl fullWidth sx={{ mt: 2 }}>\r\n                <FormLabel>Zodiac Sign *</FormLabel>\r\n                <Select\r\n                  value={zodiacSign}\r\n                  onChange={handleSelectChange(setZodiacSign, 'zodiacSign')}\r\n                  size=\"small\"\r\n                  displayEmpty\r\n                >\r\n                  <MenuItem value=\"\" disabled>\r\n                    Please select your zodiac sign\r\n                  </MenuItem>\r\n                  {configData.zodiacSignList.map((sign) => (\r\n                    <MenuItem key={sign} value={sign}>\r\n                      {sign}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {errors.zodiacSign && (\r\n                  <FormHelperText error>{errors.zodiacSign}</FormHelperText>\r\n                )}\r\n              </FormControl>\r\n\r\n              <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                <FormControl fullWidth sx={{ mt: 2 }}>\r\n                  <FormLabel>Time of Birth *</FormLabel>\r\n                  <MobileTimePicker\r\n                    //  orientation=\"landscape\"\r\n\r\n                    value={timeOfBirth}\r\n                    onChange={handleTextFieldChange(\r\n                      setTimeOfBirth,\r\n                      'timeOfBirth'\r\n                    )}\r\n                    renderInput={(params) => (\r\n                      <TextField {...params} size=\"small\" />\r\n                    )}\r\n                    ampm\r\n                  />\r\n                  {errors.timeOfBirth && (\r\n                    <FormHelperText error>{errors.timeOfBirth}</FormHelperText>\r\n                  )}\r\n                </FormControl>\r\n              </LocalizationProvider>\r\n\r\n              <FormControl component=\"fieldset\" sx={{ mt: 2 }}>\r\n                <FormLabel component=\"legend\">Manglik </FormLabel>\r\n                <RadioGroup\r\n                  name=\"manglik\"\r\n                  value={manglik}\r\n                  onChange={handleRadioChange}\r\n                  row\r\n                >\r\n                  <FormControlLabel value={1} control={<Radio />} label=\"Yes\" />\r\n                  <FormControlLabel value={2} control={<Radio />} label=\"No\" />\r\n                  <FormControlLabel\r\n                    value={0}\r\n                    control={<Radio />}\r\n                    label=\"Doesn't Matter\"\r\n                  />\r\n                </RadioGroup>\r\n                {errors.manglik && (\r\n                  <FormHelperText error>{errors.manglik}</FormHelperText>\r\n                )}\r\n              </FormControl>\r\n            </Box>\r\n          )}\r\n        </Box>\r\n\r\n        {/* Buttons */}\r\n        <Box className=\"navigation-buttons\">\r\n          <Button variant=\"contained\" onClick={onBack}>\r\n            Back\r\n          </Button>\r\n          <Button\r\n  variant=\"contained\"\r\n  onClick={ cred.isDemoUser == '1' ?onNext: handleNext }\r\n>\r\n            Next\r\n          </Button>\r\n        </Box>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Step8;\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  Typography,\r\n  FormControl,\r\n  FormLabel,\r\n  Select,\r\n  MenuItem,\r\n  Grid,\r\n  SelectChangeEvent,\r\n  Typography as MuiTypography\r\n} from '@mui/material';\r\nimport '../addAppUser.css';\r\nimport { AddAppUser } from 'src/models/addappuser';\r\nimport { useSnackbar } from 'src/content/useSnackbar';\r\n\r\ninterface Step9Props {\r\n  title: { id: number; name: string }[];\r\n  progressBarLength: string;\r\n  onBack: () => void;\r\n  onNext: () => void;\r\n  configData: any;\r\n  currentStepId: number;\r\n  userInfo: any; // Add userInfo prop to access the global state\r\n  setUserInfo: (userInfo: any) => void;\r\n}\r\n\r\nconst Step9: React.FC<Step9Props> = ({\r\n  title,\r\n  progressBarLength,\r\n  onBack,\r\n  onNext,\r\n  configData,\r\n  currentStepId,\r\n  userInfo,\r\n  setUserInfo\r\n}) => {\r\n  const [diet, setDiet] = useState<string>(userInfo.diet || '');\r\n  const [drink, setDrink] = useState<string>(userInfo.drinking || '');\r\n  const [smoker, setSmoker] = useState<string>(userInfo.smoking || '');\r\n  const [apiResponse, setApiResponse] = React.useState<string | null>(null);\r\n  const [apiError, setApiError] = React.useState<string | null>(null);\r\n  const [errors, setErrors] = useState<{ [key: string]: string }>({});\r\n  const { showSnackBar, SnackbarComponent } = useSnackbar();\r\n\r\n  const currentTitle =\r\n    title.find((item) => item.id === currentStepId)?.name || '';\r\n\r\n  // Generic handler for dropdown change\r\n  // const handleSelectChange =\r\n  //   (setter: React.Dispatch<React.SetStateAction<string>>) =>\r\n  //   (event: SelectChangeEvent<string>) => {\r\n  //     setter(event.target.value as string);\r\n  //     setErrors((prev) => ({ ...prev, [event.target.name]: '' }));\r\n  //   };\r\n\r\n  const handleSelectChange =\r\n    (\r\n      setter: React.Dispatch<React.SetStateAction<string>>,\r\n      fieldName: keyof AddAppUser\r\n    ) =>\r\n    (event: SelectChangeEvent<string>) => {\r\n      const selectedValue = event.target.value;\r\n\r\n      setter(selectedValue);\r\n\r\n      setErrors((prevErrors) => ({\r\n        ...prevErrors,\r\n        [event.target.name]: ''\r\n      }));\r\n\r\n      setUserInfo((prevUserInfo) => ({\r\n        ...prevUserInfo,\r\n        [fieldName]: selectedValue // Update the specific field in userInfo\r\n      }));\r\n    };\r\n\r\n  // Validate the form fields\r\n  const validateForm = () => {\r\n    let valid = true;\r\n    const newErrors: { [key: string]: string } = {};\r\n\r\n    if (!diet) {\r\n      newErrors.diet = 'Diet is required';\r\n      valid = false;\r\n    }\r\n    if (!drink) {\r\n      newErrors.drink = 'Drink preference is required';\r\n      valid = false;\r\n    }\r\n    if (!smoker) {\r\n      newErrors.smoker = 'Smoking preference is required';\r\n      valid = false;\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return valid;\r\n  };\r\n\r\n  let isEdit;\r\n  isEdit = localStorage.getItem('isEdit');\r\n\r\n  const handleNext = async () => {\r\n    if (validateForm()) {\r\n      // if(isEdit === \"false\"){\r\n      // Retrieve user data from localStorage\r\n      const userId = localStorage.getItem('userId');\r\n      const newToken = localStorage.getItem('newToken');\r\n      const rtoken = localStorage.getItem('rtoken');\r\n\r\n      // if (!userId || !newToken || !rtoken) {\r\n      //   setApiError('User information is missing.');\r\n      //   return;\r\n      // }\r\n      const token = localStorage.getItem('newToken');\r\n      // Prepare data for Step 9 API call\r\n      const step9Data = {\r\n        id: userId,\r\n        screenNumber: 9,\r\n        dietId:\r\n          configData.dietTypeList.find(\r\n            (dietOption) => dietOption.name === userInfo.diet\r\n          )?.id || null,\r\n        smoking: userInfo.smoking,\r\n        drinking: userInfo.drinking,\r\n        token: token,\r\n        ...(token ? {} : { userId: userId })\r\n      };\r\n\r\n      try {\r\n        // Call completeUserProfileV2 for Step 9\r\n        const step9Response = await fetch(\r\n          '/api/admin/users/completeUserProfileV2',\r\n          {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              Authorization: `MatrimonyAndroid|Bearer ${newToken}`,\r\n              refreshtoken: `${rtoken}`\r\n            },\r\n            body: JSON.stringify(step9Data)\r\n          }\r\n        );\r\n\r\n        if (!step9Response.ok)\r\n          throw new Error('Failed to update profile with Step 9 data');\r\n\r\n        // Handle successful response\r\n        setApiResponse('Profile updated successfully for Step 9');\r\n        onNext(); // Move to next step\r\n      } catch (error) {\r\n        // Handle API error\r\n        setApiError(error.message);\r\n      }\r\n      // }else{\r\n      //   onNext();\r\n      // }\r\n    }\r\n  };\r\n  let cred = JSON.parse(localStorage.getItem('Credentials')) as any;\r\n  useEffect(() => {\r\n    if (cred?.isDemoUser) {\r\n      showSnackBar(\r\n        \"**Access Denied**\\nWe're sorry, but you do not have permission to access this feature.\"\r\n      );\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Box>\r\n      {cred.isDemoUser > 0 && <SnackbarComponent />}\r\n      <Card className=\"container\">\r\n        {/* Title */}\r\n        <Typography variant=\"h3\" className=\"title\">\r\n          {currentTitle}\r\n        </Typography>\r\n\r\n        {/* Progress Bar */}\r\n        <Box className=\"progress-bar-container\">\r\n          <Box className=\"progress-bar\" style={{ width: progressBarLength }} />\r\n        </Box>\r\n\r\n        {/* Dropdown Fields */}\r\n        <Grid container spacing={3}>\r\n          {/* Diet Dropdown */}\r\n          <Grid item xs={6}>\r\n            <FormControl fullWidth>\r\n              <FormLabel>Diet *</FormLabel>\r\n              <Select\r\n                name=\"diet\"\r\n                value={diet}\r\n                onChange={handleSelectChange(setDiet, 'diet')}\r\n                size=\"small\"\r\n                displayEmpty\r\n              >\r\n                <MenuItem value=\"\" disabled>\r\n                  Please select your diet\r\n                </MenuItem>\r\n                {configData.dietTypeList.map((dietOption) => (\r\n                  <MenuItem key={dietOption.id} value={dietOption.name}>\r\n                    {dietOption.name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n              {errors.diet && (\r\n                <MuiTypography color=\"error\">{errors.diet}</MuiTypography>\r\n              )}\r\n            </FormControl>\r\n          </Grid>\r\n\r\n          {/* Drink Dropdown */}\r\n          <Grid item xs={6}>\r\n            <FormControl fullWidth>\r\n              <FormLabel>Drink *</FormLabel>\r\n              <Select\r\n                name=\"drink\"\r\n                value={drink}\r\n                onChange={handleSelectChange(setDrink, 'drinking')}\r\n                size=\"small\"\r\n                displayEmpty\r\n              >\r\n                <MenuItem value=\"\" disabled>\r\n                  Please select your drink preference\r\n                </MenuItem>\r\n                {configData.drinkTypeList.map((drinkOption) => (\r\n                  <MenuItem key={drinkOption} value={drinkOption}>\r\n                    {drinkOption}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n              {errors.drink && (\r\n                <MuiTypography color=\"error\">{errors.drink}</MuiTypography>\r\n              )}\r\n            </FormControl>\r\n          </Grid>\r\n\r\n          {/* Smoker Dropdown */}\r\n          <Grid item xs={6}>\r\n            <FormControl fullWidth>\r\n              <FormLabel>Smoker *</FormLabel>\r\n              <Select\r\n                name=\"smoker\"\r\n                value={smoker}\r\n                onChange={handleSelectChange(setSmoker, 'smoking')}\r\n                size=\"small\"\r\n                displayEmpty\r\n              >\r\n                <MenuItem value=\"\" disabled>\r\n                  Please select your smoking preference\r\n                </MenuItem>\r\n                {configData.smokeTypeList.map((smokeOption) => (\r\n                  <MenuItem key={smokeOption} value={smokeOption}>\r\n                    {smokeOption}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n              {errors.smoker && (\r\n                <MuiTypography color=\"error\">{errors.smoker}</MuiTypography>\r\n              )}\r\n            </FormControl>\r\n          </Grid>\r\n          {apiResponse && (\r\n            <Typography color=\"success\">{apiResponse}</Typography>\r\n          )}\r\n          {apiError && <Typography color=\"error\">{apiError}</Typography>}\r\n        </Grid>\r\n\r\n        {/* Navigation Buttons */}\r\n        <Box className=\"navigation-buttons\">\r\n          <Button variant=\"contained\" onClick={onBack}>\r\n            Back\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={cred.isDemoUser == '1' ? onNext : handleNext}\r\n          >\r\n            Next\r\n          </Button>\r\n        </Box>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Step9;\r\n","import React, { useState, useEffect, useMemo } from 'react';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  Typography,\r\n  FormControl,\r\n  FormLabel,\r\n  Select,\r\n  MenuItem,\r\n  Grid,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  Radio,\r\n  Checkbox,\r\n  OutlinedInput,\r\n  TextField,\r\n  Chip,\r\n  ListItemText,\r\n  CircularProgress\r\n} from '@mui/material';\r\nimport Slider from '@mui/material/Slider';\r\nimport { SelectChangeEvent } from '@mui/material/Select';\r\nimport '../addAppUser.css';\r\nimport { AddAppUser } from 'src/models/addappuser';\r\nimport { FixedSizeList as List, ListChildComponentProps } from 'react-window';\r\nimport { useSnackbar } from 'src/content/useSnackbar';\r\n\r\ninterface Step10Props {\r\n  title: { id: number; name: string }[];\r\n  progressBarLength: string;\r\n  onBack: () => void;\r\n  onNext: () => void;\r\n  configData: any; // Add configData as a prop\r\n  currentStepId: number;\r\n  userInfo: any; // Add userInfo prop to access the global state\r\n  setUserInfo: (userInfo: any) => void;\r\n}\r\n\r\nconst Step10: React.FC<Step10Props> = ({\r\n  title,\r\n  progressBarLength,\r\n  onBack,\r\n  onNext,\r\n  configData,\r\n  currentStepId,\r\n  userInfo,\r\n  setUserInfo\r\n}) => {\r\n  const [ageRange, setAgeRange] = useState<number[]>([18, 32]); // Initial Age Range\r\n  const [heightRange, setHeightRange] = useState<number[]>([150, 180]); // Initial Height Range\r\n  const [martialStatus, setMartialStatus] = useState<number[]>(\r\n    userInfo.pMaritalStatusId || []\r\n  );\r\n  const [martialDropdownOpen, setMartialDropdownOpen] = useState(false);\r\n  const [profileWithChildren, setProfileWithChildren] = useState<string>(\r\n    userInfo.pProfileWithChildren || ''\r\n  );\r\n  const [preferredLivingStatus, setPreferredLivingStatus] = useState<string>(\r\n    userInfo.pFamilyType || ''\r\n  );\r\n  // const [religion, setReligion] = useState<string[]>([]);\r\n  const [religion, setReligion] = useState<number[]>(\r\n    userInfo.pReligionId || []\r\n  );\r\n  const [religionOptions, setReligionOptions] = useState<\r\n    { id: number; name: string }[]\r\n  >([]); // New state to store fetched religions\r\n  const [reliogionDropdownOpen, setReliogionDropdownOpen] = useState(false);\r\n  const [caste, setCaste] = useState<number[]>(userInfo.pCommunityId || []);\r\n  const [selectedCaste, setSelectedCaste] = useState<\r\n    { id: number; name: string }[]\r\n  >([]);\r\n  const [casteDropdownOpen, setCasteDropdownOpen] = useState(false);\r\n  const [horoscopeBelief, setHoroscopeBelief] = useState<string>(\r\n    userInfo.pHoroscopeBelief || ''\r\n  );\r\n  const [manglikBelief, setManglikBelief] = useState<string>(\r\n    userInfo.pManglikMatch || ''\r\n  );\r\n  const [smokingAcceptance, setSmokingAcceptance] = useState<string>(\r\n    userInfo.pSmokingAcceptance || ''\r\n  );\r\n  const [alcoholAcceptance, setAlcoholAcceptance] = useState<string>(\r\n    userInfo.pAlcoholAcceptance || ''\r\n  );\r\n  const [disabilityAcceptance, setDisabilityAcceptance] = useState<string>(\r\n    userInfo.pDisabilityAcceptance || ''\r\n  );\r\n  const [country, setCountry] = useState<number[]>(\r\n    userInfo.pCountryLivingInId || []\r\n  );\r\n  const [selectedCountry, setSelectedCountry] = useState<\r\n    { id: number; name: string }[]\r\n  >([]);\r\n  const [countryDropdownOpen, setCountryDropdownOpen] = useState(false);\r\n  const [state, setState] = useState<number[]>(userInfo.pStateLivingInId || []);\r\n  const [selectedState, setSelectedState] = useState<\r\n    { id: number; name: string }[]\r\n  >([]);\r\n  const [stateDropdownOpen, setStateDropdownOpen] = useState(false);\r\n  const [city, setCity] = useState<number[]>(userInfo.pCityLivingInId || []);\r\n  const [selectedCity, setSelectedCity] = useState<\r\n    { id: number; name: string }[]\r\n  >([]);\r\n  const [cityDropdownOpen, setCityDropdownOpen] = useState(false);\r\n  const [searchQuery, setSearchQuery] = useState(''); // Add search query state\r\n\r\n  const [qualification, setQualification] = useState<number[]>(\r\n    userInfo.pEducationTypeId || []\r\n  );\r\n  const [qualificationOptions, setQualificationOptions] = useState<\r\n    { id: number; name: string }[]\r\n  >([]);\r\n  const [qualificationDropdownOpen, setQualificationDropdownOpen] =\r\n    useState(false);\r\n  const [educationMedium, setEducationMedium] = useState<number[]>(\r\n    userInfo.pEducationMediumId || []\r\n  );\r\n  const [educationMediumOptions, setEducationMediumOptions] = useState<\r\n    { id: number; name: string }[]\r\n  >([]);\r\n  const [educationMediumDropdownOpen, setEducationMediumDropdownOpen] =\r\n    useState(false);\r\n  const [profession, setProfession] = useState<number[]>(\r\n    userInfo.pOccupationId || []\r\n  );\r\n  const [selectedProfession, setSelectedProfession] = useState<\r\n    { id: number; name: string }[]\r\n  >([]);\r\n  const [professionDropdownOpen, setProfessionDropdownOpen] = useState(false);\r\n  const [workingWith, setWorkingWith] = useState<number[]>(\r\n    userInfo.pEmploymentTypeId || []\r\n  );\r\n  const [selectedWorkingWith, setSelectedWorkingWith] = useState<\r\n    { id: number; name: string }[]\r\n  >([]);\r\n  const [workingWithDropdownOpen, setWorkingWithDropdownOpen] = useState(false);\r\n  const [annualIncome, setAnnualIncome] = useState<number[]>(\r\n    userInfo.pAnnualIncomeId || []\r\n  );\r\n  const [selectedAnnualIncome, setSelectedAnnualIncome] = useState<\r\n    { id: number; value: string }[]\r\n  >([]);\r\n  const [annualIncomeDropdownOpen, setAnnualIncomeDropdownOpen] =\r\n    useState(false);\r\n  // const [motherTongue, setMotherTongue] = useState<string>('');\r\n  const [motherTongue, setMotherTongue] = useState<string>('');\r\n  const [selectedMotherTongue, setSelectedMotherTongue] = useState<string[]>(\r\n    userInfo.pMotherTongue || []\r\n  );\r\n  const [diet, setDiet] = useState<number[]>(userInfo.pDietId || []);\r\n  const [dietDropdownOpen, setDietDropdownOpen] = useState(false);\r\n  const [complexion, setComplexion] = useState<string[]>(\r\n    userInfo.pComplexion || []\r\n  );\r\n  const [complexionDropdownOpen, setComplexionDropdownOpen] = useState(false);\r\n  // const [selectedComplexion, setSelectedComplexion] = useState<\r\n  //   { id: number; value: string }[]\r\n  // >([]);\r\n  const [bodyType, setBodyType] = useState<string[]>(userInfo.pBodyType || []);\r\n  const [bodyTypeDropdownOpen, setBodyTypeDropdownOpen] = useState(false);\r\n  const [expectation, setExpectation] = useState<string>(\r\n    userInfo.pOtherExpectations || ''\r\n  );\r\n  const [apiResponse, setApiResponse] = React.useState<string | null>(null);\r\n  const [apiError, setApiError] = React.useState<string | null>(null);\r\n  const [errors, setErrors] = useState<{ [key: string]: string }>({});\r\n  const { showSnackBar, SnackbarComponent } = useSnackbar();\r\n\r\n  const [isCityCall, setIsCityCall] = useState<Boolean>(true);\r\n\r\n  interface City {\r\n    id: number;\r\n    name: string;\r\n  }\r\n\r\n  const [cities, setCities] = useState<City[]>([]);\r\n  const [selectedCities, setSelectedCities] = useState<any[]>([]);\r\n\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  const userId = localStorage.getItem('userId');\r\n\r\n  let cred = JSON.parse(localStorage.getItem('Credentials')) as any;\r\n  const handleOpen = (\r\n    dropdown:\r\n      | 'martial'\r\n      | 'religion'\r\n      | 'caste'\r\n      | 'country'\r\n      | 'state'\r\n      | 'city'\r\n      | 'qualification'\r\n      | 'educationMedium'\r\n      | 'profession'\r\n      | 'workingWith'\r\n      | 'annualIncome'\r\n      | 'diet'\r\n      | 'complexion'\r\n      | 'bodyType'\r\n  ) => {\r\n    if (dropdown === 'martial') {\r\n      setMartialDropdownOpen(true);\r\n    } else if (dropdown === 'religion') {\r\n      setReliogionDropdownOpen(true);\r\n    } else if (dropdown === 'caste') {\r\n      setCasteDropdownOpen(true);\r\n    } else if (dropdown === 'country') {\r\n      setCountryDropdownOpen(true);\r\n    } else if (dropdown === 'state') {\r\n      setStateDropdownOpen(true);\r\n    } else if (dropdown === 'city') {\r\n      setCityDropdownOpen(true);\r\n    } else if (dropdown === 'qualification') {\r\n      setQualificationDropdownOpen(true);\r\n    } else if (dropdown === 'educationMedium') {\r\n      setEducationMediumDropdownOpen(true);\r\n    } else if (dropdown === 'profession') {\r\n      setProfessionDropdownOpen(true);\r\n    } else if (dropdown === 'workingWith') {\r\n      setWorkingWithDropdownOpen(true);\r\n    } else if (dropdown === 'annualIncome') {\r\n      setAnnualIncomeDropdownOpen(true);\r\n    } else if (dropdown === 'diet') {\r\n      setDietDropdownOpen(true);\r\n    } else if (dropdown === 'complexion') {\r\n      setComplexionDropdownOpen(true);\r\n    } else if (dropdown === 'bodyType') {\r\n      setBodyTypeDropdownOpen(true);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setMartialDropdownOpen(false);\r\n    setReliogionDropdownOpen(false);\r\n    setCasteDropdownOpen(false);\r\n    setCountryDropdownOpen(false);\r\n    setStateDropdownOpen(false);\r\n    setCityDropdownOpen(false);\r\n    setQualificationDropdownOpen(false);\r\n    setEducationMediumDropdownOpen(false);\r\n    setProfessionDropdownOpen(false);\r\n    setWorkingWithDropdownOpen(false);\r\n    setAnnualIncomeDropdownOpen(false);\r\n    setDietDropdownOpen(false);\r\n    setComplexionDropdownOpen(false);\r\n    setBodyTypeDropdownOpen(false);\r\n  };\r\n\r\n  // Cancel: Clear all selections\r\n  // const handleCancel = () => {\r\n  //   setCaste([]);  // Clear selected caste options\r\n  //   setMartialDropdownOpen(false);  // Close the dropdown\r\n  // };\r\n\r\n  // Done: Close the dropdown\r\n  const handleDone = () => {\r\n    setMartialDropdownOpen(false); // Close the dropdown\r\n    setReliogionDropdownOpen(false);\r\n    setCasteDropdownOpen(false);\r\n    setCountryDropdownOpen(false);\r\n    setStateDropdownOpen(false);\r\n    setCityDropdownOpen(false);\r\n    setQualificationDropdownOpen(false);\r\n    setEducationMediumDropdownOpen(false);\r\n    setProfessionDropdownOpen(false);\r\n    setWorkingWithDropdownOpen(false);\r\n    setAnnualIncomeDropdownOpen(false);\r\n    setDietDropdownOpen(false);\r\n    setComplexionDropdownOpen(false);\r\n    setBodyTypeDropdownOpen(false);\r\n  };\r\n\r\n  // const handleSelectChange = (event: SelectChangeEvent<string>) => {\r\n  //   setMartialStatus(event.target.value as string);\r\n  //   setErrors((prev) => ({ ...prev, martialStatus: '' }));\r\n  // };\r\n  // const handleSelectChange =\r\n  // (setter: React.Dispatch<React.SetStateAction<string>>) =>\r\n  // (event: React.ChangeEvent<{ value: unknown }>) => {\r\n  //   setter(event.target.value as string);\r\n  // };\r\n\r\n  // const fetchData = async () => {\r\n  //   try {\r\n  //     const token = localStorage.getItem('token');\r\n  //     const response = await fetch('/api/app/users/getMasterData', {\r\n  //       method: 'POST',\r\n  //       headers: {\r\n  //         Authorization: `Bearer ${token}`,\r\n  //         'Content-Type': 'application/json'\r\n  //       }\r\n  //     });\r\n\r\n  //     if (!response.ok) {\r\n  //       throw new Error('Network response was not ok');\r\n  //     }\r\n\r\n  //     const data = await response.json();\r\n  //     console.log('Fetched data:', data);\r\n\r\n  //     if (data && data.recordList && data.recordList.religion) {\r\n  //       setReligionOptions(data.recordList.religion); // Store fetched religions\r\n  //       setQualificationOptions(data.recordList.educationType);\r\n  //       setEducationMediumOptions(data.recordList.educationMedium);\r\n  //       setSelectedProfession(data.recordList.occupation);\r\n  //       setSelectedWorkingWith(data.recordList.employmentType);\r\n  //       setSelectedAnnualIncome(data.recordList.annualIncome);\r\n  //       setSelectedCaste(data.recordList.community);\r\n  //     } else {\r\n  //       console.error('Unexpected data format:', data);\r\n  //     }\r\n  //   } catch (error) {\r\n  //     console.error('Error fetching data:', error);\r\n  //   }\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   fetchData();\r\n  // }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      // const newToken = localStorage.getItem('newToken');\r\n      const stoken = localStorage.getItem('SessionToken');\r\n\r\n      // First API call\r\n      const response = await fetch('/api/app/users/getMasterData', {\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: `Bearer ${stoken}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      if (data && data.recordList) {\r\n        setReligionOptions(data.recordList.religion);\r\n        setQualificationOptions(data.recordList.educationType);\r\n        setEducationMediumOptions(data.recordList.educationMedium);\r\n        setSelectedProfession(data.recordList.occupation);\r\n        setSelectedWorkingWith(data.recordList.employmentType);\r\n        setSelectedAnnualIncome(data.recordList.annualIncome);\r\n        setSelectedCaste(data.recordList.community);\r\n      } else {\r\n        console.error('Unexpected data format from getMasterData:', data);\r\n      }\r\n\r\n      // Second API call (after the first one finishes)\r\n      const countryResponse = await fetch('/api/admin/region/getCountriesV2', {\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: `Bearer ${stoken}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          userId: userId\r\n        })\r\n      });\r\n\r\n      if (!countryResponse.ok) {\r\n        throw new Error('Network response was not ok for countries');\r\n      }\r\n\r\n      const countryData = await countryResponse.json();\r\n\r\n      if (countryData && countryData.recordList) {\r\n        setSelectedCountry(countryData.recordList); // Assuming you have a state to store countries\r\n      } else {\r\n        console.error('Unexpected data format from getCountries:', countryData);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const getListHeight = () => {\r\n    const maxItemsToShow = 5; // Maximum number of items to show before scrolling\r\n    const itemHeight = 48; // Height of each item (same as itemSize)\r\n    return Math.min(filteredCities.length, maxItemsToShow) * itemHeight;\r\n  };\r\n\r\n  const currentTitle =\r\n    title.find((item) => item.id === currentStepId)?.name || '';\r\n\r\n  const handleSelectChange =\r\n    (setter: React.Dispatch<React.SetStateAction<string>>) =>\r\n    (event: SelectChangeEvent<string>) => {\r\n      setter(event.target.value as string);\r\n      setErrors((prev) => ({ ...prev, [event.target.name]: '' }));\r\n    };\r\n\r\n  const handleRadioChange =\r\n    (\r\n      setter: React.Dispatch<React.SetStateAction<string>>,\r\n      fieldName: keyof AddAppUser\r\n    ) =>\r\n    (event: React.ChangeEvent<HTMLInputElement>) => {\r\n      const value = event.target.value;\r\n      setter(event.target.value);\r\n      setErrors((prev) => ({ ...prev, [event.target.name]: '' }));\r\n      setUserInfo((prevUserInfo) => ({\r\n        ...prevUserInfo,\r\n        [fieldName]: value // Update the specific field in userInfo\r\n      }));\r\n    };\r\n\r\n  const handleReligionChange = (event: SelectChangeEvent<typeof religion>) => {\r\n    const value = event.target.value as number[]; // Cast the selected value to a number array\r\n\r\n    if (value.includes(0)) {\r\n      // If 'Open For All' (value 0) is selected, deselect all other options and set only 0\r\n      setReligion([0]);\r\n    } else {\r\n      // If any other option is selected, remove 'Open For All' (value 0) from the selection\r\n      setReligion(value.filter((val) => val !== 0));\r\n    }\r\n\r\n    // Clear the error for the religion field\r\n    setErrors((prev) => ({ ...prev, religion: '' }));\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      pReligionId: value // Assuming 'heightId' is the field in your userInfo\r\n    }));\r\n  };\r\n\r\n  const handleCasteChange = (event: SelectChangeEvent<typeof caste>) => {\r\n    const value = event.target.value as number[]; // Cast the selected value to a number array\r\n\r\n    if (value.includes(0)) {\r\n      // If 'Open For All' (value 0) is selected, deselect all others and set only 0\r\n      setCaste([0]);\r\n    } else {\r\n      // If other options are selected, remove 'Open For All' (value 0) from the selection\r\n      setCaste(value.filter((val) => val !== 0));\r\n    }\r\n\r\n    // Clear the error for the caste field\r\n    setErrors((prev) => ({ ...prev, caste: '' }));\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      pCommunityId: value // Assuming 'heightId' is the field in your userInfo\r\n    }));\r\n  };\r\n\r\n  const handleCountryChange = async (\r\n    event: SelectChangeEvent<typeof country>\r\n  ) => {\r\n    const selectedCountries = event.target.value as number[];\r\n    setCountry(selectedCountries);\r\n    setErrors((prev) => ({ ...prev, country: '' }));\r\n\r\n    // Fetch states for all selected countries\r\n    if (selectedCountries.length > 0) {\r\n      await fetchStatesByCountries(selectedCountries);\r\n    } else {\r\n      // Reset state and city when no country is selected\r\n      setSelectedState([]);\r\n      setSelectedCity([]);\r\n    }\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      pCountryLivingInId: selectedCountries // Assuming 'heightId' is the field in your userInfo\r\n    }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Fetch states if country data exists\r\n    if (country.length > 0) {\r\n      fetchStatesByCountries(country);\r\n    }\r\n  }, [country]);\r\n\r\n  useEffect(() => {\r\n    // Fetch cities if state data exists\r\n    if (state.length > 0) {\r\n      fetchCitiesByStates(state);\r\n    }\r\n  }, [state]);\r\n\r\n  useEffect(() => {\r\n    const newcity = userInfo?.pCityLivingInId?.map(\r\n      (id) => cities.find((data) => data?.id == id)?.name\r\n    );\r\n    setSelectedCities(newcity);\r\n  }, [userInfo?.pCityLivingInId, isCityCall]);\r\n\r\n  // Fetch states for multiple countries\r\n  const fetchStatesByCountries = async (countryId: number[]) => {\r\n    try {\r\n      // const newToken = localStorage.getItem('newToken');\r\n      const stoken = localStorage.getItem('SessionToken');\r\n      const stateResponse = await fetch('/api/admin/states/getStatesV2', {\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: `Bearer ${stoken}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ countryId, userId }) // Pass array of country IDs\r\n      });\r\n\r\n      if (!stateResponse.ok) {\r\n        throw new Error('Error fetching states');\r\n      }\r\n\r\n      const stateData = await stateResponse.json();\r\n      if (stateData && stateData.recordList) {\r\n        setSelectedState(stateData.recordList); // Update state dropdown with fetched states\r\n      } else {\r\n        console.error('Unexpected state data:', stateData);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching states by countries:', error);\r\n    }\r\n  };\r\n\r\n  const handleStateChange = async (event: SelectChangeEvent<typeof state>) => {\r\n    const selectedStates = event.target.value as number[];\r\n    console.info('selectedStates----->', selectedStates);\r\n    debugger;\r\n    setState(Array.isArray(selectedStates) ? selectedStates : []);\r\n    setErrors((prev) => ({ ...prev, state: '' }));\r\n\r\n    // Fetch cities for all selected states\r\n    if (selectedStates.length > 0) {\r\n      await fetchCitiesByStates(selectedStates);\r\n    } else {\r\n      // Reset city when no state is selected\r\n      setSelectedCity([]);\r\n    }\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      pStateLivingInId: selectedStates // Assuming 'heightId' is the field in your userInfo\r\n    }));\r\n  };\r\n\r\n  // Fetch cities for multiple states\r\n  const fetchCitiesByStates = async (stateId: number[]) => {\r\n    try {\r\n      // const newToken = localStorage.getItem('newToken');\r\n      const stoken = localStorage.getItem('SessionToken');\r\n      const cityResponse = await fetch('/api/admin/cities/getCitiesV2', {\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: `Bearer ${stoken}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ stateId, userId }) // Pass array of state IDs\r\n      });\r\n\r\n      if (!cityResponse.ok) {\r\n        throw new Error('Error fetching cities');\r\n      }\r\n\r\n      const cityData = await cityResponse.json();\r\n      if (cityData && cityData.recordList) {\r\n        setCities(cityData?.recordList);\r\n        setSelectedCity(cityData.recordList);\r\n        setIsCityCall(false); // Update city dropdown with fetched cities\r\n      } else {\r\n        console.error('Unexpected city data:', cityData);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching cities by states:', error);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const filteredCiti = useMemo(\r\n    () =>\r\n      cities.filter((city) =>\r\n        city.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n      ),\r\n    [cities, searchTerm]\r\n  );\r\n\r\n  const handleChange = (\r\n    event:\r\n      | SelectChangeEvent<typeof selectedCities>\r\n      | React.MouseEvent<HTMLDivElement, MouseEvent>\r\n      | any,\r\n    city?: any\r\n  ) => {\r\n    debugger;\r\n    const { value } = event.target;\r\n    setSelectedCities(typeof value === 'string' ? value.split(',') : value);\r\n  };\r\n\r\n  const renderRow = ({ index, style }: ListChildComponentProps) => {\r\n    // debugger;\r\n    const city = filteredCiti[index];\r\n    const isSelected = selectedCities?.includes(city?.name);\r\n    const count =\r\n      city && typeof city === 'object' ? Object.entries(city).length : 0;\r\n\r\n    return (\r\n      <MenuItem\r\n        key={city?.name}\r\n        value={city?.id}\r\n        style={style}\r\n        onClick={(e) => handleToggleCity(city, e)}\r\n      >\r\n        {city?.name ? (\r\n          <>\r\n            <Checkbox checked={isSelected} />\r\n            <ListItemText primary={city?.name} />\r\n          </>\r\n        ) : null}\r\n      </MenuItem>\r\n    );\r\n  };\r\n\r\n  const handleToggleCity = (cityName: any, e: any) => {\r\n    // Toggle city selection in selectedCities\r\n    setSelectedCities((prevSelected: string[] = []) => {\r\n      const isCitySelected = prevSelected.includes(cityName.name);\r\n\r\n      // Toggle city selection: add if not selected, remove if already selected\r\n      const updatedCities = isCitySelected\r\n        ? prevSelected.filter((name) => name !== cityName.name) // Deselect city\r\n        : [...prevSelected, cityName.name]; // Select city\r\n\r\n      return updatedCities;\r\n    });\r\n\r\n    // You can call this function after updating the city\r\n    setCityData(cityName);\r\n  };\r\n\r\n  const setCityData = (cityName) => {\r\n    setUserInfo((prevUserInfo) => {\r\n      const updatedCities = prevUserInfo.pCityLivingInId || []; // Get existing cities\r\n\r\n      const newCityData = updatedCities.includes(cityName.id)\r\n        ? updatedCities.filter((id) => id !== cityName.id) // Deselect city ID\r\n        : [...updatedCities, cityName.id]; // Add new city ID\r\n\r\n      return {\r\n        ...prevUserInfo,\r\n        pCityLivingInId: newCityData // Update userInfo with the modified city array\r\n      };\r\n    });\r\n  };\r\n  const handleLanguageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setMotherTongue(event.target.value);\r\n  };\r\n\r\n  const handleAddLanguage = (lang: string) => {\r\n    if (!selectedMotherTongue.includes(lang)) {\r\n      const selectedValue = [...selectedMotherTongue, lang];\r\n      setSelectedMotherTongue(selectedValue);\r\n\r\n      setUserInfo((prevUserInfo) => ({\r\n        ...prevUserInfo,\r\n        pMotherTongue: selectedValue\r\n      }));\r\n\r\n      // Clear the error for the language field if it exists\r\n      setErrors((prevErrors) => ({\r\n        ...prevErrors,\r\n        selectedLanguages: '' // Remove the error message\r\n      }));\r\n    }\r\n    setMotherTongue('');\r\n  };\r\n\r\n  // const handleRemoveLanguage = (langToRemove: string) => {\r\n  //   setSelectedMotherTongue(\r\n  //     selectedMotherTongue.filter((lang) => lang !== langToRemove)\r\n  //   );\r\n  // };\r\n  const handleRemoveLanguage = (langToRemove: string) => {\r\n    const selectedValue = selectedMotherTongue.filter(\r\n      (lang) => lang !== langToRemove\r\n    );\r\n    setSelectedMotherTongue(selectedValue);\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      pMotherTongue: selectedValue\r\n    }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (userInfo.pMotherTongue) {\r\n      setSelectedMotherTongue(userInfo.pMotherTongue);\r\n    }\r\n  }, [userInfo.pMotherTongue]);\r\n\r\n  const handleLanguageInputKeyDown = (\r\n    event: React.KeyboardEvent<HTMLInputElement>\r\n  ) => {\r\n    if (event.key === 'Enter' && motherTongue) {\r\n      handleAddLanguage(motherTongue);\r\n      event?.preventDefault(); // Prevent form submission on Enter\r\n    }\r\n  };\r\n\r\n  // Filter suggestions based on user input\r\n  const filteredLanguages = configData.languages.filter((lang: string) =>\r\n    lang.toLowerCase().includes(motherTongue.toLowerCase())\r\n  );\r\n\r\n  const handleCityChange = (event: SelectChangeEvent<typeof city>) => {\r\n    const value = event.target.value as number[];\r\n    setCity(value);\r\n    setErrors((prev) => ({ ...prev, city: '' }));\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      pCityLivingInId: value // Assuming 'heightId' is the field in your userInfo\r\n    }));\r\n  };\r\n\r\n  const handleMultipleSelectChange =\r\n    (\r\n      setter: React.Dispatch<React.SetStateAction<number[]>>,\r\n      fieldName: keyof AddAppUser\r\n    ) =>\r\n    (event: SelectChangeEvent<number[]>) => {\r\n      const value = event.target.value as number[]; // Cast to number array\r\n\r\n      if (value.includes(0)) {\r\n        // If 'Open For All' (value 0) is selected, deselect all others and set only 0\r\n        setter([0]);\r\n      } else {\r\n        // If any other option is selected, remove 'Open For All' (value 0) from the selection\r\n        setter(value.filter((val) => val !== 0));\r\n      }\r\n\r\n      // Reset the error for the current field\r\n      setErrors((prev) => ({ ...prev, [event.target.name]: '' }));\r\n      setUserInfo((prevUserInfo) => ({\r\n        ...prevUserInfo,\r\n        [fieldName]: value // Update the specific field in userInfo\r\n      }));\r\n    };\r\n\r\n  const handleMultipleSelectChangecomplexion =\r\n    (\r\n      setter: React.Dispatch<React.SetStateAction<string[]>>,\r\n      fieldName: keyof AddAppUser\r\n    ) =>\r\n    (event: SelectChangeEvent<string[]>) => {\r\n      const value = event.target.value as string[]; // Casting to number array\r\n\r\n      if (value.includes('0')) {\r\n        // If 'Open For All' (value 0) is selected, set only 0\r\n        setter(['0']);\r\n      } else {\r\n        // If 'Open For All' is not selected, keep the current values without 0\r\n        setter(value.filter((val) => val !== '0'));\r\n      }\r\n\r\n      // Resetting the error for the current field\r\n      setErrors((prev) => ({ ...prev, [event.target.name]: '' }));\r\n      setUserInfo((prevUserInfo) => ({\r\n        ...prevUserInfo,\r\n        [fieldName]: value // Update the specific field in userInfo\r\n      }));\r\n    };\r\n\r\n  const handleExpectation = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setExpectation(event.target.value);\r\n    const selectedValue = event.target.value;\r\n\r\n    setErrors((prevErrors) => ({ ...prevErrors, expectation: '' }));\r\n    setUserInfo((prevUserInfo) => ({\r\n      ...prevUserInfo,\r\n      pOtherExpectations: selectedValue // Update the specific field in userInfo\r\n    }));\r\n  };\r\n\r\n  // Validate the form fields\r\n  const validateForm = () => {\r\n    let valid = true;\r\n    const newErrors: { [key: string]: string } = {};\r\n\r\n    if (martialStatus.length === 0) {\r\n      newErrors.martialStatus = 'Marital status is required';\r\n      valid = false;\r\n    }\r\n    if (!profileWithChildren) {\r\n      newErrors.profileWithChildren = 'Profile with children is required';\r\n      valid = false;\r\n    }\r\n    if (!preferredLivingStatus) {\r\n      newErrors.preferredLivingStatus = 'Preferred living status is required';\r\n      valid = false;\r\n    }\r\n    if (religion.length === 0) {\r\n      newErrors.religion = 'At least one religion must be selected';\r\n      valid = false;\r\n    }\r\n    if (caste.length === 0) {\r\n      newErrors.caste = 'At least one caste must be selected';\r\n      valid = false;\r\n    }\r\n    if (!horoscopeBelief) {\r\n      newErrors.horoscopeBelief = 'Horoscope belief is required';\r\n      valid = false;\r\n    }\r\n    if (!manglikBelief) {\r\n      newErrors.manglikBelief = 'Manglik belief is required';\r\n      valid = false;\r\n    }\r\n    if (!smokingAcceptance) {\r\n      newErrors.smokingAcceptance = 'Smoking acceptance is required';\r\n      valid = false;\r\n    }\r\n    if (!alcoholAcceptance) {\r\n      newErrors.alcoholAcceptance = 'Alcohol acceptance is required';\r\n      valid = false;\r\n    }\r\n    if (!disabilityAcceptance) {\r\n      newErrors.disabilityAcceptance = 'Disability acceptance is required';\r\n      valid = false;\r\n    }\r\n    if (country.length === 0) {\r\n      newErrors.country = 'At least one country must be selected';\r\n      valid = false;\r\n    }\r\n    if (state.length === 0) {\r\n      newErrors.state = 'At least one state must be selected';\r\n      valid = false;\r\n    }\r\n    if (selectedCities.length === 0) {\r\n      newErrors.city = 'At least one city must be selected';\r\n      valid = false;\r\n    }\r\n    if (qualification.length === 0) {\r\n      newErrors.qualification = 'At least one qualification must be selected';\r\n      valid = false;\r\n    }\r\n    if (educationMedium.length === 0) {\r\n      newErrors.educationMedium =\r\n        'At least one educationMedium must be selected';\r\n      valid = false;\r\n    }\r\n    if (profession.length === 0) {\r\n      newErrors.profession = 'At least one profession must be selected';\r\n      valid = false;\r\n    }\r\n    if (workingWith.length === 0) {\r\n      newErrors.workingWith = 'At least one workingWith must be selected';\r\n      valid = false;\r\n    }\r\n    if (annualIncome.length === 0) {\r\n      newErrors.annualIncome = 'At least one annualIncome must be selected';\r\n      valid = false;\r\n    }\r\n    // if (!motherTongue) {\r\n    //   newErrors.motherTongue = 'Mother Tongue is required';\r\n    //   valid = false;\r\n    // }\r\n    if (selectedMotherTongue.length === 0) {\r\n      newErrors.selectedLanguages = 'Language is required';\r\n      valid = false;\r\n    }\r\n    if (diet.length === 0) {\r\n      newErrors.diet = 'Diet preference is required';\r\n      valid = false;\r\n    }\r\n    if (complexion.length === 0) {\r\n      newErrors.complexion = 'Complexion is required';\r\n      valid = false;\r\n    }\r\n    if (bodyType.length === 0) {\r\n      newErrors.bodyType = 'Body type is required';\r\n      valid = false;\r\n    }\r\n    if (expectation.length === 0) {\r\n      newErrors.expectation = 'Expection is required';\r\n      valid = false;\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return valid;\r\n  };\r\n\r\n  const filteredCities = selectedCity.filter((city) =>\r\n    city.name.toLowerCase().includes(searchQuery.toLowerCase())\r\n  );\r\n\r\n  let isEdit;\r\n  isEdit = localStorage.getItem('isEdit');\r\n\r\n  const handleNext = async () => {\r\n    // First validate the form before submitting\r\n    if (validateForm()) {\r\n      try {\r\n        // Retrieve user data from localStorage\r\n\r\n        const newToken = localStorage.getItem('newToken');\r\n\r\n        const rtoken = localStorage.getItem('rtoken');\r\n\r\n        // Check if essential tokens and user ID are available\r\n        // if (!userId || !newToken || !rtoken) {\r\n        //   setApiError('User information is missing.');\r\n        //   return;\r\n        // }\r\n        const token = localStorage.getItem('newToken');\r\n        // Prepare the request body with the current state values\r\n        const requestBody = {\r\n          id: userId, // User ID\r\n          pFromAge: ageRange[0], // From Age\r\n          pToAge: ageRange[1], // To Age\r\n          pFromHeight: heightRange[0], // From Height (in cm)\r\n          pToHeight: heightRange[1], // To Height (in cm)\r\n          pMaritalStatusId: userInfo.pMaritalStatusId.join(','), // Marital Status\r\n          pProfileWithChildren: userInfo.pProfileWithChildren, // Profile with Children\r\n\r\n          pFamilyType: userInfo.pFamilyType, // Family Type, assuming you have a state for this\r\n          pReligionId: userInfo.pReligionId.join(','), // Religion, joining array as comma-separated string\r\n          pCommunityId: userInfo.pCommunityId.join(','), // Caste, joining array as comma-separated string\r\n\r\n          pMotherTongue: userInfo.pMotherTongue.join(','), // Mother Tongue\r\n          pHoroscopeBelief: userInfo.pHoroscopeBelief, // Horoscope Belief\r\n\r\n          pManglikMatch: userInfo.pManglikMatch, // Manglik Match Belief\r\n\r\n          pCountryLivingInId: userInfo.pCountryLivingInId.join(','), // Country Living In, joining array as comma-separated string\r\n\r\n          pStateLivingInId: userInfo.pStateLivingInId.join(','), // State Living In, joining array as comma-separated string\r\n\r\n          pCityLivingInId: userInfo.pCityLivingInId.join(','), // City Living In, joining array as comma-separated string\r\n\r\n          pEducationTypeId: userInfo.pEducationTypeId.join(','), // Education Type\r\n\r\n          pEducationMediumId: userInfo.pEducationMediumId.join(','), // Education Medium\r\n\r\n          pOccupationId: userInfo.pOccupationId.join(','), // Occupation/Profession\r\n\r\n          pEmploymentTypeId: userInfo.pEmploymentTypeId.join(','), // Employment Type\r\n\r\n          pAnnualIncomeId: userInfo.pAnnualIncomeId.join(','), // Annual Income\r\n\r\n          pDietId: userInfo.pDietId.join(','), // Diet Preference\r\n          pSmokingAcceptance: userInfo.pSmokingAcceptance, // Smoking Acceptance\r\n\r\n          pAlcoholAcceptance: userInfo.pAlcoholAcceptance, // Alcohol Acceptance\r\n\r\n          pDisabilityAcceptance: userInfo.pDisabilityAcceptance, // Disability Acceptance\r\n\r\n          pComplexion: userInfo.pComplexion.join(','), // Complexion\r\n          pBodyType: userInfo.pBodyType.join(','), // Body Type\r\n          pOtherExpectations: userInfo.pOtherExpectations, // Other Expectations\r\n          screenNumber: 10, // Current screen number\r\n          token: token,\r\n          ...(token ? {} : { userId: userId })\r\n        };\r\n\r\n        // Send the API request with similar headers to Step 9\r\n        const response = await fetch('/api/admin/users/completeUserProfileV2', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `MatrimonyAndroid|Bearer ${newToken}`, // Same as in Step 9\r\n            refreshtoken: `${rtoken}` // Same as in Step 9\r\n          },\r\n          body: JSON.stringify(requestBody)\r\n        });\r\n\r\n        const result = await response.json();\r\n\r\n        // Handle successful response\r\n        if (response.ok) {\r\n          console.log('Data submitted successfully:', result);\r\n          onNext(); // Navigate to the next step if submission is successful\r\n        } else {\r\n          console.error('Error submitting data:', result);\r\n          // Optionally display error to user\r\n          setApiError(result.message || 'Error submitting data');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error in handleNext:', error);\r\n        // Optionally display error to user\r\n        setApiError(\r\n          error.message || 'An error occurred while submitting the data.'\r\n        );\r\n      }\r\n    } else {\r\n      // If validation fails, scroll to the first error field\r\n      // onNext();\r\n      const firstErrorElement = document.querySelector('.error-message');\r\n      if (firstErrorElement) {\r\n        firstErrorElement.scrollIntoView({ behavior: 'smooth' });\r\n      }\r\n    }\r\n  };\r\n\r\n  const MenuProps = {\r\n    PaperProps: {\r\n      style: {\r\n        maxHeight: 200\r\n        // width: 300\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (cred?.isDemoUser) {\r\n      showSnackBar(\r\n        \"**Access Denied**\\nWe're sorry, but you do not have permission to access this feature.\"\r\n      );\r\n    }\r\n  }, []);\r\n  return (\r\n    <Box>\r\n      {cred.isDemoUser > 0 && <SnackbarComponent />}\r\n      <Card className=\"container\">\r\n        {/* Title */}\r\n        <Typography variant=\"h3\" className=\"title\">\r\n          {currentTitle}\r\n        </Typography>\r\n\r\n        {/* Progress Bar */}\r\n        <Box className=\"progress-bar-container\">\r\n          <Box className=\"progress-bar\" style={{ width: progressBarLength }} />\r\n        </Box>\r\n\r\n        {/* Form Fields */}\r\n        <Box sx={{ width: '100%', mb: 2, p: 4 }}>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h3\">Preffered Apperance</Typography>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Age Range</FormLabel>\r\n                <Slider\r\n                  value={ageRange}\r\n                  onChange={(event, newValue) =>\r\n                    setAgeRange(newValue as number[])\r\n                  }\r\n                  valueLabelDisplay=\"auto\"\r\n                  min={18}\r\n                  max={60}\r\n                />\r\n                <Typography>\r\n                  {ageRange[0]} - {ageRange[1]} years\r\n                </Typography>\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Height Range</FormLabel>\r\n                <Slider\r\n                  value={heightRange}\r\n                  onChange={(event, newValue) =>\r\n                    setHeightRange(newValue as number[])\r\n                  }\r\n                  valueLabelDisplay=\"auto\"\r\n                  min={140}\r\n                  max={200}\r\n                />\r\n                <Typography>\r\n                  {heightRange[0]} - {heightRange[1]} cm\r\n                </Typography>\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Marital Status *</FormLabel>\r\n                {/* <Select\r\n                  name=\"martialStatus\"\r\n                  multiple\r\n                  value={martialStatus}\r\n                  onChange={handleMultipleSelectChange(setMartialStatus)}\r\n                  input={<OutlinedInput />}\r\n                  size=\"small\"\r\n                  renderValue={(selected) => {\r\n                    // Find names for selected IDs\r\n                    const selectedNames = configData.maritalStatus\r\n                      .filter(status => selected.includes(status.id))\r\n                      .map(status => status.name);\r\n                    return selectedNames.join(', ');\r\n                  }}\r\n                  // displayEmpty\r\n                >\r\n                  <MenuItem value=\"\" disabled>\r\n                    Please select your marital status\r\n                  </MenuItem>\r\n                  {configData.maritalStatus.map((status: any) => (\r\n                    <MenuItem key={status.id} value={status.id}>\r\n                      {status.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                   {configData.maritalStatus.map((status) => (\r\n                    <MenuItem key={status.id} value={status.id}>\r\n                      <Checkbox checked={martialStatus.indexOf(status.id) > -1} />\r\n                      {status.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select> */}\r\n                <Select\r\n                  name=\"martialStatus\"\r\n                  multiple\r\n                  value={martialStatus}\r\n                  onChange={handleMultipleSelectChange(\r\n                    setMartialStatus,\r\n                    'pMaritalStatusId'\r\n                  )}\r\n                  input={<OutlinedInput />}\r\n                  size=\"small\"\r\n                  renderValue={(selected) => {\r\n                    if (selected.includes(0)) {\r\n                      // Display \"Open For All\" when the value 0 is selected\r\n                      return 'Open For All';\r\n                    }\r\n                    const selectedNames = configData.maritalStatus\r\n                      .filter((status) => selected.includes(status.id))\r\n                      .map((status) => status.name);\r\n                    return selectedNames.join(', ');\r\n                  }}\r\n                  open={martialDropdownOpen}\r\n                  onClose={handleClose}\r\n                  // onOpen={handleOpen}\r\n                  onOpen={() => handleOpen('martial')}\r\n                >\r\n                  <MenuItem value={0}>\r\n                    <Checkbox checked={martialStatus.includes(0)} /> Open For\r\n                    All\r\n                  </MenuItem>\r\n                  {configData.maritalStatus.map((status) => (\r\n                    <MenuItem key={status.id} value={status.id}>\r\n                      <Checkbox\r\n                        checked={martialStatus.indexOf(status.id) > -1}\r\n                      />\r\n                      {status.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                  {/* Add a container for the \"Done\" button with a fixed position */}\r\n                  <div className=\"donebutton\">\r\n                    <Button variant=\"contained\" onClick={handleDone}>\r\n                      Done\r\n                    </Button>\r\n                  </div>\r\n                </Select>\r\n\r\n                {errors.martialStatus && (\r\n                  <Typography color=\"error\">{errors.martialStatus}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            {/* Profile with Children Radio Buttons */}\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Profile with Children *</FormLabel>\r\n                <RadioGroup\r\n                  name=\"profileWithChildren\"\r\n                  value={profileWithChildren}\r\n                  onChange={handleRadioChange(\r\n                    setProfileWithChildren,\r\n                    'pProfileWithChildren'\r\n                  )}\r\n                  row\r\n                >\r\n                  <FormControlLabel value={1} control={<Radio />} label=\"Yes\" />\r\n                  <FormControlLabel\r\n                    value={2}\r\n                    control={<Radio />}\r\n                    label=\"Yes, if they live separately\"\r\n                  />\r\n                  <FormControlLabel value={3} control={<Radio />} label=\"No\" />\r\n                </RadioGroup>\r\n                {errors.profileWithChildren && (\r\n                  <Typography color=\"error\">\r\n                    {errors.profileWithChildren}\r\n                  </Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            {/* Preferred Living Status Radio Buttons */}\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Preferred Living Status *</FormLabel>\r\n                <RadioGroup\r\n                  name=\"preferredLivingStatus\"\r\n                  value={preferredLivingStatus}\r\n                  onChange={handleRadioChange(\r\n                    setPreferredLivingStatus,\r\n                    'pFamilyType'\r\n                  )}\r\n                  row\r\n                >\r\n                  <FormControlLabel\r\n                    value=\"Joint Family\"\r\n                    control={<Radio />}\r\n                    label=\"Joint Family\"\r\n                  />\r\n                  <FormControlLabel\r\n                    value=\"Nuclear\"\r\n                    control={<Radio />}\r\n                    label=\"Nuclear\"\r\n                  />\r\n                  <FormControlLabel\r\n                    value=\"Doesn't matter\"\r\n                    control={<Radio />}\r\n                    label=\"Doesn't matter\"\r\n                  />\r\n                </RadioGroup>\r\n                {errors.preferredLivingStatus && (\r\n                  <Typography color=\"error\">\r\n                    {errors.preferredLivingStatus}\r\n                  </Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h3\">Preffered Community Details</Typography>\r\n            </Grid>\r\n\r\n            {/* Religion Multi-select Dropdown */}\r\n            {/* <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Religion *</FormLabel>\r\n                <Select\r\n                  name=\"religion\"\r\n                  multiple\r\n                  value={religion}\r\n                  onChange={handleReligionChange}\r\n                  input={<OutlinedInput />}\r\n                  renderValue={(selected) => (selected as string[]).join(', ')}\r\n                  size=\"small\"\r\n                >\r\n                  {[\r\n                    'Hindu',\r\n                    'Muslim',\r\n                    'Christian',\r\n                    'Sikh',\r\n                    'Buddhist',\r\n                    'Jain',\r\n                    'Other'\r\n                  ].map((rel) => (\r\n                    <MenuItem key={rel} value={rel}>\r\n                      <Checkbox checked={religion.indexOf(rel) > -1} />\r\n                      {rel}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {errors.religion && (\r\n                  <Typography color=\"error\">{errors.religion}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid> */}\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Religion *</FormLabel>\r\n                <Select\r\n                  name=\"religion\"\r\n                  multiple\r\n                  value={religion}\r\n                  onChange={handleReligionChange}\r\n                  input={<OutlinedInput />}\r\n                  // renderValue={(selected) => (selected as number[]).join(', ')}\r\n                  renderValue={(selected) => {\r\n                    if (selected.includes(0)) {\r\n                      // Display \"Open For All\" when the value 0 is selected\r\n                      return 'Open For All';\r\n                    }\r\n                    const selectedNames = religionOptions\r\n                      .filter((rel) => selected.includes(rel.id))\r\n                      .map((rel) => rel.name);\r\n                    return selectedNames.join(', ');\r\n                  }}\r\n                  size=\"small\"\r\n                  open={reliogionDropdownOpen}\r\n                  onClose={handleClose}\r\n                  // onOpen={handleOpen}\r\n                  onOpen={() => handleOpen('religion')}\r\n                >\r\n                  <MenuItem disabled>Select Religion</MenuItem>\r\n                  <MenuItem value={0}>\r\n                    <Checkbox checked={religion.includes(0)} /> Open For All\r\n                  </MenuItem>\r\n                  {religionOptions.map((rel) => (\r\n                    <MenuItem key={rel.id} value={rel.id}>\r\n                      <Checkbox checked={religion.indexOf(rel.id) > -1} />\r\n                      {rel.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                  <div className=\"donebutton\">\r\n                    <Button variant=\"contained\" onClick={handleDone}>\r\n                      Done\r\n                    </Button>\r\n                  </div>\r\n                </Select>\r\n                {errors.religion && (\r\n                  <Typography color=\"error\">{errors.religion}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            {/* Caste Multi-select Dropdown */}\r\n            {/* <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Caste *</FormLabel>\r\n                <Select\r\n                  name=\"caste\"\r\n                  multiple\r\n                  value={caste}\r\n                  onChange={handleCasteChange}\r\n                  input={<OutlinedInput />}\r\n                  // renderValue={(selected) => (selected as number[]).join(', ')}\r\n                  renderValue={(selected) => {\r\n                    // Find names for selected IDs\r\n                    const selectedCst = selectedCaste\r\n                      .filter((cst) => selected.includes(cst.id))\r\n                      .map((cst) => cst.name);\r\n                    return selectedCst.join(', ');\r\n                  }}\r\n                  size=\"small\"\r\n                >\r\n                  <MenuItem value={0}>\r\n                    <Checkbox checked={caste.includes(0)} /> Open For\r\n                    All\r\n                  </MenuItem>\r\n                  {selectedCaste.map((cst) => (\r\n                    <MenuItem key={cst.id} value={cst.id}>\r\n                      <Checkbox checked={caste.indexOf(cst.id) > -1} />\r\n                      {cst.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {errors.caste && (\r\n                  <Typography color=\"error\">{errors.caste}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid> */}\r\n\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Caste *</FormLabel>\r\n                <Select\r\n                  name=\"caste\"\r\n                  multiple\r\n                  value={caste}\r\n                  onChange={handleCasteChange}\r\n                  input={<OutlinedInput />}\r\n                  renderValue={(selected) => {\r\n                    if (selected.includes(0)) {\r\n                      // Display \"Open For All\" when the value 0 is selected\r\n                      return 'Open For All';\r\n                    }\r\n                    const selectedCst = selectedCaste\r\n                      .filter((cst) => selected.includes(cst.id))\r\n                      .map((cst) => cst.name);\r\n                    return selectedCst.join(', ');\r\n                  }}\r\n                  size=\"small\"\r\n                  open={casteDropdownOpen}\r\n                  onClose={handleClose}\r\n                  onOpen={() => handleOpen('caste')}\r\n                  // MenuProps={{\r\n                  //   PaperProps: {\r\n                  //     sx: {\r\n                  //       position: 'relative',\r\n                  //       '& .MuiMenuItem-root': {\r\n                  //         paddingBottom: '30px', // Space for the button\r\n                  //       },\r\n                  //     },\r\n                  //   },\r\n                  // }}\r\n                >\r\n                  <MenuItem value={0}>\r\n                    <Checkbox checked={caste.includes(0)} /> Open For All\r\n                  </MenuItem>\r\n                  {selectedCaste.map((cst) => (\r\n                    <MenuItem key={cst.id} value={cst.id}>\r\n                      <Checkbox checked={caste.indexOf(cst.id) > -1} />\r\n                      {cst.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                  <div className=\"donebutton\">\r\n                    <Button variant=\"contained\" onClick={handleDone}>\r\n                      Done\r\n                    </Button>\r\n                  </div>\r\n                </Select>\r\n\r\n                {errors.caste && (\r\n                  <Typography color=\"error\">{errors.caste}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            {/* Mother Tongue Dropdown */}\r\n            {/* <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Mother Tongue *</FormLabel>\r\n                <Select\r\n                  name=\"motherTongue\"\r\n                  value={motherTongue}\r\n                  onChange={handleSelectChange(setMotherTongue)}\r\n                  size=\"small\"\r\n                  displayEmpty\r\n                >\r\n                  <MenuItem value=\"\" disabled>\r\n                    Please select your mother tongue\r\n                  </MenuItem>\r\n                  {configData.languages.map((language: string) => (\r\n                    <MenuItem key={language} value={language}>\r\n                      {language}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {errors.motherTongue && (\r\n                  <Typography color=\"error\">{errors.motherTongue}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid> */}\r\n\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Mother Tounge *</FormLabel>\r\n\r\n                {/* Input field for typing languages */}\r\n                <TextField\r\n                  value={motherTongue}\r\n                  onChange={handleLanguageChange}\r\n                  onKeyDown={handleLanguageInputKeyDown}\r\n                  placeholder=\"e.g English, Hindi\"\r\n                  size=\"small\"\r\n                />\r\n\r\n                {/* Show suggestions below the input field */}\r\n                {motherTongue && (\r\n                  <Box>\r\n                    {filteredLanguages.map((lang: string) => (\r\n                      <Chip\r\n                        key={lang}\r\n                        label={lang}\r\n                        onClick={() => handleAddLanguage(lang)}\r\n                        style={{ margin: '2px' }}\r\n                      />\r\n                    ))}\r\n                  </Box>\r\n                )}\r\n\r\n                {/* Display selected languages as chips */}\r\n                <Box mt={1}>\r\n                  {selectedMotherTongue.map((lang: string) => (\r\n                    <Chip\r\n                      key={lang}\r\n                      label={lang}\r\n                      onDelete={() => handleRemoveLanguage(lang)}\r\n                      color=\"primary\"\r\n                      style={{ margin: '2px' }}\r\n                    />\r\n                  ))}\r\n                </Box>\r\n\r\n                {errors.selectedLanguages && (\r\n                  <Typography color=\"error\">\r\n                    {errors.selectedLanguages}\r\n                  </Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h3\">\r\n                Preffered Astrological Details\r\n              </Typography>\r\n            </Grid>\r\n\r\n            {/* Horoscope Belief Radio Buttons */}\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Horoscope Belief *</FormLabel>\r\n                <RadioGroup\r\n                  name=\"horoscopeBelief\"\r\n                  value={horoscopeBelief}\r\n                  onChange={handleRadioChange(\r\n                    setHoroscopeBelief,\r\n                    'pHoroscopeBelief'\r\n                  )}\r\n                  row\r\n                >\r\n                  <FormControlLabel value={1} control={<Radio />} label=\"Yes\" />\r\n                  <FormControlLabel value={2} control={<Radio />} label=\"No\" />\r\n                  <FormControlLabel\r\n                    value={0}\r\n                    control={<Radio />}\r\n                    label=\"Doesn't matter\"\r\n                  />\r\n                </RadioGroup>\r\n                {errors.horoscopeBelief && (\r\n                  <Typography color=\"error\">\r\n                    {errors.horoscopeBelief}\r\n                  </Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            {/* Manglik Belief Radio Buttons */}\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Manglik Belief *</FormLabel>\r\n                <RadioGroup\r\n                  name=\"manglikBelief\"\r\n                  value={manglikBelief}\r\n                  onChange={handleRadioChange(\r\n                    setManglikBelief,\r\n                    'pManglikMatch'\r\n                  )}\r\n                  row\r\n                >\r\n                  <FormControlLabel value={1} control={<Radio />} label=\"Yes\" />\r\n                  <FormControlLabel value={2} control={<Radio />} label=\"No\" />\r\n                  <FormControlLabel\r\n                    value={0}\r\n                    control={<Radio />}\r\n                    label=\"Doesn't matter\"\r\n                  />\r\n                </RadioGroup>\r\n                {errors.manglikBelief && (\r\n                  <Typography color=\"error\">{errors.manglikBelief}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h3\">Preffered Location</Typography>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Country *</FormLabel>\r\n                <Select\r\n                  name=\"country\"\r\n                  multiple\r\n                  value={country}\r\n                  onChange={handleCountryChange}\r\n                  input={<OutlinedInput />}\r\n                  // renderValue={(selected) => (selected as string[]).join(', ')}\r\n                  renderValue={(selected) => {\r\n                    // Find names for selected IDs\r\n                    const selectedNames = selectedCountry\r\n                      .filter((cntry) => selected.includes(cntry.id))\r\n                      .map((cntry) => cntry.name);\r\n                    return selectedNames.join(', ');\r\n                  }}\r\n                  size=\"small\"\r\n                  open={countryDropdownOpen}\r\n                  onClose={handleClose}\r\n                  onOpen={() => handleOpen('country')}\r\n                >\r\n                  {selectedCountry.map((cntry) => (\r\n                    <MenuItem key={cntry.id} value={cntry.id}>\r\n                      <Checkbox checked={country.indexOf(cntry.id) > -1} />\r\n                      {cntry.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                  <div className=\"donebutton\">\r\n                    <Button variant=\"contained\" onClick={handleDone}>\r\n                      Done\r\n                    </Button>\r\n                  </div>\r\n                </Select>\r\n                {errors.country && (\r\n                  <Typography color=\"error\">{errors.country}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>State *</FormLabel>\r\n                {/* <Select\r\n                  name=\"state\"\r\n                  multiple\r\n                  value={state || []}\r\n                  onChange={handleStateChange}\r\n                  input={<OutlinedInput />}\r\n                  // renderValue={(selected) => (selected as string[]).join(', ')}\r\n                  renderValue={(selected) => {\r\n                    // Find names for selected IDs\r\n                    const selectedNames = selectedState\r\n                      .filter((st) => selected.includes(st.id))\r\n                      .map((st) => st.name);\r\n                    return selectedNames;\r\n                  }}\r\n                  size=\"small\"\r\n                  open={stateDropdownOpen}\r\n                  onClose={handleClose}\r\n                  onOpen={() => handleOpen('state')}\r\n                >\r\n                  {selectedState.map((st) => (\r\n                    <MenuItem key={st.id} value={st.id}>\r\n                      <Checkbox checked={state.indexOf(st.id) > -1} />\r\n                      {st.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                  <div className=\"donebutton\">\r\n                    <Button variant=\"contained\" onClick={handleDone}>\r\n                      Done\r\n                    </Button>\r\n                  </div>\r\n                </Select> */}\r\n                <Select\r\n                  name=\"state\"\r\n                  multiple\r\n                  value={Array.isArray(state) ? state : []} // Ensure it's always an array\r\n                  onChange={handleStateChange}\r\n                  input={<OutlinedInput />}\r\n                  renderValue={(selected) => {\r\n                    const selectedNames = selectedState\r\n                      .filter((st) => selected.includes(st.id))\r\n                      .map((st) => st.name);\r\n                    return selectedNames.join(', ');\r\n                  }}\r\n                  size=\"small\"\r\n                  open={stateDropdownOpen}\r\n                  onClose={handleClose}\r\n                  onOpen={() => handleOpen('state')}\r\n                >\r\n                  {selectedState.map((st) => (\r\n                    <MenuItem key={st.id} value={st.id}>\r\n                      <Checkbox checked={state?.indexOf(st.id) > -1} />\r\n                      {st.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n\r\n                {errors.state && (\r\n                  <Typography color=\"error\">{errors.state}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>City *</FormLabel>\r\n                {loading ? (\r\n                  <Select\r\n                    labelId=\"demo-multiple-checkbox-label\"\r\n                    id=\"demo-multiple-checkbox\"\r\n                    size=\"small\"\r\n                    value=\"\"\r\n                    onChange={(e) => handleChange(e)}\r\n\r\n                    // MenuProps={MenuProps}\r\n                  />\r\n                ) : (\r\n                  <>\r\n                    <Select\r\n                      labelId=\"demo-multiple-checkbox-label\"\r\n                      id=\"demo-multiple-checkbox\"\r\n                      multiple\r\n                      size=\"small\"\r\n                      value={\r\n                        Array.isArray(selectedCities) ? selectedCities : []\r\n                      }\r\n                      onChange={(e) => handleChange(e)}\r\n                      input={<OutlinedInput />}\r\n                      //   renderValue={(selected) => {\r\n                      //     const selectedNames = selectedCities\r\n                      //       .filter((cty) => selected?.includes(cty?.id))\r\n                      //       .map((cty) => cty?.name);\r\n                      //     return selectedNames;\r\n                      //   }}\r\n                      renderValue={() => selectedCities?.join(',')}\r\n                      MenuProps={MenuProps}\r\n                    >\r\n                      <TextField\r\n                        placeholder=\"Search City\"\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        fullWidth\r\n                        margin=\"dense\"\r\n                        onChange={(e) => setSearchTerm(e.target.value)}\r\n                      />\r\n\r\n                      <List\r\n                        height={150} // Set height for virtualization\r\n                        itemCount={filteredCities.length}\r\n                        itemSize={48} // Row height\r\n                        width=\"100%\"\r\n                        // fullWidth\r\n                      >\r\n                        {renderRow}\r\n                      </List>\r\n                    </Select>\r\n                  </>\r\n                )}\r\n                {errors.city && (\r\n                  <Typography color=\"error\">{errors.city}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h3\">Preffered Education Details</Typography>\r\n            </Grid>\r\n\r\n            {/* Qualification Dropdown */}\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Qualification *</FormLabel>\r\n                <Select\r\n                  name=\"qualification\"\r\n                  multiple\r\n                  value={qualification}\r\n                  onChange={handleMultipleSelectChange(\r\n                    setQualification,\r\n                    'pEducationTypeId'\r\n                  )}\r\n                  input={<OutlinedInput />}\r\n                  // renderValue={(selected) => (selected as string[]).join(', ')}\r\n                  renderValue={(selected) => {\r\n                    if (selected.includes(0)) {\r\n                      // Display \"Open For All\" when the value 0 is selected\r\n                      return 'Open For All';\r\n                    }\r\n                    const selectedNames = qualificationOptions\r\n                      .filter((qual) => selected.includes(qual.id))\r\n                      .map((qual) => qual.name);\r\n                    return selectedNames.join(', ');\r\n                  }}\r\n                  size=\"small\"\r\n                  open={qualificationDropdownOpen}\r\n                  onClose={handleClose}\r\n                  onOpen={() => handleOpen('qualification')}\r\n                >\r\n                  <MenuItem value={0}>\r\n                    <Checkbox checked={qualification.includes(0)} /> Open For\r\n                    All\r\n                  </MenuItem>\r\n                  {qualificationOptions.map((qual) => (\r\n                    <MenuItem key={qual.id} value={qual.id}>\r\n                      <Checkbox checked={qualification.indexOf(qual.id) > -1} />\r\n                      {qual.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                  <div className=\"donebutton\">\r\n                    <Button variant=\"contained\" onClick={handleDone}>\r\n                      Done\r\n                    </Button>\r\n                  </div>\r\n                </Select>\r\n                {errors.qualification && (\r\n                  <Typography color=\"error\">{errors.qualification}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            {/* Education Medium Dropdown */}\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Education Medium *</FormLabel>\r\n                <Select\r\n                  name=\"educationMedium\"\r\n                  multiple\r\n                  value={educationMedium}\r\n                  onChange={handleMultipleSelectChange(\r\n                    setEducationMedium,\r\n                    'pEducationMediumId'\r\n                  )}\r\n                  input={<OutlinedInput />}\r\n                  // renderValue={(selected) => (selected as string[]).join(', ')}\r\n                  renderValue={(selected) => {\r\n                    if (selected.includes(0)) {\r\n                      // Display \"Open For All\" when the value 0 is selected\r\n                      return 'Open For All';\r\n                    }\r\n                    const selectedNames = educationMediumOptions\r\n                      .filter((medium) => selected.includes(medium.id))\r\n                      .map((medium) => medium.name);\r\n                    return selectedNames.join(', ');\r\n                  }}\r\n                  size=\"small\"\r\n                  open={educationMediumDropdownOpen}\r\n                  onClose={handleClose}\r\n                  onOpen={() => handleOpen('educationMedium')}\r\n                >\r\n                  <MenuItem value={0}>\r\n                    <Checkbox checked={educationMedium.includes(0)} /> Open For\r\n                    All\r\n                  </MenuItem>\r\n                  {educationMediumOptions.map((medium) => (\r\n                    <MenuItem key={medium.id} value={medium.id}>\r\n                      <Checkbox\r\n                        checked={educationMedium.indexOf(medium.id) > -1}\r\n                      />\r\n                      {medium.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                  <div className=\"donebutton\">\r\n                    <Button variant=\"contained\" onClick={handleDone}>\r\n                      Done\r\n                    </Button>\r\n                  </div>\r\n                </Select>\r\n                {errors.educationMedium && (\r\n                  <Typography color=\"error\">\r\n                    {errors.educationMedium}\r\n                  </Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            {/* Profession Dropdown */}\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Profession *</FormLabel>\r\n                <Select\r\n                  name=\"profession\"\r\n                  multiple\r\n                  value={profession}\r\n                  onChange={handleMultipleSelectChange(\r\n                    setProfession,\r\n                    'pOccupationId'\r\n                  )}\r\n                  input={<OutlinedInput />}\r\n                  // renderValue={(selected) => (selected as string[]).join(', ')}\r\n                  renderValue={(selected) => {\r\n                    if (selected.includes(0)) {\r\n                      // Display \"Open For All\" when the value 0 is selected\r\n                      return 'Open For All';\r\n                    }\r\n                    const selectedNames = selectedProfession\r\n                      .filter((prof) => selected.includes(prof.id))\r\n                      .map((prof) => prof.name);\r\n                    return selectedNames.join(', ');\r\n                  }}\r\n                  size=\"small\"\r\n                  open={professionDropdownOpen}\r\n                  onClose={handleClose}\r\n                  onOpen={() => handleOpen('profession')}\r\n                >\r\n                  <MenuItem value={0}>\r\n                    <Checkbox checked={profession.includes(0)} /> Open For All\r\n                  </MenuItem>\r\n                  {selectedProfession.map((prof) => (\r\n                    <MenuItem key={prof.id} value={prof.id}>\r\n                      <Checkbox checked={profession.indexOf(prof.id) > -1} />\r\n                      {prof.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                  <div className=\"donebutton\">\r\n                    <Button variant=\"contained\" onClick={handleDone}>\r\n                      Done\r\n                    </Button>\r\n                  </div>\r\n                </Select>\r\n                {errors.profession && (\r\n                  <Typography color=\"error\">{errors.profession}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            {/* Working With Dropdown */}\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Working With *</FormLabel>\r\n                <Select\r\n                  name=\"workingWith\"\r\n                  multiple\r\n                  value={workingWith}\r\n                  onChange={handleMultipleSelectChange(\r\n                    setWorkingWith,\r\n                    'pEmploymentTypeId'\r\n                  )}\r\n                  input={<OutlinedInput />}\r\n                  // renderValue={(selected) => (selected as string[]).join(', ')}\r\n                  renderValue={(selected) => {\r\n                    if (selected.includes(0)) {\r\n                      // Display \"Open For All\" when the value 0 is selected\r\n                      return 'Open For All';\r\n                    }\r\n                    const selectedNames = selectedWorkingWith\r\n                      .filter((work) => selected.includes(work.id))\r\n                      .map((work) => work.name);\r\n                    return selectedNames.join(', ');\r\n                  }}\r\n                  size=\"small\"\r\n                  open={workingWithDropdownOpen}\r\n                  onClose={handleClose}\r\n                  onOpen={() => handleOpen('workingWith')}\r\n                >\r\n                  <MenuItem value={0}>\r\n                    <Checkbox checked={workingWith.includes(0)} /> Open For All\r\n                  </MenuItem>\r\n                  {selectedWorkingWith.map((work) => (\r\n                    <MenuItem key={work.id} value={work.id}>\r\n                      <Checkbox checked={workingWith.indexOf(work.id) > -1} />\r\n                      {work.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                  <div className=\"donebutton\">\r\n                    <Button variant=\"contained\" onClick={handleDone}>\r\n                      Done\r\n                    </Button>\r\n                  </div>\r\n                </Select>\r\n                {errors.workingWith && (\r\n                  <Typography color=\"error\">{errors.workingWith}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            {/* Annual Income Dropdown */}\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Annual Income *</FormLabel>\r\n                <Select\r\n                  name=\"annualIncome\"\r\n                  multiple\r\n                  value={annualIncome}\r\n                  onChange={handleMultipleSelectChange(\r\n                    setAnnualIncome,\r\n                    'pAnnualIncomeId'\r\n                  )}\r\n                  input={<OutlinedInput />}\r\n                  // renderValue={(selected) => (selected as string[]).join(', ')}\r\n                  renderValue={(selected) => {\r\n                    if (selected.includes(0)) {\r\n                      // Display \"Open For All\" when the value 0 is selected\r\n                      return 'Open For All';\r\n                    }\r\n                    const selectedNames = selectedAnnualIncome\r\n                      .filter((income) => selected.includes(income.id))\r\n                      .map((income) => income.value);\r\n                    return selectedNames.join(', ');\r\n                  }}\r\n                  size=\"small\"\r\n                  open={annualIncomeDropdownOpen}\r\n                  onClose={handleClose}\r\n                  onOpen={() => handleOpen('annualIncome')}\r\n                >\r\n                  <MenuItem value={0}>\r\n                    <Checkbox checked={annualIncome.includes(0)} /> Open For All\r\n                  </MenuItem>\r\n                  {selectedAnnualIncome.map((income) => (\r\n                    <MenuItem key={income.id} value={income.id}>\r\n                      <Checkbox\r\n                        checked={annualIncome.indexOf(income.id) > -1}\r\n                      />\r\n                      {income.value}\r\n                    </MenuItem>\r\n                  ))}\r\n                  <div className=\"donebutton\">\r\n                    <Button variant=\"contained\" onClick={handleDone}>\r\n                      Done\r\n                    </Button>\r\n                  </div>\r\n                </Select>\r\n                {errors.annualIncome && (\r\n                  <Typography color=\"error\">{errors.annualIncome}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h3\">Other Details</Typography>\r\n            </Grid>\r\n\r\n            {/* Diet Dropdown */}\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Diet *</FormLabel>\r\n                <Select\r\n                  name=\"diet\"\r\n                  multiple\r\n                  value={diet}\r\n                  onChange={handleMultipleSelectChange(setDiet, 'pDietId')}\r\n                  size=\"small\"\r\n                  input={<OutlinedInput />}\r\n                  // displayEmpty\r\n                  renderValue={(selected) => {\r\n                    if (selected.includes(0)) {\r\n                      // Display \"Open For All\" when the value 0 is selected\r\n                      return 'Open For All';\r\n                    }\r\n                    const selectedNames = configData.dietTypeList\r\n                      .filter((status) => selected.includes(status.id))\r\n                      .map((status) => status.name);\r\n                    return selectedNames.join(', ');\r\n                  }}\r\n                  open={dietDropdownOpen}\r\n                  onClose={handleClose}\r\n                  onOpen={() => handleOpen('diet')}\r\n                >\r\n                  {/* <MenuItem value=\"\" disabled>\r\n                    Please select your diet preference\r\n                  </MenuItem>\r\n                  {configData.dietTypeList.map((dietItem: any) => (\r\n                    <MenuItem key={dietItem.id} value={dietItem.id}>\r\n                      {dietItem.name}\r\n                    </MenuItem>\r\n                  ))} */}\r\n                  <MenuItem value={0}>\r\n                    <Checkbox checked={diet.includes(0)} /> Open For All\r\n                  </MenuItem>\r\n                  {configData.dietTypeList.map((status) => (\r\n                    <MenuItem key={status.id} value={status.id}>\r\n                      <Checkbox checked={diet.indexOf(status.id) > -1} />\r\n                      {status.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                  <div className=\"donebutton\">\r\n                    <Button variant=\"contained\" onClick={handleDone}>\r\n                      Done\r\n                    </Button>\r\n                  </div>\r\n                </Select>\r\n                {errors.diet && (\r\n                  <Typography color=\"error\">{errors.diet}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            {/* Smoking Acceptance Radio Buttons */}\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Smoking Acceptance *</FormLabel>\r\n                <RadioGroup\r\n                  name=\"smokingAcceptance\"\r\n                  value={smokingAcceptance}\r\n                  onChange={handleRadioChange(\r\n                    setSmokingAcceptance,\r\n                    'pSmokingAcceptance'\r\n                  )}\r\n                  row\r\n                >\r\n                  <FormControlLabel value={1} control={<Radio />} label=\"Yes\" />\r\n                  <FormControlLabel value={2} control={<Radio />} label=\"No\" />\r\n                  <FormControlLabel\r\n                    value={0}\r\n                    control={<Radio />}\r\n                    label=\"Doesn't matter\"\r\n                  />\r\n                </RadioGroup>\r\n                {errors.smokingAcceptance && (\r\n                  <Typography color=\"error\">\r\n                    {errors.smokingAcceptance}\r\n                  </Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            {/* Alcohol Acceptance Radio Buttons */}\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Alcohol Acceptance *</FormLabel>\r\n                <RadioGroup\r\n                  name=\"alcoholAcceptance\"\r\n                  value={alcoholAcceptance}\r\n                  onChange={handleRadioChange(\r\n                    setAlcoholAcceptance,\r\n                    'pAlcoholAcceptance'\r\n                  )}\r\n                  row\r\n                >\r\n                  <FormControlLabel value={1} control={<Radio />} label=\"Yes\" />\r\n                  <FormControlLabel value={2} control={<Radio />} label=\"No\" />\r\n                  <FormControlLabel\r\n                    value={0}\r\n                    control={<Radio />}\r\n                    label=\"Doesn't matter\"\r\n                  />\r\n                </RadioGroup>\r\n                {errors.alcoholAcceptance && (\r\n                  <Typography color=\"error\">\r\n                    {errors.alcoholAcceptance}\r\n                  </Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            {/* Disability Acceptance Radio Buttons */}\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Disability Acceptance *</FormLabel>\r\n                <RadioGroup\r\n                  name=\"disabilityAcceptance\"\r\n                  value={disabilityAcceptance}\r\n                  onChange={handleRadioChange(\r\n                    setDisabilityAcceptance,\r\n                    'pDisabilityAcceptance'\r\n                  )}\r\n                  row\r\n                >\r\n                  <FormControlLabel value={1} control={<Radio />} label=\"Yes\" />\r\n                  <FormControlLabel value={2} control={<Radio />} label=\"No\" />\r\n                  <FormControlLabel\r\n                    value={0}\r\n                    control={<Radio />}\r\n                    label=\"Doesn't matter\"\r\n                  />\r\n                </RadioGroup>\r\n                {errors.disabilityAcceptance && (\r\n                  <Typography color=\"error\">\r\n                    {errors.disabilityAcceptance}\r\n                  </Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            {/* Complexion Dropdown */}\r\n\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Complexion *</FormLabel>\r\n                <Select\r\n                  name=\"complexion\"\r\n                  multiple\r\n                  value={complexion}\r\n                  onChange={handleMultipleSelectChangecomplexion(\r\n                    setComplexion,\r\n                    'pComplexion'\r\n                  )}\r\n                  input={<OutlinedInput />}\r\n                  // renderValue={(selected) => (selected as string[]).join(', ')}\r\n                  // renderValue={(selected) => {\r\n                  //   // Find names for selected IDs\r\n                  //   const selectedNames = configData.maritalStatus\r\n                  //     .filter(comp => selected.includes(comp.id))\r\n                  //     .map(comp => comp.name);\r\n                  //   return selectedNames.join(', ');\r\n                  // }}\r\n                  // renderValue={(selected) => (selected as string[]).join(', ')}\r\n                  renderValue={(selected) => {\r\n                    // Check if 'Open For All' (value '0') is selected\r\n                    if (selected.includes('0')) {\r\n                      return 'Open For All';\r\n                    }\r\n                    // Otherwise, join the selected values as a comma-separated string\r\n                    return (selected as string[]).join(', ');\r\n                  }}\r\n                  size=\"small\"\r\n                  open={complexionDropdownOpen}\r\n                  onClose={handleClose}\r\n                  onOpen={() => handleOpen('complexion')}\r\n                >\r\n                  <MenuItem value=\"0\">\r\n                    <Checkbox checked={complexion.includes('0')} /> Open For All\r\n                  </MenuItem>\r\n                  {configData.complexionList.map((comp) => (\r\n                    <MenuItem key={comp.id} value={comp.name}>\r\n                      <Checkbox checked={complexion.indexOf(comp.name) > -1} />\r\n                      {comp.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                  <div className=\"donebutton\">\r\n                    <Button variant=\"contained\" onClick={handleDone}>\r\n                      Done\r\n                    </Button>\r\n                  </div>\r\n                </Select>\r\n                {errors.complexion && (\r\n                  <Typography color=\"error\">{errors.complexion}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            {/* <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Complexion *</FormLabel>\r\n                <Select\r\n                  name=\"complexion\"\r\n                  value={complexion}\r\n                  onChange={handleSelectChange(setComplexion)}\r\n                  size=\"small\"\r\n                  displayEmpty\r\n                >\r\n                  <MenuItem value=\"\" disabled>\r\n                    Please select your complexion\r\n                  </MenuItem>\r\n                  {configData.complexionList.map((complexionItem: any) => (\r\n                    <MenuItem\r\n                      key={complexionItem.id}\r\n                      value={complexionItem.name}\r\n                    >\r\n                      {complexionItem.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {errors.complexion && (\r\n                  <Typography color=\"error\">{errors.complexion}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid> */}\r\n\r\n            {/* Body Type Dropdown */}\r\n            <Grid item xs={6}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Body Type *</FormLabel>\r\n                <Select\r\n                  name=\"bodyType\"\r\n                  multiple\r\n                  value={bodyType}\r\n                  onChange={handleMultipleSelectChangecomplexion(\r\n                    setBodyType,\r\n                    'pBodyType'\r\n                  )}\r\n                  input={<OutlinedInput />}\r\n                  size=\"small\"\r\n                  // renderValue={(selected) => (selected as string[]).join(', ')}\r\n                  renderValue={(selected) => {\r\n                    if (Array.isArray(selected) && selected.includes('0')) {\r\n                      return 'Open For All';\r\n                    }\r\n                    return Array.isArray(selected) ? selected.join(', ') : '';\r\n                  }}\r\n                  open={bodyTypeDropdownOpen}\r\n                  onClose={handleClose}\r\n                  onOpen={() => handleOpen('bodyType')}\r\n                  // displayEmpty\r\n                >\r\n                  {/* <MenuItem value=\"\" disabled>\r\n                    Please select your body type\r\n                  </MenuItem>\r\n                  {configData.bodyTypesList.map((bodyTypeItem: any) => (\r\n                    <MenuItem key={bodyTypeItem.id} value={bodyTypeItem.name}>\r\n                      {bodyTypeItem.name}\r\n                    </MenuItem>\r\n                  ))} */}\r\n                  <MenuItem value=\"0\">\r\n                    <Checkbox checked={bodyType.includes('0')} /> Open For All\r\n                  </MenuItem>\r\n                  {configData.bodyTypesList.map((bodyTypeItem) => (\r\n                    <MenuItem key={bodyTypeItem.id} value={bodyTypeItem.name}>\r\n                      <Checkbox\r\n                        checked={bodyType.indexOf(bodyTypeItem.name) > -1}\r\n                      />\r\n                      {bodyTypeItem.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                  <div className=\"donebutton\">\r\n                    <Button variant=\"contained\" onClick={handleDone}>\r\n                      Done\r\n                    </Button>\r\n                  </div>\r\n                </Select>\r\n                {errors.bodyType && (\r\n                  <Typography color=\"error\">{errors.bodyType}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <FormControl fullWidth>\r\n                <FormLabel>Any Other Expectation *</FormLabel>\r\n                <TextField\r\n                  name=\"expectation\"\r\n                  value={expectation}\r\n                  onChange={handleExpectation}\r\n                  placeholder=\"Enter any expectations\"\r\n                  size=\"small\"\r\n                />\r\n                {errors.expectation && (\r\n                  <Typography color=\"error\">{errors.expectation}</Typography>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n            {apiResponse && (\r\n              <Typography color=\"success\">{apiResponse}</Typography>\r\n            )}\r\n            {apiError && <Typography color=\"error\">{apiError}</Typography>}\r\n          </Grid>\r\n        </Box>\r\n\r\n        {/* Navigation Buttons */}\r\n        <Box className=\"navigation-buttons\">\r\n          <Button variant=\"contained\" onClick={onBack}>\r\n            Back\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={cred.isDemoUser == '1' ? onNext : handleNext}\r\n          >\r\n            Next\r\n          </Button>\r\n        </Box>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Step10;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Box, Button, Card, Typography, Grid, FormLabel } from '@mui/material';\r\nimport { AddAppUser, UserDocuments } from 'src/models/addappuser';\r\nimport { useSnackbar } from 'src/content/useSnackbar';\r\n\r\ninterface Step11Props {\r\n  title: { id: number; name: string }[];\r\n  progressBarLength: string;\r\n  onBack: () => void;\r\n  onNext: () => void;\r\n  currentStepId: number;\r\n  userInfo: any; // Add userInfo prop to access the global state\r\n  setUserInfo: (userInfo: any) => void;\r\n}\r\n\r\nconst Step11: React.FC<Step11Props> = ({\r\n  title,\r\n  progressBarLength,\r\n  onBack,\r\n  onNext,\r\n  currentStepId,\r\n  userInfo,\r\n  setUserInfo\r\n}) => {\r\n  debugger;\r\n  const [aadharImage, setAadharImage] = useState<string | null>(\r\n    userInfo?.documents[0]?.documentUrl || null\r\n  );\r\n  const [voterIdImage, setVoterIdImage] = useState<string | null>(\r\n    userInfo?.documents[1]?.documentUrl || null\r\n  );\r\n  const { showSnackBar, SnackbarComponent } = useSnackbar();\r\n\r\n  // Error state for validation\r\n  const [aadharError, setAadharError] = useState<string | null>(null);\r\n  const [voterIdError, setVoterIdError] = useState<string | null>(null);\r\n\r\n  const currentTitle =\r\n    title.find((item) => item.id === currentStepId)?.name || '';\r\n\r\n  const handleImageUpload =\r\n    (\r\n      parentField: keyof AddAppUser,\r\n      setError: React.Dispatch<React.SetStateAction<string | null>>\r\n    ) =>\r\n    (\r\n      event: React.ChangeEvent<HTMLInputElement>,\r\n      setter: React.Dispatch<React.SetStateAction<string | null>>\r\n    ) => {\r\n      const file = event.target.files?.[0];\r\n\r\n      if (file) {\r\n        const reader = new FileReader();\r\n        reader.onloadend = () => {\r\n          setter(reader.result as string); // Store image as base64 string\r\n          setError(null); // Clear error message when a file is selected\r\n        };\r\n        reader.readAsDataURL(file);\r\n      }\r\n    };\r\n\r\n  let cred = JSON.parse(localStorage.getItem('Credentials')) as any;\r\n  const handleSubmit = async () => {\r\n    // Reset error messages before validation\r\n    setAadharError(null);\r\n    setVoterIdError(null);\r\n\r\n    debugger;\r\n\r\n    try {\r\n      const userId = localStorage.getItem('userId'); // Assuming userId is stored in localStorage\r\n      if (!userId) {\r\n        console.error('User ID is missing.');\r\n        return;\r\n      }\r\n\r\n      // Validate if images are uploaded\r\n      if (!aadharImage) {\r\n        setAadharError('Aadhar card is required.');\r\n        return;\r\n      }\r\n\r\n      if (!voterIdImage) {\r\n        setVoterIdError('Voter ID is required.');\r\n        return;\r\n      }\r\n      let tableId1: Number;\r\n      let tableId2: Number;\r\n\r\n      if (Array.isArray(userInfo?.documents)) {\r\n        tableId1 = userInfo?.documents?.find(\r\n          (data) => data?.documentTypeId === 1\r\n        )?.id;\r\n\r\n        tableId2 = userInfo?.documents?.find(\r\n          (data) => data?.documentTypeId === 2\r\n        )?.id;\r\n      }\r\n\r\n      const documents = [\r\n        {\r\n          documentTypeId: 1, // Assuming 1 corresponds to Aadhar\r\n          documentUrl: aadharImage,\r\n          isRequired: 1,\r\n          id: tableId1\r\n        },\r\n        {\r\n          documentTypeId: 2, // Assuming 2 corresponds to Voter ID\r\n          documentUrl: voterIdImage,\r\n          isRequired: 1,\r\n          id: tableId2\r\n        }\r\n      ];\r\n      const token = localStorage.getItem('newToken');\r\n      // API call to submit documents\r\n      const response: any = await fetch(\r\n        '/api/admin/users/completeUserProfileV2',\r\n        {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${localStorage.getItem('newToken')}` // Include token\r\n          },\r\n          body: JSON.stringify({\r\n            id: userId,\r\n            screenNumber: 11, // Add screen number to the request\r\n            documents,\r\n            token: token,\r\n            ...(token ? {} : { userId: userId })\r\n          })\r\n        }\r\n      );\r\n\r\n      if (response?.status !== 200) {\r\n        throw new Error('Error in document submission');\r\n      }\r\n\r\n      const data = await response.json();\r\n      onNext(); // Proceed to the next step or finish\r\n    } catch (error) {\r\n      console.error('Error in document submission:', error.message);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (cred?.isDemoUser) {\r\n      showSnackBar(\r\n        \"**Access Denied**\\nWe're sorry, but you do not have permission to access this feature.\"\r\n      );\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Box>\r\n      {cred.isDemoUser > 0 && <SnackbarComponent />}\r\n      <Card className=\"container\">\r\n        {/* Title */}\r\n        <Typography variant=\"h3\" className=\"title\">\r\n          {currentTitle}\r\n        </Typography>\r\n\r\n        {/* Progress Bar */}\r\n        <Box className=\"progress-bar-container\">\r\n          <Box className=\"progress-bar\" style={{ width: progressBarLength }} />\r\n        </Box>\r\n\r\n        {/* Image Upload Fields */}\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h2\">Documents</Typography>\r\n          </Grid>\r\n\r\n          {/* Aadhar Card Upload */}\r\n          <Grid item xs={6}>\r\n            <FormLabel>Aadhar Card *</FormLabel>\r\n            <Box\r\n              className=\"image-upload-box\"\r\n              onClick={() => document.getElementById('aadhar-upload')?.click()}\r\n              sx={{\r\n                border: '1px dashed #ccc',\r\n                padding: '16px',\r\n                textAlign: 'center',\r\n                cursor: 'pointer',\r\n                height: '200px',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center'\r\n              }}\r\n            >\r\n              {aadharImage ? (\r\n                <img\r\n                  src={aadharImage}\r\n                  alt=\"Aadhar Preview\"\r\n                  style={{ maxHeight: '100%', maxWidth: '100%' }}\r\n                />\r\n              ) : (\r\n                <Typography>Click to Upload Aadhar Card</Typography>\r\n              )}\r\n              <input\r\n                type=\"file\"\r\n                id=\"aadhar-upload\"\r\n                style={{ display: 'none' }}\r\n                onChange={(e) =>\r\n                  handleImageUpload('documents', setAadharError)(\r\n                    e,\r\n                    setAadharImage\r\n                  )\r\n                }\r\n              />\r\n            </Box>\r\n            {aadharError && (\r\n              <Typography color=\"error\" variant=\"body2\">\r\n                {aadharError}\r\n              </Typography>\r\n            )}\r\n          </Grid>\r\n\r\n          {/* Voter ID Upload */}\r\n          <Grid item xs={6}>\r\n            <FormLabel>Voter ID *</FormLabel>\r\n            <Box\r\n              className=\"image-upload-box\"\r\n              onClick={() => document.getElementById('voter-upload')?.click()}\r\n              sx={{\r\n                border: '1px dashed #ccc',\r\n                padding: '16px',\r\n                textAlign: 'center',\r\n                cursor: 'pointer',\r\n                height: '200px',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center'\r\n              }}\r\n            >\r\n              {voterIdImage ? (\r\n                <img\r\n                  src={voterIdImage}\r\n                  alt=\"Voter ID Preview\"\r\n                  style={{ maxHeight: '100%', maxWidth: '100%' }}\r\n                />\r\n              ) : (\r\n                <Typography>Click to Upload Voter ID</Typography>\r\n              )}\r\n              <input\r\n                type=\"file\"\r\n                id=\"voter-upload\"\r\n                style={{ display: 'none' }}\r\n                onChange={(e) =>\r\n                  handleImageUpload('documents', setVoterIdError)(\r\n                    e,\r\n                    setVoterIdImage\r\n                  )\r\n                }\r\n              />\r\n            </Box>\r\n            {voterIdError && (\r\n              <Typography color=\"error\" variant=\"body2\">\r\n                {voterIdError}\r\n              </Typography>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {/* Navigation Buttons */}\r\n        <Box className=\"navigation-buttons\">\r\n          <Button variant=\"contained\" onClick={onBack}>\r\n            Back\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={cred.isDemoUser == '1' ? onNext : handleSubmit}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Box>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Step11;\r\n","export class AddAppUser {\r\n  id: number;\r\n\r\n  stripeCustomerId: string;\r\n\r\n  screenNumber: number;\r\n\r\n  lastCompletedScreen: number;\r\n\r\n  isProfileCompleted: number;\r\n\r\n  gender: string;\r\n\r\n  password: string;\r\n\r\n  firstName: string;\r\n\r\n  middleName: string;\r\n\r\n  lastName: string;\r\n\r\n  email: string;\r\n\r\n  mobileNumber: string;\r\n\r\n  dateOfBirth: Date;\r\n\r\n  isHideContactDetail: boolean;\r\n\r\n  maritalStatus: string;\r\n\r\n  maritalStatusId: number;\r\n\r\n  haveChildren: string | number;\r\n\r\n  noOfChildren: string | number;\r\n\r\n  height: string;\r\n\r\n  heightId: number;\r\n\r\n  weightId: number;\r\n\r\n  weight: string;\r\n\r\n  haveSpecs: string | number;\r\n\r\n  anyDisability: string | number;\r\n\r\n  bloodGroup: string;\r\n\r\n  complexion: string;\r\n\r\n  bodyType: string;\r\n\r\n  language: string[];\r\n\r\n  eyeColor: string;\r\n\r\n  aboutMe: string;\r\n\r\n  religionId: number;\r\n\r\n  religion: string;\r\n\r\n  communityId: number;\r\n\r\n  community: string;\r\n\r\n  subCommunityId: number;\r\n\r\n  subCommunity: string;\r\n\r\n  motherTongue: string;\r\n\r\n  familyType: string;\r\n\r\n  fatherDetails: FamilyMemberDetailModel;\r\n\r\n  motherDetails: FamilyMemberDetailModel;\r\n\r\n  familyDetail: FamilyMemberDetailModel[];\r\n\r\n  permanentAddress: Address;\r\n\r\n  currentAddress: Address;\r\n\r\n  nativePlace: string;\r\n\r\n  willingToGoAbroad: number;\r\n\r\n  citizenship: string;\r\n\r\n  visaStatus: string;\r\n\r\n  educationTypeId: number;\r\n\r\n  educationMediumId: number;\r\n\r\n  educationMedium: string;\r\n\r\n  educationId: number;\r\n\r\n  education: string;\r\n\r\n  areYouWorking: number;\r\n\r\n  employmentTypeId: number;\r\n\r\n  employmentType: string;\r\n\r\n  occupationId: number;\r\n\r\n  occupation: string;\r\n\r\n  designation: string;\r\n\r\n  companyName: string;\r\n\r\n  businessName: string;\r\n\r\n  annualIncomeId: number;\r\n\r\n  annualIncome: string;\r\n\r\n  horoscopeBelief: number;\r\n\r\n  birthCountryId: number;\r\n\r\n  birthCityId: number;\r\n\r\n  birthCountryName: string;\r\n\r\n  birthCityName: string;\r\n\r\n  zodiacSign: string;\r\n\r\n  manglik: number;\r\n\r\n  timeOfBirth: string;\r\n\r\n  isHideBirthTime: number;\r\n\r\n  dietId: number;\r\n\r\n  diet: string;\r\n\r\n  smoking: string;\r\n\r\n  drinking: string;\r\n\r\n  pFromAge: number;\r\n\r\n  pToAge: number;\r\n\r\n  pFromHeight: number;\r\n\r\n  pToHeight: number;\r\n\r\n  pMaritalStatusId: number[];\r\n\r\n  pProfileWithChildren: number;\r\n\r\n  pFamilyType: string;\r\n\r\n  pReligionId: number[];\r\n\r\n  pCommunityId: number[];\r\n\r\n  pMotherTongue: string;\r\n\r\n  pHoroscopeBelief: number;\r\n\r\n  pManglikMatch: number;\r\n\r\n  pCountryLivingInId: number[];\r\n\r\n  pStateLivingInId: number[];\r\n\r\n  pCityLivingInId: number[];\r\n\r\n  pEducationTypeId: number[];\r\n\r\n  pEducationMediumId: number[];\r\n\r\n  pOccupationId: number[];\r\n\r\n  pEmploymentTypeId: number[];\r\n\r\n  pAnnualIncomeId: number[];\r\n\r\n  pDietId: number[];\r\n\r\n  pSmokingAcceptance: number;\r\n\r\n  pAlcoholAcceptance: number;\r\n\r\n  pDisabilityAcceptance: number;\r\n\r\n  pComplexion: string[];\r\n\r\n  pBodyType: string[];\r\n\r\n  pOtherExpectations: string;\r\n\r\n  documents: UserDocuments[];\r\n\r\n  customFields: CustomFieldModel[];\r\n\r\n  profileCompletedPercentage: number;\r\n\r\n  pCountries: string;\r\n\r\n  pReligions: string;\r\n\r\n  pCommunities: string;\r\n\r\n  pStates: string;\r\n\r\n  pEducationMedium: string;\r\n\r\n  pOccupation: string;\r\n\r\n  pEmploymentType: string;\r\n\r\n  pAnnualIncome: string;\r\n\r\n  pEducationType: string;\r\n\r\n  pCities: string;\r\n\r\n  pMaritalStatus: string;\r\n\r\n  pDiet: string;\r\n\r\n  flag: string;\r\n\r\n  countryCode: string;\r\n\r\n  age: number;\r\n\r\n  imageUrl: string;\r\n\r\n  token: string;\r\n\r\n  refreshToken: string;\r\n\r\n  userWalletAmount: number;\r\n\r\n  oAuthUserId: string;\r\n\r\n  oAuthUserName: string;\r\n\r\n  oAuthUserPicUrl: string;\r\n\r\n  oAuthAccessToken: string;\r\n\r\n  description: string;\r\n\r\n  oAuthProviderName: string;\r\n\r\n  userPackage: UserPackage;\r\n\r\n  isAppleLogin: boolean;\r\n\r\n  isOAuth: boolean;\r\n\r\n  latitude: number;\r\n\r\n  longitude: number;\r\n\r\n  masterEntryData: MasterDataModel;\r\n\r\n  // address1: string;\r\n\r\n  // address2: string;\r\n\r\n  // cityName: string;\r\n\r\n  // pincode: string;\r\n\r\n  // countryName: string;\r\n\r\n  // stateName: string;\r\n\r\n  // districtName: string;\r\n\r\n  // districtId: number;\r\n\r\n  // countryId: number;\r\n\r\n  // stateId: number;\r\n\r\n  // cityId: number;\r\n\r\n  expectation: string;\r\n\r\n  userFlags: UserFlags[];\r\n\r\n  isVerifiedProfile: boolean;\r\n\r\n  isFavourite: number;\r\n\r\n  totalView: number;\r\n\r\n  matchingPercentage: number;\r\n\r\n  fcmtoken: string;\r\n\r\n  profileForId: number;\r\n\r\n  profileForName: string;\r\n\r\n  addressLine1: string;\r\n\r\n  addressLine2: string;\r\n\r\n  isBlock: number;\r\n\r\n  isVerifyProfilePic: boolean;\r\n\r\n  isProposed: number;\r\n\r\n  hasCancelled: number;\r\n\r\n  proposalStatus: number;\r\n\r\n  isProposalSent: number;\r\n\r\n  isProposalReceived: number;\r\n\r\n  memberId: string;\r\n\r\n  constructor() {\r\n    this.familyDetail = [];\r\n\r\n    this.documents = [];\r\n\r\n    this.customFields = [];\r\n\r\n    this.userFlags = [];\r\n  }\r\n}\r\n\r\nexport class FamilyMemberDetailModel {\r\n  id?: number;\r\n\r\n  userId?: number;\r\n\r\n  name?: string[];\r\n\r\n  memberType?: string;\r\n\r\n  memberSubType?: string;\r\n\r\n  educationId?: string;\r\n\r\n  educationType?: string;\r\n\r\n  occupationId?: number;\r\n\r\n  occupationType?: string;\r\n\r\n  maritalStatusId?: number;\r\n\r\n  maritalStatusType?: string;\r\n\r\n  isAlive?: number;\r\n\r\n  // relationship: string;\r\n\r\n  // aliveStatus: number;\r\n\r\n  // occupation: string;\r\n}\r\n\r\nexport class Address {\r\n  id: string;\r\n\r\n  addressLine1: string;\r\n\r\n  addressLine2: string;\r\n\r\n  cityName: string;\r\n\r\n  state: string;\r\n\r\n  country: string;\r\n\r\n  pincode: string;\r\n\r\n  residentialStatus: string;\r\n}\r\n\r\nexport class  UserDocuments {\r\n  id: number;\r\n\r\n  userId: number;\r\n\r\n  documentTypeId: number;\r\n\r\n  documentUrl: string;\r\n\r\n  isVerified: boolean;\r\n\r\n  isRequired: boolean;\r\n\r\n  isActive: boolean;\r\n\r\n  isDelete: boolean;\r\n\r\n  createdDate: Date;\r\n\r\n  modifiedDate: Date;\r\n\r\n  createdBy: number;\r\n\r\n  modifiedBy: number;\r\n\r\n  documentTypeName: string;\r\n\r\n  isError: boolean;\r\n}\r\n\r\nexport class CustomFieldModel {\r\n  fieldName: string;\r\n\r\n  fieldValue: string;\r\n}\r\n\r\nexport class UserPackage {\r\n  packageName: string;\r\n\r\n  packageExpiryDate: Date;\r\n}\r\n\r\nexport class MasterDataModel {\r\n  entryType: string;\r\n\r\n  entryId: number;\r\n\r\n  entryValue: string;\r\n}\r\n\r\nexport class UserFlags {\r\n  flagName: string;\r\n\r\n  flagValue: boolean;\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Box, Grid, Stack, Breadcrumbs, Typography } from '@mui/material';\r\nimport HomeIcon from '@mui/icons-material/Home';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport PageTitleWrapper from 'src/components/PageTitleWrapper';\r\nimport Step1 from './steps/Step1';\r\nimport Step2 from './steps/Step2';\r\nimport Step3 from './steps/Step3';\r\nimport Step4 from './steps/Step4';\r\nimport Step5 from './steps/Step5';\r\nimport Step6 from './steps/Step6';\r\nimport Step7 from './steps/Step7';\r\nimport Step8 from './steps/Step8';\r\nimport Step9 from './steps/Step9';\r\nimport Step10 from './steps/Step10';\r\nimport Step11 from './steps/Step11';\r\nimport { AddAppUser } from 'src/models/addappuser';\r\nimport APIservice from 'src/utils/APIservice';\r\nimport { toast } from 'react-toastify';\r\nimport Loader1 from '../Loader';\r\nimport { useSnackbar } from '../useSnackbar';\r\n\r\ninterface ConfigData {\r\n  profileForList: Array<{ id: number; name: string; gender: string | null }>;\r\n  genderList: string[];\r\n}\r\n\r\nconst addAppUser: React.FC = () => {\r\n  const [activeTab, setActiveTab] = React.useState<number>(0); // State to manage active tab\r\n  const [configData, setConfigData] = useState<ConfigData | null>(null); // State for JSON data\r\n  const [title, setTitle] = useState<{ id: number; name: string }[]>([]);\r\n  const UserId = useParams();\r\n  const [userInfo, setUserInfo] = useState<AddAppUser>(new AddAppUser());\r\n  const [loading, setLoading] = useState(true);\r\n  const { showSnackBar, SnackbarComponent } = useSnackbar();\r\n  \r\n\r\n  const getData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      localStorage.setItem('userId', UserId.id);\r\n      const token = localStorage.getItem('SessionToken');\r\n      const refreshToken = localStorage.getItem('RefreshToken');\r\n      let obj = { userId: UserId.id };\r\n      // console.log('userId', obj)\r\n\r\n      const res = await APIservice.httpPost(\r\n        '/api/admin/appUsers/viewAppUserPerDetail',\r\n        obj,\r\n        token,\r\n        refreshToken\r\n      );\r\n      if (\r\n        res &&\r\n        res.recordList &&\r\n        res.recordList.userDetail &&\r\n        res.recordList.userDetail[0]\r\n      ) {\r\n        const userDetails = res.recordList.userDetail[0];\r\n        console.log('Details', userDetails, userDetails?.userDocuments);\r\n        const languages =\r\n          typeof userDetails.languages === 'string'\r\n            ? userDetails.languages.split(',').map((lang) => lang.trim())\r\n            : userDetails.languages || [];\r\n        const pMotherTongue =\r\n          typeof userDetails.pMotherTongue === 'string'\r\n            ? userDetails.pMotherTongue.split(',').map((lang) => lang.trim())\r\n            : userDetails.pMotherTongue || [];\r\n        debugger;\r\n        // Update the userInfo state with the new values from the API response\r\n        setUserInfo((prevState) => ({\r\n          ...prevState,\r\n\r\n          profileForId: userDetails.profileForId || prevState.profileForId,\r\n          gender: userDetails.gender || prevState.gender,\r\n\r\n          imageUrl: userDetails?.imageUrl || prevState?.imageUrl,\r\n          firstName: userDetails.firstName || prevState.firstName,\r\n          middleName: userDetails.middleName || prevState.middleName,\r\n          lastName: userDetails.lastName || prevState.lastName,\r\n          email: userDetails.email || prevState.email,\r\n          mobileNumber:\r\n            userDetails.contactNo.slice(-10) ||\r\n            prevState.mobileNumber.slice(-10),\r\n          dateOfBirth: userDetails.birthDate || prevState.dateOfBirth,\r\n          maritalStatusId:\r\n            userDetails.maritalStatusId || prevState.maritalStatusId,\r\n          haveChildren: userDetails.haveChildren || prevState.haveChildren,\r\n          noOfChildren: userDetails.noOfChildren || prevState.noOfChildren,\r\n          height: userDetails.heightId || prevState.heightId,\r\n          weight: userDetails.weightId || prevState.weightId,\r\n          haveSpecs: userDetails.haveSpecs || prevState.haveSpecs,\r\n          anyDisability: userDetails.anyDisability || prevState.anyDisability,\r\n          bloodGroup: userDetails.bloodGroup || prevState.bloodGroup,\r\n          complexion: userDetails.complexion || prevState.complexion,\r\n          bodyType: userDetails.bodyType || prevState.bodyType,\r\n          eyeColor: userDetails.eyeColor || prevState.eyeColor,\r\n          language: languages,\r\n          aboutMe: userDetails.aboutMe || prevState.aboutMe,\r\n\r\n          religion: userDetails.religion || prevState.religion,\r\n          community: userDetails.community || prevState.community,\r\n          subCommunity: userDetails.subCommunity || prevState.subCommunity,\r\n          motherTongue: userDetails.motherTongue || prevState.motherTongue,\r\n\r\n          familyType: userDetails.familyType || prevState.familyType,\r\n          // fatherDetails: {\r\n          //   id: userDetails.id || prevState.id,\r\n          //   name: userDetails.name || prevState.fatherDetails,\r\n          // },\r\n          fatherDetails: userDetails.fatherDetails || prevState.fatherDetails,\r\n          motherDetails: userDetails.motherDetails || prevState.motherDetails,\r\n          familyDetail: userDetails.familyDetail || prevState.familyDetail,\r\n          documents: userDetails?.userDocuments || null,\r\n\r\n          permanentAddress:\r\n            userDetails.permanentAddress || prevState.permanentAddress,\r\n          currentAddress:\r\n            userDetails.currentAddress || prevState.currentAddress,\r\n          nativePlace: userDetails.nativePlace || prevState.nativePlace,\r\n          citizenship: userDetails.citizenship || prevState.citizenship,\r\n          willingToGoAbroad:\r\n            userDetails.willingToGoAbroad || prevState.willingToGoAbroad,\r\n          visaStatus: userDetails.visaStatus || prevState.visaStatus,\r\n          educationMediumId:\r\n            userDetails.educationMedium || prevState.educationMediumId,\r\n          educationTypeId:\r\n            userDetails.educationType || prevState.educationTypeId,\r\n          educationId: userDetails.educationId || prevState.educationId,\r\n          areYouWorking: userDetails.areYouWorking || prevState.areYouWorking,\r\n          occupationId: userDetails.occupationId || prevState.occupationId,\r\n          designation: userDetails.designation || prevState.designation,\r\n          employmentTypeId:\r\n            userDetails.employmentTypeId || prevState.employmentTypeId,\r\n          companyName: userDetails.companyName || prevState.companyName,\r\n          businessName: userDetails.businessName || prevState.businessName,\r\n          annualIncome: userDetails.annualIncomeId || prevState.annualIncome,\r\n          horoscopeBelief:\r\n            userDetails.horoscopeBelief || prevState.horoscopeBelief,\r\n          birthCountryId:\r\n            userDetails.birthCountryId || prevState.birthCountryId,\r\n          birthCityId: userDetails.birthCityId || prevState.birthCityId,\r\n          zodiacSign: userDetails.zodiacSign || prevState.zodiacSign,\r\n          timeOfBirth: userDetails.timeOfBirth || prevState.timeOfBirth,\r\n          manglik: userDetails.manglik || prevState.manglik,\r\n\r\n          diet: userDetails.diet || prevState.diet,\r\n          smoking: userDetails.smoking || prevState.smoking,\r\n          drinking: userDetails.drinking || prevState.drinking,\r\n\r\n          pMaritalStatusId:\r\n            userDetails.pMaritalStatusId || prevState.pMaritalStatusId,\r\n          pProfileWithChildren:\r\n            userDetails.pProfileWithChildren || prevState.pProfileWithChildren,\r\n          pFamilyType: userDetails.pFamilyType || prevState.pFamilyType,\r\n          pReligionId: userDetails.pReligionId || prevState.pReligionId,\r\n          pCommunityId: userDetails.pCommunityId || prevState.pCommunityId,\r\n          pMotherTongue: pMotherTongue,\r\n          pHoroscopeBelief:\r\n            userDetails.pHoroscopeBelief || prevState.pHoroscopeBelief,\r\n          pManglikMatch: userDetails.pManglikMatch || prevState.pManglikMatch,\r\n          pCountryLivingInId:\r\n            userDetails.pCountryLivingInId || prevState.pCountryLivingInId,\r\n          pStateLivingInId:\r\n            userDetails.pStateLivingInId || prevState.pStateLivingInId,\r\n          pCityLivingInId:\r\n            userDetails.pCityLivingInId || prevState.pCityLivingInId,\r\n          pEducationMediumId:\r\n            userDetails.pEducationMediumId || prevState.pEducationMediumId,\r\n          pOccupationId: userDetails.pOccupationId || prevState.pOccupationId,\r\n          pEmploymentTypeId:\r\n            userDetails.pEmploymentTypeId || prevState.pEmploymentTypeId,\r\n          pAnnualIncomeId:\r\n            userDetails.pAnnualIncomeId || prevState.pAnnualIncomeId,\r\n          pDietId: userDetails.pDietId || prevState.pDietId,\r\n          pSmokingAcceptance:\r\n            userDetails.pSmokingAcceptance || prevState.pSmokingAcceptance,\r\n          pAlcoholAcceptance:\r\n            userDetails.pAlcoholAcceptance || prevState.pAlcoholAcceptance,\r\n          pDisabilityAcceptance:\r\n            userDetails.pDisabilityAcceptance ||\r\n            prevState.pDisabilityAcceptance,\r\n          pComplexion: userDetails.pComplexion || prevState.pComplexion,\r\n          pBodyType: userDetails.pBodyType || prevState.pBodyType,\r\n          pOtherExpectations:\r\n            userDetails.pOtherExpectations || prevState.pOtherExpectations,\r\n          pEducationTypeId:\r\n            userDetails.pEducationTypeId || prevState.pEducationTypeId\r\n        }));\r\n      }\r\n    } catch (error) {\r\n      toast.error(error, {\r\n        autoClose: 6000,\r\n        hideProgressBar: true,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: 'colored',\r\n        position: toast.POSITION.TOP_RIGHT\r\n      });\r\n    } finally {\r\n      setLoading(false); // End loading after data is fetched\r\n    }\r\n  };\r\n  // debugger;\r\n  // const [userInfo, setUserInfo] = useState('');\r\n  console.info('mainUser--------------------afetr edit click--->', userInfo);\r\n\r\n  // useEffect (()=> {let cred = JSON.parse(localStorage.getItem('Credentials'));\r\n  // setCredentail(cred);\r\n  \r\n  // })\r\n\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      localStorage.setItem('userInfo', JSON.stringify(userInfo));\r\n    }\r\n  }, [userInfo]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('activeTab', activeTab.toString());\r\n  }, [activeTab]);\r\n\r\n  useEffect(() => {\r\n    debugger;\r\n    if (userInfo) {\r\n      const savedUserInfo = localStorage.getItem('userInfo');\r\n      if (savedUserInfo) {\r\n        setUserInfo(JSON.parse(savedUserInfo));\r\n      }\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    // Reset sign-up state on page refresh\r\n    const resetOnRefresh = () => {\r\n      localStorage.removeItem('userId');\r\n      localStorage.removeItem('newToken');\r\n      localStorage.removeItem('rtoken');\r\n      localStorage.removeItem('isSignedUp');\r\n      // localStorage.setItemItem('isEdit');\r\n    };\r\n\r\n    resetOnRefresh();\r\n  }, []);\r\n\r\n  console.log('userInfo--------->', userInfo);\r\n\r\n  useEffect(() => {\r\n    const savedActiveTab = localStorage.getItem('activeTab');\r\n    if (savedActiveTab) {\r\n      setActiveTab(parseInt(savedActiveTab, 10));\r\n    }\r\n  }, []);\r\n\r\n  // Fetch configuration data from the API once\r\n  useEffect(() => {\r\n    fetch('/api/admin/addAppUserRoutes/getVariables')\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data.success) {\r\n          setConfigData(data.data);\r\n        } else {\r\n          console.error('Failed to fetch configuration data');\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching configuration data:', error);\r\n      });\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const response = await fetch('/api/app/users/getMasterData', {\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Fetched data:', data);\r\n\r\n      if (data && data.recordList) {\r\n        setTitle(data.recordList.registrationScreens || []);\r\n      } else {\r\n        console.error('Unexpected data format:', data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    getData();\r\n  }, []);\r\n\r\n  // const handleNext = () => {\r\n  //   if (activeTab < 10) {\r\n  //     // Adjust the limit based on the number of steps\r\n  //     setActiveTab((prevTab) => prevTab + 1);\r\n  //   }\r\n  // };\r\n\r\n  const handleNext = () => {\r\n    if (activeTab < 10 ) {\r\n      // Move to the next step if it's not the last one\r\n      setActiveTab((prevTab) => prevTab + 1);\r\n    } else {\r\n      // Handle the final step submission\r\n      handleFinalSubmit();\r\n    }\r\n  };\r\n\r\n  // const handleFinalSubmit = () => {\r\n  //   console.log('Final form submission');\r\n  //   // Logic to submit the form or navigate to another location\r\n  //   window.location.href = '/admin/appuser'; // Example of navigation\r\n  // };\r\n\r\n  const handleFinalSubmit = () => {\r\n    console.log('Final form submission');\r\n    // Clear localStorage after final submission\r\n    localStorage.removeItem('userInfo');\r\n    localStorage.removeItem('activeTab');\r\n    localStorage.removeItem('profileForId');\r\n    localStorage.removeItem('gender');\r\n    localStorage.removeItem('userId');\r\n    localStorage.removeItem('newToken');\r\n    localStorage.removeItem('rtoken');\r\n    // localStorage.removeItem('isEdit');\r\n    // localStorage.removeItem('token');\r\n    window.location.href = '/admin/appuser'; // Example of navigation\r\n  };\r\n\r\n  // Move to previous step\r\n  const handleBack = () => {\r\n    if (activeTab > 0) {\r\n      setActiveTab((prevTab) => prevTab - 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <PageTitleWrapper>\r\n        <Box py={1.9} pl={1}>\r\n          <Grid container justifyContent=\"space-between\" alignItems=\"center\">\r\n            <Grid item>\r\n              <Stack alignItems=\"left\" justifyContent=\"space-between\">\r\n                <Breadcrumbs aria-label=\"breadcrumb\">\r\n                  <Link to=\"/admin/dashboard\" style={{ display: 'flex', color: 'black' }}>\r\n                    <HomeIcon />\r\n                  </Link>\r\n                  <Link\r\n                    to=\"/admin/appuser\"\r\n                    style={{\r\n                      display: 'flex',\r\n                      color: 'black',\r\n                      textDecoration: 'none'\r\n                    }}\r\n                  >\r\n                    App Users\r\n                  </Link>\r\n                  {/* <Typography>Add user</Typography> */}\r\n\r\n                  {UserId?.id ? (\r\n                    <Typography>Edit User</Typography> // Show Edit User if UId exists\r\n                  ) : (\r\n                    <Typography>Add User</Typography> // Show Add User if UId doesn't exist\r\n                  )}\r\n                </Breadcrumbs>\r\n              </Stack>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </PageTitleWrapper>\r\n\r\n      <Box sx={{ width: '100%' }}>\r\n        {loading ? (\r\n          <Loader1 title=\"Loading...\" /> // Show a loading indicator\r\n        ) : (\r\n          <>\r\n          \r\n            {activeTab === 0 && configData && (\r\n              \r\n              <Step1\r\n                title={title}\r\n                progressBarLength=\"9%\"\r\n                onNext={handleNext}\r\n                configData={configData} // Pass the config data here\r\n                currentStepId={1}\r\n                userInfo={userInfo} // Pass userInfo state\r\n                setUserInfo={setUserInfo}\r\n              />\r\n            )}\r\n            {activeTab === 1 && configData && (\r\n              <Step2\r\n                title={title}\r\n                progressBarLength=\"18%\"\r\n                onBack={handleBack}\r\n                onNext={handleNext}\r\n                // configData={configData} // Pass the config data here\r\n                currentStepId={2}\r\n                userInfo={userInfo} // Pass userInfo state\r\n                setUserInfo={setUserInfo}\r\n              />\r\n            )}\r\n            {activeTab === 2 && configData && (\r\n              <Step3\r\n                title={title}\r\n                progressBarLength=\"27%\"\r\n                onBack={handleBack}\r\n                onNext={handleNext}\r\n                configData={configData} // Pass the config data here\r\n                currentStepId={3}\r\n                userInfo={userInfo} // Pass userInfo state\r\n                setUserInfo={setUserInfo}\r\n              />\r\n            )}\r\n            {activeTab === 3 && configData && (\r\n              <Step4\r\n                title={title}\r\n                progressBarLength=\"36%\"\r\n                onBack={handleBack}\r\n                onNext={handleNext}\r\n                configData={configData} // Pass the config data here\r\n                currentStepId={4}\r\n                userInfo={userInfo} // Pass userInfo state\r\n                setUserInfo={setUserInfo}\r\n              />\r\n            )}\r\n            {activeTab === 4 && configData && (\r\n              <Step5\r\n                title={title}\r\n                progressBarLength=\"45%\"\r\n                onBack={handleBack}\r\n                onNext={handleNext}\r\n                configData={configData} // Pass the config data here\r\n                currentStepId={5}\r\n                userInfo={userInfo} // Pass userInfo state\r\n                setUserInfo={setUserInfo}\r\n              />\r\n            )}\r\n            {activeTab === 5 && configData && (\r\n              <Step6\r\n                title={title}\r\n                progressBarLength=\"54%\"\r\n                onBack={handleBack}\r\n                onNext={handleNext}\r\n                configData={configData} // Pass the config data here\r\n                currentStepId={6}\r\n                userInfo={userInfo} // Pass userInfo state\r\n                setUserInfo={setUserInfo}\r\n              />\r\n            )}\r\n            {activeTab === 6 && configData && (\r\n              <Step7\r\n                title={title}\r\n                progressBarLength=\"63%\"\r\n                onBack={handleBack}\r\n                onNext={handleNext}\r\n                // configData={configData} // Pass the config data here\r\n                currentStepId={7}\r\n                userInfo={userInfo} // Pass userInfo state\r\n                setUserInfo={setUserInfo}\r\n              />\r\n            )}\r\n            {activeTab === 7 && configData && (\r\n              <Step8\r\n                title={title}\r\n                progressBarLength=\"72%\"\r\n                onBack={handleBack}\r\n                onNext={handleNext}\r\n                configData={configData} // Pass the config data here\r\n                currentStepId={8}\r\n                userInfo={userInfo} // Pass userInfo state\r\n                setUserInfo={setUserInfo}\r\n              />\r\n            )}\r\n            {activeTab === 8 && configData && (\r\n              <Step9\r\n                title={title}\r\n                progressBarLength=\"81%\"\r\n                onBack={handleBack}\r\n                onNext={handleNext}\r\n                configData={configData} // Pass the config data here\r\n                currentStepId={9}\r\n                userInfo={userInfo} // Pass userInfo state\r\n                setUserInfo={setUserInfo}\r\n              />\r\n            )}\r\n            {activeTab === 9 && configData && (\r\n              <Step10\r\n                title={title}\r\n                progressBarLength=\"90%\"\r\n                onBack={handleBack}\r\n                onNext={handleNext}\r\n                configData={configData} // Pass the config data here\r\n                currentStepId={10}\r\n                userInfo={userInfo} // Pass userInfo state\r\n                setUserInfo={setUserInfo}\r\n              />\r\n            )}\r\n            {activeTab === 10 && configData && (\r\n              <Step11\r\n                title={title}\r\n                progressBarLength=\"100%\"\r\n                onBack={handleBack}\r\n                onNext={handleNext}\r\n                // configData={configData} // Pass the config data here\r\n                currentStepId={11}\r\n                userInfo={userInfo} // Pass userInfo state\r\n                setUserInfo={setUserInfo}\r\n              />\r\n            )}\r\n          </>\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default addAppUser;\r\n"],"names":["PageTitle","styled","Box","_ref","theme","spacing","_ref2","children","_jsx","className","Container","maxWidth","props","title","_title$find","progressBarLength","onNext","configData","currentStepId","userInfo","setUserInfo","profileFor","setProfileFor","React","profileForId","console","log","gender","setGender","genderOptions","setGenderOptions","genderList","profileForError","setProfileForError","genderError","setGenderError","selectedProfile","setSelectedProfile","showSnackBar","SnackbarComponent","useSnackbar","error","setError","currentTitle","find","item","id","name","profileForList","profile","filter","g","_jsxs","Card","Typography","variant","style","width","FormControl","component","FormLabel","ToggleButtonGroup","color","value","exclusive","onChange","handleProfileForChange","event","newProfileFor","selectedValue","selectedGender","prevUserInfo","map","option","ToggleButton","align","fullWidth","Select","target","size","MenuItem","disabled","genderOption","Button","onClick","handleNextClick","hasError","foundProfile","localStorage","setItem","toString","onBack","formData","setFormData","firstName","middleName","lastName","email","mobileNumber","dateOfBirth","isSignedUp","setIsSignedUp","useState","errors","setErrors","emailErrorMessage","setEmailErrorMessage","mobileNumberErrorMessage","setMobileNumberErrorMessage","apiResponse","setApiResponse","apiError","setApiError","base64String","setBase64String","selectedImage","setSelectedImage","imageUrl","File","URL","revokeObjectURL","createObjectURL","countryCode","setCountryCode","handleInputChange","e","length","prevErrors","emailPattern","test","isEdit","cred","JSON","parse","getItem","useEffect","isDemoUser","sx","display","flexDirection","alignItems","mb","mt","position","Avatar","src","undefined","alt","height","accept","type","async","files","selectedFile","reader","FileReader","onloadend","base64","result","readAsDataURL","htmlFor","IconButton","bottom","right","backgroundColor","borderRadius","padding","boxShadow","AddAPhotoIcon","p","Grid","container","xs","TextField","FormHelperText","slice","inputProps","maxLength","dateString","date","Date","getFullYear","String","getMonth","padStart","getDate","formatDate","InputLabelProps","shrink","max","getMinDate","today","setFullYear","day","month","contactNo","newErrors","isValid","Object","values","every","uId","emailContact","verifyResponse","APIservice","httpPost","message","includes","userId","newToken","rtoken","_signUpResult$recordL","_signUpResult$recordL2","_signUpResult$recordL3","signUpResponse","fetch","method","headers","Authorization","body","stringify","password","ok","Error","signUpResult","json","recordList","token","refreshtoken","step1Data","screenNumber","status","step2Data","birthDate","updatedData","image","martialStatus","setMartialStatus","maritalStatusId","hasChildren","setHasChildren","haveChildren","numberOfChildren","setNumberOfChildren","noOfChildren","setHeight","weight","setWeight","selectedHeight","setSelectedHeight","selectedWeight","setSelectedWeight","specsLenses","setSpecsLenses","haveSpecs","anyDisability","setAnyDisability","bloodGroup","setBloodGroup","complexion","setComplexion","bodyType","setBodyType","language","setLanguage","selectedLanguages","setSelectedLanguages","eyeType","setEyeType","eyeColor","aboutYourself","setAboutYourself","aboutMe","response","data","fetchData","handleSelectChange","setter","fieldName","handleAddLanguage","lang","filteredLanguages","languages","toLowerCase","displayEmpty","maritalStatus","RadioGroup","prev","row","FormControlLabel","control","Radio","label","placeholder","labelId","bloodGroupList","group","complexionList","bodyTypesList","onKeyDown","key","preventDefault","Chip","margin","onDelete","langToRemove","handleRemoveLanguage","eyeTypesList","inputValue","words","trim","split","limitedValue","join","multiline","rows","validateForm","valid","step3Data","heightId","weightId","religion","setReligion","selectedReligion","setSelectedReligion","community","setCommunity","selectedCommunity","setSelectedCommunity","subcommunity","setSubCommunity","selectedSubCommunity","setSelectedSubCommunity","subCommunity","motherTounge","setmotherTounge","motherTongue","filteredCommunity","setFilteredCommunity","_religion$find","religionId","r","filtered","comm","filteredSubCommunity","setFilteredSubCommunity","_community$find","communityId","c","sc","keys","MuiTypography","_religion$find2","_community$find2","_subcommunity$find","step4Data","subCommunityId","s","_userInfo$fatherDetai","_userInfo$fatherDetai2","_userInfo$fatherDetai3","_userInfo$fatherDetai4","_userInfo$motherDetai","_userInfo$motherDetai2","_userInfo$motherDetai3","_userInfo$motherDetai4","_userInfo$familyDetai3","familyType","setFamilyType","fatherStatus","setFatherStatus","fatherDetails","isAlive","fatherName","setFatherName","fatherId","setFatherId","motherId","setMotherId","otherId","setOtherId","fatherEducation","setFatherEducation","selectedFatherEducation","setselectedFatherEducation","educationId","fatherPost","setFatherPost","selectedFatherPost","setselectedFatherPost","occupationId","motherStatus","setMotherStatus","motherDetails","motherName","setMotherName","motherEducation","setMotherEducation","selectedMotherEducation","setselectedMotherEducation","motherPost","setMotherPost","selectedMotherPost","setselectedMotherPost","otherPost","setOtherPost","otherEducation","setOtherEducation","familyTypes","setFamilyTypes","subTypes","setSubTypes","fieldData","setFieldData","isFamilyLength","setIsFamilyLength","_userInfo$familyDetai","familyDetail","education","occupation","_fieldData$map","selectedFamilyType","family","memberType","flat","handleStatusChange","parentField","info","handleFieldChange","index","prevFieldData","field","renderValue","selected","selectedItem","handleAddClick","_userInfo$familyDetai2","memberSubType","_configData$familyTyp","_configData$maritalSt3","handleRemoveClick","handleFamilyTypeChange","updatedFields","i","handleSubTypeChange","subType","handleDetailChange","prevFields","_otherEducation$find","_otherPost$find","_configData$maritalSt","_configData$maritalSt2","validateFields","forEach","_userInfo$fatherDetai5","_userInfo$fatherDetai6","_userInfo$fatherDetai7","_userInfo$fatherDetai8","_userInfo$fatherDetai9","_userInfo$motherDetai5","_userInfo$motherDetai6","_userInfo$motherDetai7","_userInfo$motherDetai8","_userInfo$motherDetai9","step5Data","step5Response","_data$recordList$","_data$recordList$$fat","_data$recordList$2","_data$recordList$2$mo","Array","isArray","detail","_data$recordList$3","_data$recordList$3$fa","_data$recordList$3$fa2","defaultCenter","onMarkerUpdate","mapRef","useRef","setMap","markerRef","geocoderRef","initMap","current","googleMap","window","google","maps","Map","center","zoom","marker","Marker","addListener","latLng","newMarker","geocodeLatLng","lat","lng","Geocoder","geocode","location","results","address","formatted_address","document","querySelector","script","createElement","defer","onload","appendChild","loadGoogleMapsScript","ref","_userInfo$permanentAd","_userInfo$permanentAd2","_userInfo$permanentAd3","_userInfo$permanentAd4","_userInfo$permanentAd5","_userInfo$permanentAd6","_userInfo$permanentAd7","_userInfo$permanentAd8","_userInfo$permanentAd9","_userInfo$currentAddr","_userInfo$currentAddr2","_userInfo$currentAddr3","_userInfo$currentAddr4","_userInfo$currentAddr5","_userInfo$currentAddr6","_userInfo$currentAddr7","_userInfo$currentAddr8","_userInfo$currentAddr9","permanentAddress","setPermanentAddress","addressLine1","addressLine2","cityName","state","country","pincode","residentialStatus","latitude","longitude","cityId","stateId","countryId","districtId","currentAddress","setCurrentAddress","sameAsPermanent","setSameAsPermanent","city","visaStatus","willingToGoAbroad","nativePlace","citizenship","permanentCityList","setPermanentCityList","currentCityList","setCurrentCityList","setWillingToGoAbroad","setNativePlace","setCitizenship","setVisaStatus","fetchDataForPermanentAddress","cities","stateName","countryName","fetchDataForCurrentAddress","handlePermanentAddressChange","handleCurrentAddressChange","MapComponent","handlePermanentAddressUpdate","selectedCity","handlePermanentCityChange","md","selectedStatus","handlePermanentResidentialStatusChange","Checkbox","checked","handleCurrentAddressUpdate","handlecAddressChange","handleCurrentCityChange","handleCurrentResidentialStatusChange","visaStatusList","_userInfo$permanentAd10","_userInfo$permanentAd11","_userInfo$permanentAd12","_userInfo$permanentAd13","_userInfo$permanentAd14","_userInfo$permanentAd15","hasErrors","some","payload","educationMedium","setEducationMedium","selectedEducationMedium","setSelectedEducationMedium","educationMediumId","degreeType","setDegreeType","selectedDegreeType","setSelectedDegreeType","educationTypeId","educationDegree","setEducationDegree","selectedEducationDegree","setSelectedEducationDegree","filteredEducationDegree","setFilteredEducationDegree","isWorking","setIsWorking","areYouWorking","occupationType","setOccupationType","designation","setDesignation","selectedDesignation","setSelectedDesignation","workType","setWorkType","selectedWorkType","setSelectedWorkType","employmentTypeId","salaryRange","setSalaryRange","selectedSalaryRange","setSelectedSalaryRange","annualIncome","companyName","setCompanyName","businessName","setBusinessName","errorMessages","setErrorMessages","educationType","employmentType","prevMessages","selectedEducationType","filteredDegrees","degree","handleRadioChange","selectedTypeName","_Fragment","handleValidation","newErrorMessages","_degreeType$find","_educationMedium$find","step7Data","annualIncomeId","horoscopeBelief","setHoroscopeBelief","cityInput","setCityInput","countryOfBirth","setCountryOfBirth","birthCountryId","selectedCountryOfBirth","setSelectedCountryOfBirth","cityOfBirth","setCityOfBirth","birthCityId","selectedCityOfBirth","setSelectedCityOfBirth","zodiacSign","setZodiacSign","timeOfBirth","setTimeOfBirth","manglik","setManglik","countryResponse","countryData","cityResponse","fetchRecord","startIndex","cityData","cityDataCall","searchString","cntry","stopPropagation","autoFocus","cty","zodiacSignList","sign","LocalizationProvider","dateAdapter","AdapterDateFns","MobileTimePicker","handleTextFieldChange","newValue","renderInput","params","ampm","requestBody","errorResponse","diet","setDiet","drink","setDrink","drinking","smoker","setSmoker","smoking","dietTypeList","dietOption","drinkTypeList","drinkOption","smokeTypeList","smokeOption","_configData$dietTypeL","step9Data","dietId","ageRange","setAgeRange","heightRange","setHeightRange","pMaritalStatusId","martialDropdownOpen","setMartialDropdownOpen","profileWithChildren","setProfileWithChildren","pProfileWithChildren","preferredLivingStatus","setPreferredLivingStatus","pFamilyType","pReligionId","religionOptions","setReligionOptions","reliogionDropdownOpen","setReliogionDropdownOpen","caste","setCaste","pCommunityId","selectedCaste","setSelectedCaste","casteDropdownOpen","setCasteDropdownOpen","pHoroscopeBelief","manglikBelief","setManglikBelief","pManglikMatch","smokingAcceptance","setSmokingAcceptance","pSmokingAcceptance","alcoholAcceptance","setAlcoholAcceptance","pAlcoholAcceptance","disabilityAcceptance","setDisabilityAcceptance","pDisabilityAcceptance","setCountry","pCountryLivingInId","selectedCountry","setSelectedCountry","countryDropdownOpen","setCountryDropdownOpen","setState","pStateLivingInId","selectedState","setSelectedState","stateDropdownOpen","setStateDropdownOpen","setCity","pCityLivingInId","setSelectedCity","cityDropdownOpen","setCityDropdownOpen","searchQuery","setSearchQuery","qualification","setQualification","pEducationTypeId","qualificationOptions","setQualificationOptions","qualificationDropdownOpen","setQualificationDropdownOpen","pEducationMediumId","educationMediumOptions","setEducationMediumOptions","educationMediumDropdownOpen","setEducationMediumDropdownOpen","profession","setProfession","pOccupationId","selectedProfession","setSelectedProfession","professionDropdownOpen","setProfessionDropdownOpen","workingWith","setWorkingWith","pEmploymentTypeId","selectedWorkingWith","setSelectedWorkingWith","workingWithDropdownOpen","setWorkingWithDropdownOpen","setAnnualIncome","pAnnualIncomeId","selectedAnnualIncome","setSelectedAnnualIncome","annualIncomeDropdownOpen","setAnnualIncomeDropdownOpen","setMotherTongue","selectedMotherTongue","setSelectedMotherTongue","pMotherTongue","pDietId","dietDropdownOpen","setDietDropdownOpen","pComplexion","complexionDropdownOpen","setComplexionDropdownOpen","pBodyType","bodyTypeDropdownOpen","setBodyTypeDropdownOpen","expectation","setExpectation","pOtherExpectations","isCityCall","setIsCityCall","setCities","selectedCities","setSelectedCities","loading","setLoading","searchTerm","setSearchTerm","handleOpen","dropdown","handleClose","handleDone","stoken","fetchStatesByCountries","fetchCitiesByStates","_userInfo$pCityLiving","newcity","_cities$find","stateResponse","stateData","filteredCiti","useMemo","handleChange","handleToggleCity","prevSelected","arguments","setCityData","updatedCities","newCityData","handleMultipleSelectChange","val","handleMultipleSelectChangecomplexion","filteredCities","Slider","valueLabelDisplay","min","multiple","input","OutlinedInput","open","onClose","onOpen","indexOf","rel","cst","selectedCountries","selectedStates","st","MenuProps","PaperProps","maxHeight","List","itemCount","itemSize","isSelected","entries","ListItemText","primary","qual","medium","prof","work","income","comp","bodyTypeItem","pFromAge","pToAge","pFromHeight","pToHeight","firstErrorElement","scrollIntoView","behavior","_userInfo$documents$","_userInfo$documents$2","aadharImage","setAadharImage","documents","documentUrl","voterIdImage","setVoterIdImage","aadharError","setAadharError","voterIdError","setVoterIdError","handleImageUpload","_event$target$files","file","_document$getElementB","getElementById","click","border","textAlign","cursor","justifyContent","_document$getElementB2","tableId1","tableId2","_userInfo$documents","_userInfo$documents$f","_userInfo$documents2","_userInfo$documents2$","documentTypeId","isRequired","AddAppUser","constructor","stripeCustomerId","lastCompletedScreen","isProfileCompleted","isHideContactDetail","birthCountryName","birthCityName","isHideBirthTime","customFields","profileCompletedPercentage","pCountries","pReligions","pCommunities","pStates","pEducationMedium","pOccupation","pEmploymentType","pAnnualIncome","pEducationType","pCities","pMaritalStatus","pDiet","flag","age","refreshToken","userWalletAmount","oAuthUserId","oAuthUserName","oAuthUserPicUrl","oAuthAccessToken","description","oAuthProviderName","userPackage","isAppleLogin","isOAuth","masterEntryData","userFlags","isVerifiedProfile","isFavourite","totalView","matchingPercentage","fcmtoken","profileForName","isBlock","isVerifyProfilePic","isProposed","hasCancelled","proposalStatus","isProposalSent","isProposalReceived","memberId","this","addAppUser","activeTab","setActiveTab","setConfigData","setTitle","UserId","useParams","savedUserInfo","removeItem","savedActiveTab","parseInt","then","success","catch","registrationScreens","obj","res","userDetail","userDetails","userDocuments","prevState","toast","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","POSITION","TOP_RIGHT","getData","handleNext","prevTab","handleFinalSubmit","href","handleBack","PageTitleWrapper","py","pl","Stack","Breadcrumbs","Link","to","HomeIcon","textDecoration","Loader1","Step1","Step2","Step3","Step4","Step5","Step6","Step7","Step8","Step9","Step10","Step11"],"sourceRoot":""}